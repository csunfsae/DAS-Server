{"ast":null,"code":"export default parseString;\nvar NEUTRAL = 1;\nvar KEYWORD = 2;\nvar NUMBER = 3;\nvar QUOTED = 4;\nvar AFTERQUOTE = 5;\nvar ENDED = -1;\nvar whitespace = /\\s/;\nvar latin = /[A-Za-z]/;\nvar keyword = /[A-Za-z84]/;\nvar endThings = /[,\\]]/;\nvar digets = /[\\d\\.E\\-\\+]/; // const ignoredChar = /[\\s_\\-\\/\\(\\)]/g;\n\nfunction Parser(text) {\n  if (typeof text !== 'string') {\n    throw new Error('not a string');\n  }\n\n  this.text = text.trim();\n  this.level = 0;\n  this.place = 0;\n  this.root = null;\n  this.stack = [];\n  this.currentObject = null;\n  this.state = NEUTRAL;\n}\n\nParser.prototype.readCharicter = function () {\n  var char = this.text[this.place++];\n\n  if (this.state !== QUOTED) {\n    while (whitespace.test(char)) {\n      if (this.place >= this.text.length) {\n        return;\n      }\n\n      char = this.text[this.place++];\n    }\n  }\n\n  switch (this.state) {\n    case NEUTRAL:\n      return this.neutral(char);\n\n    case KEYWORD:\n      return this.keyword(char);\n\n    case QUOTED:\n      return this.quoted(char);\n\n    case AFTERQUOTE:\n      return this.afterquote(char);\n\n    case NUMBER:\n      return this.number(char);\n\n    case ENDED:\n      return;\n  }\n};\n\nParser.prototype.afterquote = function (char) {\n  if (char === '\"') {\n    this.word += '\"';\n    this.state = QUOTED;\n    return;\n  }\n\n  if (endThings.test(char)) {\n    this.word = this.word.trim();\n    this.afterItem(char);\n    return;\n  }\n\n  throw new Error('havn\\'t handled \"' + char + '\" in afterquote yet, index ' + this.place);\n};\n\nParser.prototype.afterItem = function (char) {\n  if (char === ',') {\n    if (this.word !== null) {\n      this.currentObject.push(this.word);\n    }\n\n    this.word = null;\n    this.state = NEUTRAL;\n    return;\n  }\n\n  if (char === ']') {\n    this.level--;\n\n    if (this.word !== null) {\n      this.currentObject.push(this.word);\n      this.word = null;\n    }\n\n    this.state = NEUTRAL;\n    this.currentObject = this.stack.pop();\n\n    if (!this.currentObject) {\n      this.state = ENDED;\n    }\n\n    return;\n  }\n};\n\nParser.prototype.number = function (char) {\n  if (digets.test(char)) {\n    this.word += char;\n    return;\n  }\n\n  if (endThings.test(char)) {\n    this.word = parseFloat(this.word);\n    this.afterItem(char);\n    return;\n  }\n\n  throw new Error('havn\\'t handled \"' + char + '\" in number yet, index ' + this.place);\n};\n\nParser.prototype.quoted = function (char) {\n  if (char === '\"') {\n    this.state = AFTERQUOTE;\n    return;\n  }\n\n  this.word += char;\n  return;\n};\n\nParser.prototype.keyword = function (char) {\n  if (keyword.test(char)) {\n    this.word += char;\n    return;\n  }\n\n  if (char === '[') {\n    var newObjects = [];\n    newObjects.push(this.word);\n    this.level++;\n\n    if (this.root === null) {\n      this.root = newObjects;\n    } else {\n      this.currentObject.push(newObjects);\n    }\n\n    this.stack.push(this.currentObject);\n    this.currentObject = newObjects;\n    this.state = NEUTRAL;\n    return;\n  }\n\n  if (endThings.test(char)) {\n    this.afterItem(char);\n    return;\n  }\n\n  throw new Error('havn\\'t handled \"' + char + '\" in keyword yet, index ' + this.place);\n};\n\nParser.prototype.neutral = function (char) {\n  if (latin.test(char)) {\n    this.word = char;\n    this.state = KEYWORD;\n    return;\n  }\n\n  if (char === '\"') {\n    this.word = '';\n    this.state = QUOTED;\n    return;\n  }\n\n  if (digets.test(char)) {\n    this.word = char;\n    this.state = NUMBER;\n    return;\n  }\n\n  if (endThings.test(char)) {\n    this.afterItem(char);\n    return;\n  }\n\n  throw new Error('havn\\'t handled \"' + char + '\" in neutral yet, index ' + this.place);\n};\n\nParser.prototype.output = function () {\n  while (this.place < this.text.length) {\n    this.readCharicter();\n  }\n\n  if (this.state === ENDED) {\n    return this.root;\n  }\n\n  throw new Error('unable to parse string \"' + this.text + '\". State is ' + this.state);\n};\n\nfunction parseString(txt) {\n  var parser = new Parser(txt);\n  return parser.output();\n}","map":{"version":3,"sources":["C:/Users/brand/source/repos/das-server/client/node_modules/wkt-parser/parser.js"],"names":["parseString","NEUTRAL","KEYWORD","NUMBER","QUOTED","AFTERQUOTE","ENDED","whitespace","latin","keyword","endThings","digets","Parser","text","Error","trim","level","place","root","stack","currentObject","state","prototype","readCharicter","char","test","length","neutral","quoted","afterquote","number","word","afterItem","push","pop","parseFloat","newObjects","output","txt","parser"],"mappings":"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","sourcesContent":["export default parseString;\n\nvar NEUTRAL = 1;\nvar KEYWORD = 2;\nvar NUMBER = 3;\nvar QUOTED = 4;\nvar AFTERQUOTE = 5;\nvar ENDED = -1;\nvar whitespace = /\\s/;\nvar latin = /[A-Za-z]/;\nvar keyword = /[A-Za-z84]/;\nvar endThings = /[,\\]]/;\nvar digets = /[\\d\\.E\\-\\+]/;\n// const ignoredChar = /[\\s_\\-\\/\\(\\)]/g;\nfunction Parser(text) {\n  if (typeof text !== 'string') {\n    throw new Error('not a string');\n  }\n  this.text = text.trim();\n  this.level = 0;\n  this.place = 0;\n  this.root = null;\n  this.stack = [];\n  this.currentObject = null;\n  this.state = NEUTRAL;\n}\nParser.prototype.readCharicter = function() {\n  var char = this.text[this.place++];\n  if (this.state !== QUOTED) {\n    while (whitespace.test(char)) {\n      if (this.place >= this.text.length) {\n        return;\n      }\n      char = this.text[this.place++];\n    }\n  }\n  switch (this.state) {\n    case NEUTRAL:\n      return this.neutral(char);\n    case KEYWORD:\n      return this.keyword(char)\n    case QUOTED:\n      return this.quoted(char);\n    case AFTERQUOTE:\n      return this.afterquote(char);\n    case NUMBER:\n      return this.number(char);\n    case ENDED:\n      return;\n  }\n};\nParser.prototype.afterquote = function(char) {\n  if (char === '\"') {\n    this.word += '\"';\n    this.state = QUOTED;\n    return;\n  }\n  if (endThings.test(char)) {\n    this.word = this.word.trim();\n    this.afterItem(char);\n    return;\n  }\n  throw new Error('havn\\'t handled \"' +char + '\" in afterquote yet, index ' + this.place);\n};\nParser.prototype.afterItem = function(char) {\n  if (char === ',') {\n    if (this.word !== null) {\n      this.currentObject.push(this.word);\n    }\n    this.word = null;\n    this.state = NEUTRAL;\n    return;\n  }\n  if (char === ']') {\n    this.level--;\n    if (this.word !== null) {\n      this.currentObject.push(this.word);\n      this.word = null;\n    }\n    this.state = NEUTRAL;\n    this.currentObject = this.stack.pop();\n    if (!this.currentObject) {\n      this.state = ENDED;\n    }\n\n    return;\n  }\n};\nParser.prototype.number = function(char) {\n  if (digets.test(char)) {\n    this.word += char;\n    return;\n  }\n  if (endThings.test(char)) {\n    this.word = parseFloat(this.word);\n    this.afterItem(char);\n    return;\n  }\n  throw new Error('havn\\'t handled \"' +char + '\" in number yet, index ' + this.place);\n};\nParser.prototype.quoted = function(char) {\n  if (char === '\"') {\n    this.state = AFTERQUOTE;\n    return;\n  }\n  this.word += char;\n  return;\n};\nParser.prototype.keyword = function(char) {\n  if (keyword.test(char)) {\n    this.word += char;\n    return;\n  }\n  if (char === '[') {\n    var newObjects = [];\n    newObjects.push(this.word);\n    this.level++;\n    if (this.root === null) {\n      this.root = newObjects;\n    } else {\n      this.currentObject.push(newObjects);\n    }\n    this.stack.push(this.currentObject);\n    this.currentObject = newObjects;\n    this.state = NEUTRAL;\n    return;\n  }\n  if (endThings.test(char)) {\n    this.afterItem(char);\n    return;\n  }\n  throw new Error('havn\\'t handled \"' +char + '\" in keyword yet, index ' + this.place);\n};\nParser.prototype.neutral = function(char) {\n  if (latin.test(char)) {\n    this.word = char;\n    this.state = KEYWORD;\n    return;\n  }\n  if (char === '\"') {\n    this.word = '';\n    this.state = QUOTED;\n    return;\n  }\n  if (digets.test(char)) {\n    this.word = char;\n    this.state = NUMBER;\n    return;\n  }\n  if (endThings.test(char)) {\n    this.afterItem(char);\n    return;\n  }\n  throw new Error('havn\\'t handled \"' +char + '\" in neutral yet, index ' + this.place);\n};\nParser.prototype.output = function() {\n  while (this.place < this.text.length) {\n    this.readCharicter();\n  }\n  if (this.state === ENDED) {\n    return this.root;\n  }\n  throw new Error('unable to parse string \"' +this.text + '\". State is ' + this.state);\n};\n\nfunction parseString(txt) {\n  var parser = new Parser(txt);\n  return parser.output();\n}\n"]},"metadata":{},"sourceType":"module"}