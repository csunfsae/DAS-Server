{"ast":null,"code":"import pj_mlfn from \"./pj_mlfn\";\nimport { EPSLN } from '../constants/values';\nvar MAX_ITER = 20;\nexport default function (arg, es, en) {\n  var k = 1 / (1 - es);\n  var phi = arg;\n\n  for (var i = MAX_ITER; i; --i) {\n    /* rarely goes over 2 iterations */\n    var s = Math.sin(phi);\n    var t = 1 - es * s * s; //t = this.pj_mlfn(phi, s, Math.cos(phi), en) - arg;\n    //phi -= t * (t * Math.sqrt(t)) * k;\n\n    t = (pj_mlfn(phi, s, Math.cos(phi), en) - arg) * (t * Math.sqrt(t)) * k;\n    phi -= t;\n\n    if (Math.abs(t) < EPSLN) {\n      return phi;\n    }\n  } //..reportError(\"cass:pj_inv_mlfn: Convergence error\");\n\n\n  return phi;\n}","map":{"version":3,"sources":["C:/Users/brand/source/repos/das-server/client/node_modules/proj4/lib/common/pj_inv_mlfn.js"],"names":["pj_mlfn","EPSLN","MAX_ITER","arg","es","en","k","phi","i","s","Math","sin","t","cos","sqrt","abs"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,WAApB;AACA,SAAQC,KAAR,QAAoB,qBAApB;AAEA,IAAIC,QAAQ,GAAG,EAAf;AAEA,eAAe,UAASC,GAAT,EAAcC,EAAd,EAAkBC,EAAlB,EAAsB;AACnC,MAAIC,CAAC,GAAG,KAAK,IAAIF,EAAT,CAAR;AACA,MAAIG,GAAG,GAAGJ,GAAV;;AACA,OAAK,IAAIK,CAAC,GAAGN,QAAb,EAAuBM,CAAvB,EAA0B,EAAEA,CAA5B,EAA+B;AAAE;AAC/B,QAAIC,CAAC,GAAGC,IAAI,CAACC,GAAL,CAASJ,GAAT,CAAR;AACA,QAAIK,CAAC,GAAG,IAAIR,EAAE,GAAGK,CAAL,GAASA,CAArB,CAF6B,CAG7B;AACA;;AACAG,IAAAA,CAAC,GAAG,CAACZ,OAAO,CAACO,GAAD,EAAME,CAAN,EAASC,IAAI,CAACG,GAAL,CAASN,GAAT,CAAT,EAAwBF,EAAxB,CAAP,GAAqCF,GAAtC,KAA8CS,CAAC,GAAGF,IAAI,CAACI,IAAL,CAAUF,CAAV,CAAlD,IAAkEN,CAAtE;AACAC,IAAAA,GAAG,IAAIK,CAAP;;AACA,QAAIF,IAAI,CAACK,GAAL,CAASH,CAAT,IAAcX,KAAlB,EAAyB;AACvB,aAAOM,GAAP;AACD;AACF,GAbkC,CAcnC;;;AACA,SAAOA,GAAP;AACD","sourcesContent":["import pj_mlfn from \"./pj_mlfn\";\nimport {EPSLN} from '../constants/values';\n\nvar MAX_ITER = 20;\n\nexport default function(arg, es, en) {\n  var k = 1 / (1 - es);\n  var phi = arg;\n  for (var i = MAX_ITER; i; --i) { /* rarely goes over 2 iterations */\n    var s = Math.sin(phi);\n    var t = 1 - es * s * s;\n    //t = this.pj_mlfn(phi, s, Math.cos(phi), en) - arg;\n    //phi -= t * (t * Math.sqrt(t)) * k;\n    t = (pj_mlfn(phi, s, Math.cos(phi), en) - arg) * (t * Math.sqrt(t)) * k;\n    phi -= t;\n    if (Math.abs(t) < EPSLN) {\n      return phi;\n    }\n  }\n  //..reportError(\"cass:pj_inv_mlfn: Convergence error\");\n  return phi;\n}\n"]},"metadata":{},"sourceType":"module"}