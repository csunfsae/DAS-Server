{"ast":null,"code":"import React from'react';import{useSelector}from'react-redux';import{jsxs as _jsxs}from\"react/jsx-runtime\";import{jsx as _jsx}from\"react/jsx-runtime\";function LapTimes(){var selectedDriveDate=useSelector(function(state){return state.historyModal.selectedDriveDate;});var sessionNumber=useSelector(function(state){return state.historyModal.selectedSessionNumber;});var lapNumber=useSelector(function(state){return state.historyModal.selectedLapNumber;});var selectedDriveDateIndex=useSelector(function(state){return state.historyModal.selectedDriveDateIndex;});var allDriveDays=useSelector(function(state){return state.historyModal.driveDays;});var lastSearchedDriveDays=allDriveDays[allDriveDays.length-1];var bestLap=[];var laps=[];if(selectedDriveDate!==\"\"&&sessionNumber!==-1&&lapNumber!==-1){laps=lastSearchedDriveDays[selectedDriveDateIndex][\"sessions\"][sessionNumber-1][\"laps\"];bestLap=getBestLapTime(laps);}function getBestLapTime(laps){var bestLapTime=laps[0];for(var i=0;i<laps.length;i++){if(bestLapTime.lap_time>laps[i].lap_time){bestLapTime=laps[i];}}return bestLapTime;}function renderLapTimes(){return laps.map(function(lap,index){return/*#__PURE__*/_jsxs(\"p\",{children:[\" L\",index+1,\": \",lap.lap_time]});});}function isRendered(){if(selectedDriveDate!==\"\"&&sessionNumber!==-1&&lapNumber!==-1){return true;}else{return false;}}return/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"h2\",{children:\"Lap Times\"}),/*#__PURE__*/_jsxs(\"h3\",{children:[\"Best Lap: \",isRendered()?\"\".concat(bestLap.lap_time,\" (L\").concat(bestLap.lap_number,\")\"):\"\",\" \"]}),isRendered()?renderLapTimes():\"\"]});}export default LapTimes;","map":{"version":3,"sources":["C:/Users/brand/source/repos/DAS-Server/client/src/components/historyPage/sessionView/LapTimes/LapTimes.js"],"names":["React","useSelector","LapTimes","selectedDriveDate","state","historyModal","sessionNumber","selectedSessionNumber","lapNumber","selectedLapNumber","selectedDriveDateIndex","allDriveDays","driveDays","lastSearchedDriveDays","length","bestLap","laps","getBestLapTime","bestLapTime","i","lap_time","renderLapTimes","map","lap","index","isRendered","lap_number"],"mappings":"AAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,OAAQC,WAAR,KAA0B,aAA1B,C,wFAEA,QAASC,CAAAA,QAAT,EAAoB,CAChB,GAAMC,CAAAA,iBAAiB,CAAGF,WAAW,CAAE,SAACG,KAAD,QAAWA,CAAAA,KAAK,CAACC,YAAN,CAAmBF,iBAA9B,EAAF,CAArC,CACA,GAAMG,CAAAA,aAAa,CAAGL,WAAW,CAAE,SAACG,KAAD,QAAWA,CAAAA,KAAK,CAACC,YAAN,CAAmBE,qBAA9B,EAAF,CAAjC,CACA,GAAMC,CAAAA,SAAS,CAAGP,WAAW,CAAE,SAACG,KAAD,QAAWA,CAAAA,KAAK,CAACC,YAAN,CAAmBI,iBAA9B,EAAF,CAA7B,CAEA,GAAMC,CAAAA,sBAAsB,CAAGT,WAAW,CAAE,SAACG,KAAD,QAAWA,CAAAA,KAAK,CAACC,YAAN,CAAmBK,sBAA9B,EAAF,CAA1C,CACA,GAAMC,CAAAA,YAAY,CAAGV,WAAW,CAAE,SAACG,KAAD,QAAWA,CAAAA,KAAK,CAACC,YAAN,CAAmBO,SAA9B,EAAF,CAAhC,CACA,GAAMC,CAAAA,qBAAqB,CAAGF,YAAY,CAACA,YAAY,CAACG,MAAb,CAAqB,CAAtB,CAA1C,CAEA,GAAIC,CAAAA,OAAO,CAAG,EAAd,CACA,GAAIC,CAAAA,IAAI,CAAG,EAAX,CAEA,GAAIb,iBAAiB,GAAK,EAAtB,EAA4BG,aAAa,GAAK,CAAC,CAA/C,EAAoDE,SAAS,GAAK,CAAC,CAAvE,CAA0E,CACtEQ,IAAI,CAAGH,qBAAqB,CAACH,sBAAD,CAArB,CAA8C,UAA9C,EAA0DJ,aAAa,CAAG,CAA1E,EAA6E,MAA7E,CAAP,CACAS,OAAO,CAAGE,cAAc,CAACD,IAAD,CAAxB,CACH,CAED,QAASC,CAAAA,cAAT,CAAwBD,IAAxB,CAA8B,CAC1B,GAAIE,CAAAA,WAAW,CAAGF,IAAI,CAAC,CAAD,CAAtB,CACA,IAAK,GAAIG,CAAAA,CAAC,CAAG,CAAb,CAAgBA,CAAC,CAAGH,IAAI,CAACF,MAAzB,CAAiCK,CAAC,EAAlC,CAAsC,CAClC,GAAID,WAAW,CAACE,QAAZ,CAAuBJ,IAAI,CAACG,CAAD,CAAJ,CAAQC,QAAnC,CAA6C,CACzCF,WAAW,CAAGF,IAAI,CAACG,CAAD,CAAlB,CACH,CACJ,CACD,MAAOD,CAAAA,WAAP,CACH,CAED,QAASG,CAAAA,cAAT,EAA0B,CACtB,MACIL,CAAAA,IAAI,CAACM,GAAL,CAAU,SAACC,GAAD,CAAMC,KAAN,qBACN,0BAAMA,KAAK,CAAG,CAAd,MAAmBD,GAAG,CAACH,QAAvB,GADM,EAAV,CADJ,CAKH,CAED,QAASK,CAAAA,UAAT,EAAsB,CAClB,GAAItB,iBAAiB,GAAK,EAAtB,EAA4BG,aAAa,GAAK,CAAC,CAA/C,EAAoDE,SAAS,GAAK,CAAC,CAAvE,CAA0E,CACtE,MAAO,KAAP,CACH,CAFD,IAEO,CACH,MAAO,MAAP,CACH,CAEJ,CAED,mBAEI,oCACI,iCADJ,cAEI,mCAAeiB,UAAU,aAAQV,OAAO,CAACK,QAAhB,eAA8BL,OAAO,CAACW,UAAtC,MAAsD,EAA/E,OAFJ,CAGSD,UAAU,GAAKJ,cAAc,EAAnB,CAAwB,EAH3C,GAFJ,CAQH,CAED,cAAenB,CAAAA,QAAf","sourcesContent":["import React from 'react'\r\nimport {useSelector} from 'react-redux';\r\n\r\nfunction LapTimes() {\r\n    const selectedDriveDate = useSelector( (state) => state.historyModal.selectedDriveDate);\r\n    const sessionNumber = useSelector( (state) => state.historyModal.selectedSessionNumber);\r\n    const lapNumber = useSelector( (state) => state.historyModal.selectedLapNumber);\r\n\r\n    const selectedDriveDateIndex = useSelector( (state) => state.historyModal.selectedDriveDateIndex);\r\n    const allDriveDays = useSelector( (state) => state.historyModal.driveDays);\r\n    const lastSearchedDriveDays = allDriveDays[allDriveDays.length -1];\r\n\r\n    let bestLap = [];\r\n    let laps = [];\r\n\r\n    if( selectedDriveDate !== \"\" && sessionNumber !== -1 && lapNumber !== -1) {\r\n        laps = lastSearchedDriveDays[selectedDriveDateIndex][\"sessions\"][sessionNumber - 1][\"laps\"];\r\n        bestLap = getBestLapTime(laps);\r\n    }\r\n\r\n    function getBestLapTime(laps) {\r\n        let bestLapTime = laps[0];\r\n        for (let i = 0; i < laps.length; i++) {\r\n            if (bestLapTime.lap_time > laps[i].lap_time) {\r\n                bestLapTime = laps[i];\r\n            }\r\n        }\r\n        return bestLapTime;\r\n    }\r\n\r\n    function renderLapTimes() {\r\n        return (\r\n            laps.map( (lap, index) =>\r\n                <p> L{index + 1}: {lap.lap_time}</p>\r\n            )\r\n        )\r\n    }\r\n\r\n    function isRendered() {\r\n        if (selectedDriveDate !== \"\" && sessionNumber !== -1 && lapNumber !== -1) {\r\n            return true; \r\n        } else {\r\n            return false;\r\n        }\r\n        \r\n    }\r\n\r\n    return (\r\n\r\n        <div>\r\n            <h2>Lap Times</h2>\r\n            <h3>Best Lap: {isRendered() ? `${bestLap.lap_time} (L${bestLap.lap_number})` : \"\"} </h3>\r\n                {isRendered() ? renderLapTimes() : \"\"}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default LapTimes\r\n"]},"metadata":{},"sourceType":"module"}