{"ast":null,"code":"import _regeneratorRuntime from\"C:/Users/brand/source/repos/DAS-Server/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"C:/Users/brand/source/repos/DAS-Server/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import React from'react';import{useForm}from'react-hook-form';import{useSelector,useDispatch}from'react-redux';import{updateSelectedSessionNumber,updateModalStepForward,updateModalStepBackwards}from'../../../actions/historyPage/modalActions';import{jsxs as _jsxs}from\"react/jsx-runtime\";import{jsx as _jsx}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";function SessionSelectionForm(props){var _useForm=useForm(),handleSubmit=_useForm.handleSubmit,register=_useForm.register;var allDriveDays=useSelector(function(state){return state.historyModal.driveDays;});var selectedDriveDateIndex=useSelector(function(state){return state.historyModal.selectedDriveDateIndex;});var displayedSessions=useSelector(function(state){return state.historyModal.displayedSessions;});var selectedDriveDate=allDriveDays[selectedDriveDateIndex].date;var getAvailableSessions=function getAvailableSessions(){if(!(selectedDriveDate in displayedSessions)){return allDriveDays[selectedDriveDateIndex][\"sessions\"];}var sessions=allDriveDays[selectedDriveDateIndex][\"sessions\"].filter(function(session){return!displayedSessions[selectedDriveDate][\"sessions\"].some(function(displayedSession){return displayedSession.number===session.number;});});return sessions;};var availableSessions=getAvailableSessions();var dispatch=useDispatch();var onSubmit=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(data){return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:dispatch(updateSelectedSessionNumber(data.driveDateSession));dispatch(updateModalStepForward());case 2:case\"end\":return _context.stop();}}},_callee);}));return function onSubmit(_x){return _ref.apply(this,arguments);};}();var renderSessionSelection=function renderSessionSelection(){if(availableSessions.length<=0){return/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsxs(\"p\",{children:[\"There are no other sessions on \",new Date(selectedDriveDate+\" \").toDateString(\"en-us\"),\" \"]}),/*#__PURE__*/_jsx(\"button\",{type:\"button\",onClick:function onClick(){dispatch(updateModalStepBackwards());},children:\"Back\"})]});}return/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(\"div\",{className:\"form-group\",children:/*#__PURE__*/_jsx(\"select\",{defaultValue:props.sessionData,className:\"form-control\",name:\"driveDateSession\",ref:register,children:availableSessions.map(function(session,index){return/*#__PURE__*/_jsx(\"option\",{value:session.number,children:session.number},index+1);})})}),/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"button\",{type:\"button\",onClick:function onClick(){dispatch(updateModalStepBackwards());},children:\"Back\"}),/*#__PURE__*/_jsx(\"button\",{className:\"btn btn-primary\",type:\"submit\",children:\"Next\"})]})]});};return/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"h2\",{children:\"Select Session:\"}),/*#__PURE__*/_jsx(\"form\",{onSubmit:handleSubmit(onSubmit),children:renderSessionSelection()})]});}export default SessionSelectionForm;","map":{"version":3,"sources":["C:/Users/brand/source/repos/das-server/client/src/components/historyPage/forms/SessionSelectionForm.js"],"names":["React","useForm","useSelector","useDispatch","updateSelectedSessionNumber","updateModalStepForward","updateModalStepBackwards","SessionSelectionForm","props","handleSubmit","register","allDriveDays","state","historyModal","driveDays","selectedDriveDateIndex","displayedSessions","selectedDriveDate","date","getAvailableSessions","sessions","filter","session","some","displayedSession","number","availableSessions","dispatch","onSubmit","data","driveDateSession","renderSessionSelection","length","Date","toDateString","sessionData","map","index"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport {useForm} from 'react-hook-form';\r\nimport {useSelector, useDispatch} from 'react-redux';\r\nimport {updateSelectedSessionNumber, updateModalStepForward, updateModalStepBackwards} from '../../../actions/historyPage/modalActions';\r\n\r\nfunction SessionSelectionForm(props) {\r\n\r\n    const {handleSubmit, register} = useForm();\r\n    \r\n    const allDriveDays = useSelector( (state) => state.historyModal.driveDays);\r\n\r\n    const selectedDriveDateIndex = useSelector( (state) => state.historyModal.selectedDriveDateIndex);\r\n\r\n    const displayedSessions = useSelector( (state) => state.historyModal.displayedSessions);\r\n\r\n    const selectedDriveDate = allDriveDays[selectedDriveDateIndex].date;\r\n    \r\n    const getAvailableSessions = () => {\r\n\r\n        if( !(selectedDriveDate in displayedSessions) ) {\r\n            return allDriveDays[selectedDriveDateIndex][\"sessions\"];\r\n        }\r\n\r\n        const sessions = allDriveDays[selectedDriveDateIndex][\"sessions\"].filter( (session) => {\r\n            return !displayedSessions[selectedDriveDate][\"sessions\"].some( (displayedSession) => {\r\n                return displayedSession.number === session.number\r\n            }); \r\n        });\r\n\r\n        return sessions;\r\n    }\r\n    \r\n    const availableSessions = getAvailableSessions();\r\n\r\n    const dispatch = useDispatch();\r\n    \r\n    const onSubmit = async (data) => {\r\n        dispatch(updateSelectedSessionNumber(data.driveDateSession)) \r\n        dispatch ( updateModalStepForward() )       \r\n    }\r\n    \r\n    const renderSessionSelection = () => {\r\n        if (availableSessions.length <= 0) {\r\n            return (\r\n                <>\r\n                    <p>There are no other sessions on {new Date(selectedDriveDate + \" \").toDateString(\"en-us\")} </p>\r\n                    <button type=\"button\" onClick={() => {dispatch(updateModalStepBackwards() )}}>Back</button>\r\n                </>\r\n            )\r\n        }\r\n\r\n        return (\r\n            <>\r\n                <div className=\"form-group\">\r\n                    <select defaultValue={props.sessionData} className=\"form-control\" name=\"driveDateSession\" ref={register}>\r\n                        {availableSessions.map( (session, index) =>\r\n                            <option key={index + 1} value={session.number}>{session.number}</option>\r\n                        )}\r\n                    </select>\r\n                </div>\r\n                <div>\r\n                    <button type=\"button\" onClick={() => {dispatch(updateModalStepBackwards() )}}>Back</button>\r\n                    <button className=\"btn btn-primary\" type=\"submit\">Next</button>\r\n                </div>\r\n            </>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h2>Select Session:</h2>\r\n            <form onSubmit={handleSubmit(onSubmit)}>\r\n                { renderSessionSelection() }\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\n\r\nexport default SessionSelectionForm;\r\n"]},"metadata":{},"sourceType":"module"}