{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\brand\\\\source\\\\repos\\\\das-server\\\\client\\\\src\\\\components\\\\livePage\\\\TrackPath\\\\TrackPath.js\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, useLayoutEffect, memo } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { select, line, curveCardinalClosed } from 'd3';\nimport { updateGPSMapSvgDimensions } from '../../../actions/livePage/gpsActions';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction TrackPath() {\n  _s();\n\n  const trackPath = useRef(null);\n  const dispatch = useDispatch();\n  const GPSTrackCoordinates = useSelector(state => state.gps.gpsTrackCoordinates);\n  const firstLap = useSelector(state => state.gps.firstLap);\n  const trackLine = line().x(p => p.x).y(p => p.y).curve(curveCardinalClosed);\n  useLayoutEffect(() => {\n    if (trackPath.current) {\n      const path = select(trackPath.current);\n      path.data([GPSTrackCoordinates]).join(\"path\").attr(\"d\", value => trackLine(value)).attr(\"fill\", \"none\").attr(\"stroke\", \"black\").attr(\"stroke-width\", \"2px\");\n\n      const {\n        x,\n        y,\n        width,\n        height\n      } = path._groups[0][0].getBBox();\n\n      const pathDimensions = {\n        x: x,\n        y: y,\n        width: width,\n        height: height\n      };\n\n      if (pathDimensions.x !== 0) {\n        dispatch(updateGPSMapSvgDimensions(pathDimensions));\n      }\n    }\n  }, [trackPath, firstLap]);\n  return /*#__PURE__*/_jsxDEV(\"path\", {\n    ref: trackPath\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 9\n  }, this);\n}\n\n_s(TrackPath, \"VVzhmK6ZcsaGsLfb3Ze19MOH3Gg=\", false, function () {\n  return [useDispatch, useSelector, useSelector];\n});\n\n_c = TrackPath;\nexport default _c2 = /*#__PURE__*/memo(TrackPath);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"TrackPath\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"sources":["C:/Users/brand/source/repos/das-server/client/src/components/livePage/TrackPath/TrackPath.js"],"names":["React","useRef","useLayoutEffect","memo","useSelector","useDispatch","select","line","curveCardinalClosed","updateGPSMapSvgDimensions","TrackPath","trackPath","dispatch","GPSTrackCoordinates","state","gps","gpsTrackCoordinates","firstLap","trackLine","x","p","y","curve","current","path","data","join","attr","value","width","height","_groups","getBBox","pathDimensions"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,MAAf,EAAuBC,eAAvB,EAAwCC,IAAxC,QAAmD,OAAnD;AACA,SAAQC,WAAR,EAAqBC,WAArB,QAAuC,aAAvC;AACA,SAAQC,MAAR,EAAgBC,IAAhB,EAAsBC,mBAAtB,QAAgD,IAAhD;AACA,SAAQC,yBAAR,QAAwC,sCAAxC;;;AAEA,SAASC,SAAT,GAAqB;AAAA;;AAEjB,QAAMC,SAAS,GAAGV,MAAM,CAAC,IAAD,CAAxB;AACA,QAAMW,QAAQ,GAAGP,WAAW,EAA5B;AAEA,QAAMQ,mBAAmB,GAAGT,WAAW,CAAGU,KAAD,IAAWA,KAAK,CAACC,GAAN,CAAUC,mBAAvB,CAAvC;AACA,QAAMC,QAAQ,GAAGb,WAAW,CAAGU,KAAD,IAAWA,KAAK,CAACC,GAAN,CAAUE,QAAvB,CAA5B;AACA,QAAMC,SAAS,GAAGX,IAAI,GAAGY,CAAP,CAAWC,CAAD,IAAOA,CAAC,CAACD,CAAnB,EAAsBE,CAAtB,CAA0BD,CAAD,IAAOA,CAAC,CAACC,CAAlC,EAAqCC,KAArC,CAA2Cd,mBAA3C,CAAlB;AAEAN,EAAAA,eAAe,CAAE,MAAM;AAEnB,QAAIS,SAAS,CAACY,OAAd,EAAuB;AACnB,YAAMC,IAAI,GAAGlB,MAAM,CAACK,SAAS,CAACY,OAAX,CAAnB;AACAC,MAAAA,IAAI,CAACC,IAAL,CAAU,CAACZ,mBAAD,CAAV,EAAiCa,IAAjC,CAAsC,MAAtC,EAA8CC,IAA9C,CAAmD,GAAnD,EAAwDC,KAAK,IAAIV,SAAS,CAACU,KAAD,CAA1E,EAAmFD,IAAnF,CAAwF,MAAxF,EAAgG,MAAhG,EAAwGA,IAAxG,CAA6G,QAA7G,EAAuH,OAAvH,EAAgIA,IAAhI,CAAqI,cAArI,EAAqJ,KAArJ;;AACA,YAAM;AAACR,QAAAA,CAAD;AAAGE,QAAAA,CAAH;AAAKQ,QAAAA,KAAL;AAAWC,QAAAA;AAAX,UAAqBN,IAAI,CAACO,OAAL,CAAa,CAAb,EAAgB,CAAhB,EAAmBC,OAAnB,EAA3B;;AACA,YAAMC,cAAc,GAAG;AAACd,QAAAA,CAAC,EAAEA,CAAJ;AAAOE,QAAAA,CAAC,EAAEA,CAAV;AAAaQ,QAAAA,KAAK,EAAEA,KAApB;AAA2BC,QAAAA,MAAM,EAAEA;AAAnC,OAAvB;;AAEA,UAAIG,cAAc,CAACd,CAAf,KAAqB,CAAzB,EAA6B;AACzBP,QAAAA,QAAQ,CAACH,yBAAyB,CAACwB,cAAD,CAA1B,CAAR;AACH;AACJ;AACJ,GAZc,EAYZ,CAACtB,SAAD,EAAYM,QAAZ,CAZY,CAAf;AAeA,sBACI;AAAM,IAAA,GAAG,EAAEN;AAAX;AAAA;AAAA;AAAA;AAAA,UADJ;AAGH;;GA3BQD,S;UAGYL,W,EAEWD,W,EACXA,W;;;KANZM,S;AA6BT,kCAAeP,IAAI,CAACO,SAAD,CAAnB","sourcesContent":["import React, {useRef, useLayoutEffect, memo} from 'react';\r\nimport {useSelector, useDispatch} from 'react-redux';\r\nimport {select, line, curveCardinalClosed} from 'd3';\r\nimport {updateGPSMapSvgDimensions} from '../../../actions/livePage/gpsActions'\r\n\r\nfunction TrackPath() {\r\n\r\n    const trackPath = useRef(null);\r\n    const dispatch = useDispatch();\r\n\r\n    const GPSTrackCoordinates = useSelector( (state) => state.gps.gpsTrackCoordinates);\r\n    const firstLap = useSelector( (state) => state.gps.firstLap);\r\n    const trackLine = line().x( (p) => p.x).y( (p) => p.y).curve(curveCardinalClosed);\r\n\r\n    useLayoutEffect( () => {\r\n\r\n        if (trackPath.current) {\r\n            const path = select(trackPath.current);\r\n            path.data([GPSTrackCoordinates]).join(\"path\").attr(\"d\", value => trackLine(value)).attr(\"fill\", \"none\").attr(\"stroke\", \"black\").attr(\"stroke-width\", \"2px\");\r\n            const {x,y,width,height} = path._groups[0][0].getBBox();\r\n            const pathDimensions = {x: x, y: y, width: width, height: height};\r\n            \r\n            if (pathDimensions.x !== 0 ) {\r\n                dispatch(updateGPSMapSvgDimensions(pathDimensions))\r\n            }\r\n        }\r\n    }, [trackPath, firstLap])\r\n  \r\n\r\n    return (\r\n        <path ref={trackPath}></path>\r\n    ) \r\n}\r\n\r\nexport default memo(TrackPath);"]},"metadata":{},"sourceType":"module"}