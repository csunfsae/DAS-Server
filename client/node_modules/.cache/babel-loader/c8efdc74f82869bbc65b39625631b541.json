{"ast":null,"code":"import defs from './defs';\nimport wkt from 'wkt-parser';\nimport projStr from './projString';\nimport match from './match';\n\nfunction testObj(code) {\n  return typeof code === 'string';\n}\n\nfunction testDef(code) {\n  return code in defs;\n}\n\nvar codeWords = ['PROJECTEDCRS', 'PROJCRS', 'GEOGCS', 'GEOCCS', 'PROJCS', 'LOCAL_CS', 'GEODCRS', 'GEODETICCRS', 'GEODETICDATUM', 'ENGCRS', 'ENGINEERINGCRS'];\n\nfunction testWKT(code) {\n  return codeWords.some(function (word) {\n    return code.indexOf(word) > -1;\n  });\n}\n\nvar codes = ['3857', '900913', '3785', '102113'];\n\nfunction checkMercator(item) {\n  var auth = match(item, 'authority');\n\n  if (!auth) {\n    return;\n  }\n\n  var code = match(auth, 'epsg');\n  return code && codes.indexOf(code) > -1;\n}\n\nfunction checkProjStr(item) {\n  var ext = match(item, 'extension');\n\n  if (!ext) {\n    return;\n  }\n\n  return match(ext, 'proj4');\n}\n\nfunction testProj(code) {\n  return code[0] === '+';\n}\n\nfunction parse(code) {\n  if (testObj(code)) {\n    //check to see if this is a WKT string\n    if (testDef(code)) {\n      return defs[code];\n    }\n\n    if (testWKT(code)) {\n      var out = wkt(code); // test of spetial case, due to this being a very common and often malformed\n\n      if (checkMercator(out)) {\n        return defs['EPSG:3857'];\n      }\n\n      var maybeProjStr = checkProjStr(out);\n\n      if (maybeProjStr) {\n        return projStr(maybeProjStr);\n      }\n\n      return out;\n    }\n\n    if (testProj(code)) {\n      return projStr(code);\n    }\n  } else {\n    return code;\n  }\n}\n\nexport default parse;","map":{"version":3,"sources":["C:/Users/brand/source/repos/das-server/client/node_modules/proj4/lib/parseCode.js"],"names":["defs","wkt","projStr","match","testObj","code","testDef","codeWords","testWKT","some","word","indexOf","codes","checkMercator","item","auth","checkProjStr","ext","testProj","parse","out","maybeProjStr"],"mappings":"AAAA,OAAOA,IAAP,MAAiB,QAAjB;AACA,OAAOC,GAAP,MAAgB,YAAhB;AACA,OAAOC,OAAP,MAAoB,cAApB;AACA,OAAOC,KAAP,MAAkB,SAAlB;;AACA,SAASC,OAAT,CAAiBC,IAAjB,EAAsB;AACpB,SAAO,OAAOA,IAAP,KAAgB,QAAvB;AACD;;AACD,SAASC,OAAT,CAAiBD,IAAjB,EAAsB;AACpB,SAAOA,IAAI,IAAIL,IAAf;AACD;;AACD,IAAIO,SAAS,GAAG,CAAC,cAAD,EAAiB,SAAjB,EAA4B,QAA5B,EAAqC,QAArC,EAA8C,QAA9C,EAAuD,UAAvD,EAAmE,SAAnE,EAA8E,aAA9E,EAA6F,eAA7F,EAA8G,QAA9G,EAAwH,gBAAxH,CAAhB;;AACA,SAASC,OAAT,CAAiBH,IAAjB,EAAsB;AACpB,SAAOE,SAAS,CAACE,IAAV,CAAe,UAAUC,IAAV,EAAgB;AACpC,WAAOL,IAAI,CAACM,OAAL,CAAaD,IAAb,IAAqB,CAAC,CAA7B;AACD,GAFM,CAAP;AAGD;;AACD,IAAIE,KAAK,GAAG,CAAC,MAAD,EAAS,QAAT,EAAmB,MAAnB,EAA2B,QAA3B,CAAZ;;AACA,SAASC,aAAT,CAAuBC,IAAvB,EAA6B;AAC3B,MAAIC,IAAI,GAAGZ,KAAK,CAACW,IAAD,EAAO,WAAP,CAAhB;;AACA,MAAI,CAACC,IAAL,EAAW;AACT;AACD;;AACD,MAAIV,IAAI,GAAGF,KAAK,CAACY,IAAD,EAAO,MAAP,CAAhB;AACA,SAAOV,IAAI,IAAIO,KAAK,CAACD,OAAN,CAAcN,IAAd,IAAsB,CAAC,CAAtC;AACD;;AACD,SAASW,YAAT,CAAsBF,IAAtB,EAA4B;AAC1B,MAAIG,GAAG,GAAGd,KAAK,CAACW,IAAD,EAAO,WAAP,CAAf;;AACA,MAAI,CAACG,GAAL,EAAU;AACR;AACD;;AACD,SAAOd,KAAK,CAACc,GAAD,EAAM,OAAN,CAAZ;AACD;;AACD,SAASC,QAAT,CAAkBb,IAAlB,EAAuB;AACrB,SAAOA,IAAI,CAAC,CAAD,CAAJ,KAAY,GAAnB;AACD;;AACD,SAASc,KAAT,CAAed,IAAf,EAAoB;AAClB,MAAID,OAAO,CAACC,IAAD,CAAX,EAAmB;AACjB;AACA,QAAIC,OAAO,CAACD,IAAD,CAAX,EAAmB;AACjB,aAAOL,IAAI,CAACK,IAAD,CAAX;AACD;;AACD,QAAIG,OAAO,CAACH,IAAD,CAAX,EAAmB;AACjB,UAAIe,GAAG,GAAGnB,GAAG,CAACI,IAAD,CAAb,CADiB,CAEjB;;AACA,UAAIQ,aAAa,CAACO,GAAD,CAAjB,EAAwB;AACtB,eAAOpB,IAAI,CAAC,WAAD,CAAX;AACD;;AACD,UAAIqB,YAAY,GAAGL,YAAY,CAACI,GAAD,CAA/B;;AACA,UAAIC,YAAJ,EAAkB;AAChB,eAAOnB,OAAO,CAACmB,YAAD,CAAd;AACD;;AACD,aAAOD,GAAP;AACD;;AACD,QAAIF,QAAQ,CAACb,IAAD,CAAZ,EAAoB;AAClB,aAAOH,OAAO,CAACG,IAAD,CAAd;AACD;AACF,GApBD,MAoBK;AACH,WAAOA,IAAP;AACD;AACF;;AAED,eAAec,KAAf","sourcesContent":["import defs from './defs';\nimport wkt from 'wkt-parser';\nimport projStr from './projString';\nimport match from './match';\nfunction testObj(code){\n  return typeof code === 'string';\n}\nfunction testDef(code){\n  return code in defs;\n}\nvar codeWords = ['PROJECTEDCRS', 'PROJCRS', 'GEOGCS','GEOCCS','PROJCS','LOCAL_CS', 'GEODCRS', 'GEODETICCRS', 'GEODETICDATUM', 'ENGCRS', 'ENGINEERINGCRS'];\nfunction testWKT(code){\n  return codeWords.some(function (word) {\n    return code.indexOf(word) > -1;\n  });\n}\nvar codes = ['3857', '900913', '3785', '102113'];\nfunction checkMercator(item) {\n  var auth = match(item, 'authority');\n  if (!auth) {\n    return;\n  }\n  var code = match(auth, 'epsg');\n  return code && codes.indexOf(code) > -1;\n}\nfunction checkProjStr(item) {\n  var ext = match(item, 'extension');\n  if (!ext) {\n    return;\n  }\n  return match(ext, 'proj4');\n}\nfunction testProj(code){\n  return code[0] === '+';\n}\nfunction parse(code){\n  if (testObj(code)) {\n    //check to see if this is a WKT string\n    if (testDef(code)) {\n      return defs[code];\n    }\n    if (testWKT(code)) {\n      var out = wkt(code);\n      // test of spetial case, due to this being a very common and often malformed\n      if (checkMercator(out)) {\n        return defs['EPSG:3857'];\n      }\n      var maybeProjStr = checkProjStr(out);\n      if (maybeProjStr) {\n        return projStr(maybeProjStr);\n      }\n      return out;\n    }\n    if (testProj(code)) {\n      return projStr(code);\n    }\n  }else{\n    return code;\n  }\n}\n\nexport default parse;\n"]},"metadata":{},"sourceType":"module"}