{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\brand\\\\source\\\\repos\\\\DAS-Server\\\\client\\\\src\\\\components\\\\livePage\\\\LapTimes\\\\LapTimes.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useContext } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { SocketContext } from '../../../SocketContext';\nimport { updateLapTime, updateLapTimes, updateBestLapTime, updateSpeedometer } from '../../../actions/livePage/lapTimesActions';\nimport './LapTimes.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction LapTimes() {\n  _s();\n\n  const socket = useContext(SocketContext);\n  const lap_time = useSelector(state => state.lapTimes.lapTime);\n  const dispatch = useDispatch();\n  const lapCount = useSelector(state => state.lapTimes.lapCount);\n  const lapTimes = useSelector(state => state.lapTimes.lapTimes);\n  const bestLap = useSelector(state => state.lapTimes.bestLapTime);\n  const speedometer = useSelector(state => state.lapTimes.speedomter);\n  useEffect(() => {\n    socket.on('lap_time', data => {\n      dispatch(updateLapTime(data));\n    });\n  }, []);\n  useEffect(() => {\n    if (lapCount > 1) {\n      dispatch(updateLapTimes(`${lap_time}`));\n    }\n  }, [lapCount]);\n  useEffect(() => {\n    if (lapCount > 1) {\n      getBestLapTime();\n    }\n  }, [lapTimes]);\n  useEffect(() => {\n    socket.on('speedometer', data => {\n      dispatch(updateSpeedometer(data));\n    });\n  }, []);\n\n  function getBestLapTime() {\n    let bestLapTime = lapTimes[0];\n    let bestLapNumber = 1;\n\n    for (let i = 0; i < lapTimes.length; i++) {\n      if (bestLapTime > lapTimes[i]) {\n        bestLapTime = lapTimes[i];\n        bestLapNumber = i + 1;\n      }\n    }\n\n    dispatch(updateBestLapTime({\n      time: bestLapTime,\n      lapNumber: bestLapNumber\n    }));\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [\"Lap \", lapCount, \": \", lap_time, \" sec\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      style: {\n        color: \"red\"\n      },\n      children: [\"Best Lap: \", lapCount === 1 ? `${lap_time} (L1)` : `${bestLap.time} (L${bestLap.lapNumber})`]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: lapTimes.map((lapTime, index) => {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [\"L\", index + 1, \": \", lapTime]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 29\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [\"Speedometer: \", speedometer, \" mph\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 9\n  }, this);\n}\n\n_s(LapTimes, \"8tzoTnkeBNJZaY7t/kJC2yueX0o=\", false, function () {\n  return [useSelector, useDispatch, useSelector, useSelector, useSelector, useSelector];\n});\n\n_c = LapTimes;\nexport default LapTimes;\n\nvar _c;\n\n$RefreshReg$(_c, \"LapTimes\");","map":{"version":3,"sources":["C:/Users/brand/source/repos/DAS-Server/client/src/components/livePage/LapTimes/LapTimes.js"],"names":["React","useEffect","useContext","useSelector","useDispatch","SocketContext","updateLapTime","updateLapTimes","updateBestLapTime","updateSpeedometer","LapTimes","socket","lap_time","state","lapTimes","lapTime","dispatch","lapCount","bestLap","bestLapTime","speedometer","speedomter","on","data","getBestLapTime","bestLapNumber","i","length","time","lapNumber","color","map","index"],"mappings":"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","sourcesContent":["import React, { useEffect, useContext } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { SocketContext } from '../../../SocketContext';\r\nimport { updateLapTime, updateLapTimes, updateBestLapTime, updateSpeedometer } from '../../../actions/livePage/lapTimesActions'\r\n\r\n\r\nimport './LapTimes.css';\r\n\r\nfunction LapTimes() {\r\n\r\n    const socket = useContext(SocketContext);\r\n    const lap_time = useSelector((state) => state.lapTimes.lapTime);\r\n    const dispatch = useDispatch();\r\n    const lapCount = useSelector((state) => state.lapTimes.lapCount);\r\n    const lapTimes = useSelector((state) => state.lapTimes.lapTimes);\r\n    const bestLap = useSelector((state) => state.lapTimes.bestLapTime);\r\n    const speedometer = useSelector((state) => state.lapTimes.speedomter)\r\n\r\n    useEffect(() => {\r\n        socket.on('lap_time', (data) => {\r\n            dispatch(updateLapTime(data))\r\n        });\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        if (lapCount > 1) {\r\n            dispatch(updateLapTimes(`${lap_time}`))\r\n        }\r\n    }, [lapCount])\r\n\r\n    useEffect(() => {\r\n        if (lapCount > 1) {\r\n            getBestLapTime();\r\n        }\r\n    }, [lapTimes])\r\n\r\n    useEffect(() => {\r\n        socket.on('speedometer', (data) => {\r\n            dispatch(updateSpeedometer(data))\r\n        });\r\n    }, [])\r\n\r\n    function getBestLapTime() {\r\n        let bestLapTime = lapTimes[0];\r\n        let bestLapNumber = 1;\r\n        for (let i = 0; i < lapTimes.length; i++) {\r\n            if (bestLapTime > lapTimes[i]) {\r\n                bestLapTime = lapTimes[i];\r\n                bestLapNumber = i + 1;\r\n            }\r\n        }\r\n        dispatch(updateBestLapTime({ time: bestLapTime, lapNumber: bestLapNumber }))\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h1>\r\n                Lap {lapCount}: {lap_time} sec\r\n            </h1>\r\n            <h2 style={{ color: \"red\" }}>\r\n                Best Lap: {lapCount === 1 ? `${lap_time} (L1)` : `${bestLap.time} (L${bestLap.lapNumber})`}\r\n            </h2>\r\n            <h3>\r\n                {lapTimes.map((lapTime, index) => {\r\n                    return (<div>L{index + 1}: {lapTime}</div>)\r\n                })\r\n                }\r\n            </h3>\r\n            <h2>\r\n                Speedometer: {speedometer} mph\r\n            </h2>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default LapTimes;\r\n"]},"metadata":{},"sourceType":"module"}