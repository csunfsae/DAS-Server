{"ast":null,"code":"import { EPSLN, HALF_PI } from '../constants/values';\nimport sign from '../common/sign';\nimport msfnz from '../common/msfnz';\nimport tsfnz from '../common/tsfnz';\nimport phi2z from '../common/phi2z';\nimport adjust_lon from '../common/adjust_lon';\nexport function ssfn_(phit, sinphi, eccen) {\n  sinphi *= eccen;\n  return Math.tan(0.5 * (HALF_PI + phit)) * Math.pow((1 - sinphi) / (1 + sinphi), 0.5 * eccen);\n}\nexport function init() {\n  this.coslat0 = Math.cos(this.lat0);\n  this.sinlat0 = Math.sin(this.lat0);\n\n  if (this.sphere) {\n    if (this.k0 === 1 && !isNaN(this.lat_ts) && Math.abs(this.coslat0) <= EPSLN) {\n      this.k0 = 0.5 * (1 + sign(this.lat0) * Math.sin(this.lat_ts));\n    }\n  } else {\n    if (Math.abs(this.coslat0) <= EPSLN) {\n      if (this.lat0 > 0) {\n        //North pole\n        //trace('stere:north pole');\n        this.con = 1;\n      } else {\n        //South pole\n        //trace('stere:south pole');\n        this.con = -1;\n      }\n    }\n\n    this.cons = Math.sqrt(Math.pow(1 + this.e, 1 + this.e) * Math.pow(1 - this.e, 1 - this.e));\n\n    if (this.k0 === 1 && !isNaN(this.lat_ts) && Math.abs(this.coslat0) <= EPSLN) {\n      this.k0 = 0.5 * this.cons * msfnz(this.e, Math.sin(this.lat_ts), Math.cos(this.lat_ts)) / tsfnz(this.e, this.con * this.lat_ts, this.con * Math.sin(this.lat_ts));\n    }\n\n    this.ms1 = msfnz(this.e, this.sinlat0, this.coslat0);\n    this.X0 = 2 * Math.atan(this.ssfn_(this.lat0, this.sinlat0, this.e)) - HALF_PI;\n    this.cosX0 = Math.cos(this.X0);\n    this.sinX0 = Math.sin(this.X0);\n  }\n} // Stereographic forward equations--mapping lat,long to x,y\n\nexport function forward(p) {\n  var lon = p.x;\n  var lat = p.y;\n  var sinlat = Math.sin(lat);\n  var coslat = Math.cos(lat);\n  var A, X, sinX, cosX, ts, rh;\n  var dlon = adjust_lon(lon - this.long0);\n\n  if (Math.abs(Math.abs(lon - this.long0) - Math.PI) <= EPSLN && Math.abs(lat + this.lat0) <= EPSLN) {\n    //case of the origine point\n    //trace('stere:this is the origin point');\n    p.x = NaN;\n    p.y = NaN;\n    return p;\n  }\n\n  if (this.sphere) {\n    //trace('stere:sphere case');\n    A = 2 * this.k0 / (1 + this.sinlat0 * sinlat + this.coslat0 * coslat * Math.cos(dlon));\n    p.x = this.a * A * coslat * Math.sin(dlon) + this.x0;\n    p.y = this.a * A * (this.coslat0 * sinlat - this.sinlat0 * coslat * Math.cos(dlon)) + this.y0;\n    return p;\n  } else {\n    X = 2 * Math.atan(this.ssfn_(lat, sinlat, this.e)) - HALF_PI;\n    cosX = Math.cos(X);\n    sinX = Math.sin(X);\n\n    if (Math.abs(this.coslat0) <= EPSLN) {\n      ts = tsfnz(this.e, lat * this.con, this.con * sinlat);\n      rh = 2 * this.a * this.k0 * ts / this.cons;\n      p.x = this.x0 + rh * Math.sin(lon - this.long0);\n      p.y = this.y0 - this.con * rh * Math.cos(lon - this.long0); //trace(p.toString());\n\n      return p;\n    } else if (Math.abs(this.sinlat0) < EPSLN) {\n      //Eq\n      //trace('stere:equateur');\n      A = 2 * this.a * this.k0 / (1 + cosX * Math.cos(dlon));\n      p.y = A * sinX;\n    } else {\n      //other case\n      //trace('stere:normal case');\n      A = 2 * this.a * this.k0 * this.ms1 / (this.cosX0 * (1 + this.sinX0 * sinX + this.cosX0 * cosX * Math.cos(dlon)));\n      p.y = A * (this.cosX0 * sinX - this.sinX0 * cosX * Math.cos(dlon)) + this.y0;\n    }\n\n    p.x = A * cosX * Math.sin(dlon) + this.x0;\n  } //trace(p.toString());\n\n\n  return p;\n} //* Stereographic inverse equations--mapping x,y to lat/long\n\nexport function inverse(p) {\n  p.x -= this.x0;\n  p.y -= this.y0;\n  var lon, lat, ts, ce, Chi;\n  var rh = Math.sqrt(p.x * p.x + p.y * p.y);\n\n  if (this.sphere) {\n    var c = 2 * Math.atan(rh / (2 * this.a * this.k0));\n    lon = this.long0;\n    lat = this.lat0;\n\n    if (rh <= EPSLN) {\n      p.x = lon;\n      p.y = lat;\n      return p;\n    }\n\n    lat = Math.asin(Math.cos(c) * this.sinlat0 + p.y * Math.sin(c) * this.coslat0 / rh);\n\n    if (Math.abs(this.coslat0) < EPSLN) {\n      if (this.lat0 > 0) {\n        lon = adjust_lon(this.long0 + Math.atan2(p.x, -1 * p.y));\n      } else {\n        lon = adjust_lon(this.long0 + Math.atan2(p.x, p.y));\n      }\n    } else {\n      lon = adjust_lon(this.long0 + Math.atan2(p.x * Math.sin(c), rh * this.coslat0 * Math.cos(c) - p.y * this.sinlat0 * Math.sin(c)));\n    }\n\n    p.x = lon;\n    p.y = lat;\n    return p;\n  } else {\n    if (Math.abs(this.coslat0) <= EPSLN) {\n      if (rh <= EPSLN) {\n        lat = this.lat0;\n        lon = this.long0;\n        p.x = lon;\n        p.y = lat; //trace(p.toString());\n\n        return p;\n      }\n\n      p.x *= this.con;\n      p.y *= this.con;\n      ts = rh * this.cons / (2 * this.a * this.k0);\n      lat = this.con * phi2z(this.e, ts);\n      lon = this.con * adjust_lon(this.con * this.long0 + Math.atan2(p.x, -1 * p.y));\n    } else {\n      ce = 2 * Math.atan(rh * this.cosX0 / (2 * this.a * this.k0 * this.ms1));\n      lon = this.long0;\n\n      if (rh <= EPSLN) {\n        Chi = this.X0;\n      } else {\n        Chi = Math.asin(Math.cos(ce) * this.sinX0 + p.y * Math.sin(ce) * this.cosX0 / rh);\n        lon = adjust_lon(this.long0 + Math.atan2(p.x * Math.sin(ce), rh * this.cosX0 * Math.cos(ce) - p.y * this.sinX0 * Math.sin(ce)));\n      }\n\n      lat = -1 * phi2z(this.e, Math.tan(0.5 * (HALF_PI + Chi)));\n    }\n  }\n\n  p.x = lon;\n  p.y = lat; //trace(p.toString());\n\n  return p;\n}\nexport var names = [\"stere\", \"Stereographic_South_Pole\", \"Polar Stereographic (variant B)\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names,\n  ssfn_: ssfn_\n};","map":{"version":3,"sources":["C:/Users/brand/source/repos/DAS-Server/client/node_modules/proj4/lib/projections/stere.js"],"names":["EPSLN","HALF_PI","sign","msfnz","tsfnz","phi2z","adjust_lon","ssfn_","phit","sinphi","eccen","Math","tan","pow","init","coslat0","cos","lat0","sinlat0","sin","sphere","k0","isNaN","lat_ts","abs","con","cons","sqrt","e","ms1","X0","atan","cosX0","sinX0","forward","p","lon","x","lat","y","sinlat","coslat","A","X","sinX","cosX","ts","rh","dlon","long0","PI","NaN","a","x0","y0","inverse","ce","Chi","c","asin","atan2","names"],"mappings":"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","sourcesContent":["import {EPSLN, HALF_PI} from '../constants/values';\n\nimport sign from '../common/sign';\nimport msfnz from '../common/msfnz';\nimport tsfnz from '../common/tsfnz';\nimport phi2z from '../common/phi2z';\nimport adjust_lon from '../common/adjust_lon';\n\nexport function ssfn_(phit, sinphi, eccen) {\n  sinphi *= eccen;\n  return (Math.tan(0.5 * (HALF_PI + phit)) * Math.pow((1 - sinphi) / (1 + sinphi), 0.5 * eccen));\n}\n\nexport function init() {\n  this.coslat0 = Math.cos(this.lat0);\n  this.sinlat0 = Math.sin(this.lat0);\n  if (this.sphere) {\n    if (this.k0 === 1 && !isNaN(this.lat_ts) && Math.abs(this.coslat0) <= EPSLN) {\n      this.k0 = 0.5 * (1 + sign(this.lat0) * Math.sin(this.lat_ts));\n    }\n  }\n  else {\n    if (Math.abs(this.coslat0) <= EPSLN) {\n      if (this.lat0 > 0) {\n        //North pole\n        //trace('stere:north pole');\n        this.con = 1;\n      }\n      else {\n        //South pole\n        //trace('stere:south pole');\n        this.con = -1;\n      }\n    }\n    this.cons = Math.sqrt(Math.pow(1 + this.e, 1 + this.e) * Math.pow(1 - this.e, 1 - this.e));\n    if (this.k0 === 1 && !isNaN(this.lat_ts) && Math.abs(this.coslat0) <= EPSLN) {\n      this.k0 = 0.5 * this.cons * msfnz(this.e, Math.sin(this.lat_ts), Math.cos(this.lat_ts)) / tsfnz(this.e, this.con * this.lat_ts, this.con * Math.sin(this.lat_ts));\n    }\n    this.ms1 = msfnz(this.e, this.sinlat0, this.coslat0);\n    this.X0 = 2 * Math.atan(this.ssfn_(this.lat0, this.sinlat0, this.e)) - HALF_PI;\n    this.cosX0 = Math.cos(this.X0);\n    this.sinX0 = Math.sin(this.X0);\n  }\n}\n\n// Stereographic forward equations--mapping lat,long to x,y\nexport function forward(p) {\n  var lon = p.x;\n  var lat = p.y;\n  var sinlat = Math.sin(lat);\n  var coslat = Math.cos(lat);\n  var A, X, sinX, cosX, ts, rh;\n  var dlon = adjust_lon(lon - this.long0);\n\n  if (Math.abs(Math.abs(lon - this.long0) - Math.PI) <= EPSLN && Math.abs(lat + this.lat0) <= EPSLN) {\n    //case of the origine point\n    //trace('stere:this is the origin point');\n    p.x = NaN;\n    p.y = NaN;\n    return p;\n  }\n  if (this.sphere) {\n    //trace('stere:sphere case');\n    A = 2 * this.k0 / (1 + this.sinlat0 * sinlat + this.coslat0 * coslat * Math.cos(dlon));\n    p.x = this.a * A * coslat * Math.sin(dlon) + this.x0;\n    p.y = this.a * A * (this.coslat0 * sinlat - this.sinlat0 * coslat * Math.cos(dlon)) + this.y0;\n    return p;\n  }\n  else {\n    X = 2 * Math.atan(this.ssfn_(lat, sinlat, this.e)) - HALF_PI;\n    cosX = Math.cos(X);\n    sinX = Math.sin(X);\n    if (Math.abs(this.coslat0) <= EPSLN) {\n      ts = tsfnz(this.e, lat * this.con, this.con * sinlat);\n      rh = 2 * this.a * this.k0 * ts / this.cons;\n      p.x = this.x0 + rh * Math.sin(lon - this.long0);\n      p.y = this.y0 - this.con * rh * Math.cos(lon - this.long0);\n      //trace(p.toString());\n      return p;\n    }\n    else if (Math.abs(this.sinlat0) < EPSLN) {\n      //Eq\n      //trace('stere:equateur');\n      A = 2 * this.a * this.k0 / (1 + cosX * Math.cos(dlon));\n      p.y = A * sinX;\n    }\n    else {\n      //other case\n      //trace('stere:normal case');\n      A = 2 * this.a * this.k0 * this.ms1 / (this.cosX0 * (1 + this.sinX0 * sinX + this.cosX0 * cosX * Math.cos(dlon)));\n      p.y = A * (this.cosX0 * sinX - this.sinX0 * cosX * Math.cos(dlon)) + this.y0;\n    }\n    p.x = A * cosX * Math.sin(dlon) + this.x0;\n  }\n  //trace(p.toString());\n  return p;\n}\n\n//* Stereographic inverse equations--mapping x,y to lat/long\nexport function inverse(p) {\n  p.x -= this.x0;\n  p.y -= this.y0;\n  var lon, lat, ts, ce, Chi;\n  var rh = Math.sqrt(p.x * p.x + p.y * p.y);\n  if (this.sphere) {\n    var c = 2 * Math.atan(rh / (2 * this.a * this.k0));\n    lon = this.long0;\n    lat = this.lat0;\n    if (rh <= EPSLN) {\n      p.x = lon;\n      p.y = lat;\n      return p;\n    }\n    lat = Math.asin(Math.cos(c) * this.sinlat0 + p.y * Math.sin(c) * this.coslat0 / rh);\n    if (Math.abs(this.coslat0) < EPSLN) {\n      if (this.lat0 > 0) {\n        lon = adjust_lon(this.long0 + Math.atan2(p.x, - 1 * p.y));\n      }\n      else {\n        lon = adjust_lon(this.long0 + Math.atan2(p.x, p.y));\n      }\n    }\n    else {\n      lon = adjust_lon(this.long0 + Math.atan2(p.x * Math.sin(c), rh * this.coslat0 * Math.cos(c) - p.y * this.sinlat0 * Math.sin(c)));\n    }\n    p.x = lon;\n    p.y = lat;\n    return p;\n  }\n  else {\n    if (Math.abs(this.coslat0) <= EPSLN) {\n      if (rh <= EPSLN) {\n        lat = this.lat0;\n        lon = this.long0;\n        p.x = lon;\n        p.y = lat;\n        //trace(p.toString());\n        return p;\n      }\n      p.x *= this.con;\n      p.y *= this.con;\n      ts = rh * this.cons / (2 * this.a * this.k0);\n      lat = this.con * phi2z(this.e, ts);\n      lon = this.con * adjust_lon(this.con * this.long0 + Math.atan2(p.x, - 1 * p.y));\n    }\n    else {\n      ce = 2 * Math.atan(rh * this.cosX0 / (2 * this.a * this.k0 * this.ms1));\n      lon = this.long0;\n      if (rh <= EPSLN) {\n        Chi = this.X0;\n      }\n      else {\n        Chi = Math.asin(Math.cos(ce) * this.sinX0 + p.y * Math.sin(ce) * this.cosX0 / rh);\n        lon = adjust_lon(this.long0 + Math.atan2(p.x * Math.sin(ce), rh * this.cosX0 * Math.cos(ce) - p.y * this.sinX0 * Math.sin(ce)));\n      }\n      lat = -1 * phi2z(this.e, Math.tan(0.5 * (HALF_PI + Chi)));\n    }\n  }\n  p.x = lon;\n  p.y = lat;\n\n  //trace(p.toString());\n  return p;\n\n}\n\nexport var names = [\"stere\", \"Stereographic_South_Pole\", \"Polar Stereographic (variant B)\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names,\n  ssfn_: ssfn_\n};\n"]},"metadata":{},"sourceType":"module"}