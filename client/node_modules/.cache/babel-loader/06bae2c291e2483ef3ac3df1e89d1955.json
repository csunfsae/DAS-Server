{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\brand\\\\source\\\\repos\\\\DAS-Server\\\\client\\\\src\\\\components\\\\historyPage\\\\forms\\\\SessionSelectionForm.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { useForm } from 'react-hook-form';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { updateSelectedSessionNumber, updateModalStepForward, updateModalStepBackwards } from '../../../actions/historyPage/modalActions';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction SessionSelectionForm(props) {\n  _s();\n\n  const {\n    handleSubmit,\n    register\n  } = useForm();\n  const allDriveDays = useSelector(state => state.historyModal.driveDays);\n  const selectedDriveDateIndex = useSelector(state => state.historyModal.selectedDriveDateIndex);\n  const displayedSessions = useSelector(state => state.historyModal.displayedSessions);\n  const selectedDriveDate = allDriveDays[selectedDriveDateIndex].date;\n\n  const getAvailableSessions = () => {\n    if (!(selectedDriveDate in displayedSessions)) {\n      return allDriveDays[selectedDriveDateIndex][\"sessions\"];\n    }\n\n    const sessions = allDriveDays[selectedDriveDateIndex][\"sessions\"].filter(session => {\n      return !displayedSessions[selectedDriveDate][\"sessions\"].some(displayedSession => {\n        return displayedSession.number === session.number;\n      });\n    });\n    return sessions;\n  };\n\n  const availableSessions = getAvailableSessions();\n  const dispatch = useDispatch();\n\n  const onSubmit = async data => {\n    dispatch(updateSelectedSessionNumber(data.driveDateSession));\n    dispatch(updateModalStepForward());\n  };\n\n  const renderSessionSelection = () => {\n    if (availableSessions.length <= 0) {\n      return /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"There are no other sessions on \", new Date(selectedDriveDate + \" \").toDateString(\"en-us\"), \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          onClick: () => {\n            dispatch(updateModalStepBackwards());\n          },\n          children: \"Back\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true);\n    }\n\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group\",\n        children: /*#__PURE__*/_jsxDEV(\"select\", {\n          defaultValue: props.sessionData,\n          className: \"form-control\",\n          name: \"driveDateSession\",\n          ref: register,\n          children: availableSessions.map((session, index) => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: session.number,\n            children: session.number\n          }, index + 1, false, {\n            fileName: _jsxFileName,\n            lineNumber: 57,\n            columnNumber: 29\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          onClick: () => {\n            dispatch(updateModalStepBackwards());\n          },\n          children: \"Back\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn btn-primary\",\n          type: \"submit\",\n          children: \"Next\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Select Session:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit(onSubmit),\n      children: renderSessionSelection()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 9\n  }, this);\n}\n\n_s(SessionSelectionForm, \"XdPDWNCLy6FuHJOsGklcl26baoI=\", false, function () {\n  return [useForm, useSelector, useSelector, useSelector, useDispatch];\n});\n\n_c = SessionSelectionForm;\nexport default SessionSelectionForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"SessionSelectionForm\");","map":{"version":3,"sources":["C:/Users/brand/source/repos/DAS-Server/client/src/components/historyPage/forms/SessionSelectionForm.js"],"names":["React","useForm","useSelector","useDispatch","updateSelectedSessionNumber","updateModalStepForward","updateModalStepBackwards","SessionSelectionForm","props","handleSubmit","register","allDriveDays","state","historyModal","driveDays","selectedDriveDateIndex","displayedSessions","selectedDriveDate","date","getAvailableSessions","sessions","filter","session","some","displayedSession","number","availableSessions","dispatch","onSubmit","data","driveDateSession","renderSessionSelection","length","Date","toDateString","sessionData","map","index"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport {useForm} from 'react-hook-form';\r\nimport {useSelector, useDispatch} from 'react-redux';\r\nimport {updateSelectedSessionNumber, updateModalStepForward, updateModalStepBackwards} from '../../../actions/historyPage/modalActions';\r\n\r\nfunction SessionSelectionForm(props) {\r\n\r\n    const {handleSubmit, register} = useForm();\r\n    \r\n    const allDriveDays = useSelector( (state) => state.historyModal.driveDays);\r\n\r\n    const selectedDriveDateIndex = useSelector( (state) => state.historyModal.selectedDriveDateIndex);\r\n\r\n    const displayedSessions = useSelector( (state) => state.historyModal.displayedSessions);\r\n\r\n    const selectedDriveDate = allDriveDays[selectedDriveDateIndex].date;\r\n    \r\n    const getAvailableSessions = () => {\r\n\r\n        if( !(selectedDriveDate in displayedSessions) ) {\r\n            return allDriveDays[selectedDriveDateIndex][\"sessions\"];\r\n        }\r\n\r\n        const sessions = allDriveDays[selectedDriveDateIndex][\"sessions\"].filter( (session) => {\r\n            return !displayedSessions[selectedDriveDate][\"sessions\"].some( (displayedSession) => {\r\n                return displayedSession.number === session.number\r\n            }); \r\n        });\r\n\r\n        return sessions;\r\n    }\r\n    \r\n    const availableSessions = getAvailableSessions();\r\n\r\n    const dispatch = useDispatch();\r\n    \r\n    const onSubmit = async (data) => {\r\n        dispatch(updateSelectedSessionNumber(data.driveDateSession)) \r\n        dispatch ( updateModalStepForward() )       \r\n    }\r\n    \r\n    const renderSessionSelection = () => {\r\n        if (availableSessions.length <= 0) {\r\n            return (\r\n                <>\r\n                    <p>There are no other sessions on {new Date(selectedDriveDate + \" \").toDateString(\"en-us\")} </p>\r\n                    <button type=\"button\" onClick={() => {dispatch(updateModalStepBackwards() )}}>Back</button>\r\n                </>\r\n            )\r\n        }\r\n\r\n        return (\r\n            <>\r\n                <div className=\"form-group\">\r\n                    <select defaultValue={props.sessionData} className=\"form-control\" name=\"driveDateSession\" ref={register}>\r\n                        {availableSessions.map( (session, index) =>\r\n                            <option key={index + 1} value={session.number}>{session.number}</option>\r\n                        )}\r\n                    </select>\r\n                </div>\r\n                <div>\r\n                    <button type=\"button\" onClick={() => {dispatch(updateModalStepBackwards() )}}>Back</button>\r\n                    <button className=\"btn btn-primary\" type=\"submit\">Next</button>\r\n                </div>\r\n            </>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h2>Select Session:</h2>\r\n            <form onSubmit={handleSubmit(onSubmit)}>\r\n                { renderSessionSelection() }\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\n\r\nexport default SessionSelectionForm;\r\n"]},"metadata":{},"sourceType":"module"}