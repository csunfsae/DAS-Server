{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\brand\\\\source\\\\repos\\\\das-server\\\\client\\\\src\\\\components\\\\historyPage\\\\graphicalView\\\\GraphicalView.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useRef, useState } from 'react';\nimport SensorGraph from './SensorGraph/SensorGraph';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { select, bisector, scaleLinear, axisBottom, zoom, zoomTransform } from 'd3';\nimport { loadDefaultSensorData } from '../../../actions/historyPage/historicalPageActions';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction GraphicalView() {\n  _s();\n\n  const sensorsData = useSelector(state => state.generalHistoricalData.sensorsData);\n  const dispatch = useDispatch();\n  const [dimensions, setDimensions] = useState({\n    height: 0,\n    width: 0\n  });\n  const [currentZoomState, setCurrentZoomState] = useState();\n  const margin = {\n    top: 50,\n    right: 50,\n    bottom: 50,\n    left: 50\n  };\n  const innerHeight = dimensions.height - margin.top - margin.bottom;\n  const innerWidth = dimensions.width - margin.left - margin.right;\n  const svgRef = useRef();\n  let svg = null;\n  let xScale = null;\n  let yScales = {};\n\n  const renderGraphs = () => {\n    let sensorGraphs = [];\n    let sensorIndex = 0;\n\n    if (dimensions.height !== 0) {\n      for (const sensor in sensorsData) {\n        yScales[sensor] = null;\n        let currentMinMax = getLapMinMaxValues(sensorsData[sensor][0]); // find min and max in all of the sensors laps\n\n        for (const lap of sensorsData[sensor]) {\n          const {\n            minValue,\n            maxValue\n          } = getLapMinMaxValues(lap);\n          currentMinMax = getMinMax(currentMinMax.minValue, minValue, currentMinMax.maxValue, maxValue);\n        }\n\n        const yScale = scaleLinear().domain([currentMinMax.minValue, currentMinMax.maxValue]).range([300, 0]);\n        yScales[sensor] = yScale;\n        const isFirstSensor = sensorIndex === 0 ? true : false;\n        sensorGraphs = [...sensorGraphs, /*#__PURE__*/_jsxDEV(SensorGraph, {\n          minValue: currentMinMax.minValue,\n          maxValue: currentMinMax.maxValue,\n          index: sensorIndex,\n          width: dimensions.width,\n          yScale: yScales[sensor],\n          isFirstSensor: isFirstSensor,\n          sensor: sensor,\n          sensorData: sensorsData[sensor]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 50\n        }, this)];\n        sensorIndex++;\n      }\n    }\n\n    return sensorGraphs;\n  };\n\n  const getMinMax = (currentMin, minValue, currentMax, maxValue) => {\n    if (currentMin > minValue) {\n      currentMin = minValue;\n    }\n\n    if (currentMax < maxValue) {\n      currentMax = maxValue;\n    }\n\n    return {\n      minValue: currentMin,\n      maxValue: currentMax\n    };\n  };\n\n  const getLapMinMaxValues = lapValues => {\n    let minValue = lapValues[0].value[\"$numberDecimal\"];\n    let maxValue = lapValues[0].value[\"$numberDecimal\"];\n\n    for (const valueIndex of lapValues) {\n      if (parseFloat(valueIndex.value[\"$numberDecimal\"].toString()) > maxValue) {\n        maxValue = valueIndex.value[\"$numberDecimal\"];\n      }\n\n      if (parseFloat(valueIndex.value[\"$numberDecimal\"].toString()) < minValue) {\n        minValue = valueIndex.value[\"$numberDecimal\"];\n      }\n    }\n\n    return {\n      minValue,\n      maxValue\n    };\n  };\n\n  const getLongestLap = () => {\n    let firstSensor = sensorsData[Object.keys(sensorsData)[0]];\n    let longestLap = firstSensor[0];\n\n    for (let lap of firstSensor) {\n      if (lap.length > longestLap.length) {\n        longestLap = lap;\n      }\n    }\n\n    return longestLap;\n  };\n\n  const renderMousePerLines = svg => {\n    for (const sensor in sensorsData) {\n      for (const index in sensorsData[sensor]) {\n        let mousePerLine = svg.select('.mouseover').append(\"g\").data([sensorsData[sensor][index]]).attr(\"class\", \"mouse-per-line\");\n        mousePerLine.append(\"circle\").attr(\"r\", 7).style(\"fill\", \"none\").style(\"stroke\", \"black\").style(\"stroke-width\", \"1px\").attr(\"class\", \"mouse-circle\");\n        mousePerLine.append(\"text\").attr(\"transform\", \"translate(10,3)\");\n      }\n    }\n  };\n\n  useEffect(() => {\n    dispatch(loadDefaultSensorData());\n  }, []);\n  useEffect(() => {\n    if (svgRef.current && Object.keys(sensorsData).length > 0) {\n      const height = Object.keys(sensorsData).length * 600;\n      const width = svgRef.current.parentNode.getBoundingClientRect().width;\n      setDimensions({\n        height,\n        width\n      });\n      const longestLap = getLongestLap();\n      svg = select(svgRef.current);\n      renderMousePerLines(svg);\n      xScale = scaleLinear().domain([parseFloat(longestLap[0].lapTime[\"$numberDecimal\"].toString()), parseFloat(longestLap[longestLap.length - 1].lapTime[\"$numberDecimal\"].toString())]).range([0, dimensions.width]);\n      const xAxis = axisBottom(xScale).ticks(30);\n      svg.select('.x-axis').style('transform', `translateY(${Object.keys(sensorsData).length * 600}px)`).call(xAxis);\n    }\n  }, [sensorsData, svgRef, sensorsData]);\n  useEffect(() => {\n    if (svgRef.current && Object.keys(sensorsData).length > 0) {\n      svg = select(svgRef.current);\n      const longestLap = getLongestLap();\n      xScale = scaleLinear().domain([parseFloat(longestLap[0].lapTime[\"$numberDecimal\"].toString()), parseFloat(longestLap[longestLap.length - 1].lapTime[\"$numberDecimal\"].toString())]).range([0, innerWidth]);\n\n      if (currentZoomState) {\n        const newXScale = currentZoomState.rescaleX(xScale);\n        xScale.domain(newXScale.domain());\n      }\n\n      const xAxis = axisBottom(xScale);\n      const xOffset = (Object.keys(sensorsData).length - 1) * 350 + 300;\n      console.log(Object.keys(sensorsData).length);\n      console.log(xOffset);\n      svg.select('.x-axis').style('transform', `translateY(${xOffset}px)`).call(xAxis); // Object.keys(sensorsData).length * 383\n      // const zoomBehavior = zoom().scaleExtent([1, 10]).translateExtent([ [0,0], [dimensions.width, dimensions.height] ])\n      // .on(\"zoom\", () => { \n      //     const zoomState = zoomTransform(svg.node());\n      //     setCurrentZoomState(zoomState);\n      //     // console.log(zoomState)\n      // })\n      // svg.call(zoomBehavior);\n    }\n  }, [dimensions, currentZoomState, sensorsData]);\n\n  const showLine = mouseClick => {\n    // console.log(mouseClick);\n    const mouseClickX = mouseClick.clientX - margin.left;\n    let clickedPosition = null;\n\n    if (svgRef.current) {\n      let index1 = 0;\n      let sensorIndex = 0;\n\n      for (const sensor in sensorsData) {\n        for (const index in sensorsData[sensor]) {\n          let lapForSensor = sensorsData[sensor][index];\n          let x0 = xScale.invert(mouseClickX);\n          let roundedX0 = Math.round(x0 * 10) / 10;\n          let lapTimes = convertLapTimesToArray(lapForSensor);\n          let bisect = bisector(lapTimes => {\n            return lapTimes;\n          }).center;\n          let idx = bisect(lapTimes, roundedX0);\n          clickedPosition = lapForSensor[idx];\n          let x = mouseClickX;\n          let beginning = x;\n          let end = svg.selectAll('.line')[\"_groups\"][0][index1].getTotalLength();\n          let target = null;\n          let pos = null;\n\n          while (true) {\n            target = Math.floor((beginning + end) / 2);\n            pos = svg.selectAll('.line')[\"_groups\"][0][index1].getPointAtLength(target);\n\n            if ((target === end || target === beginning) && pos.x !== x) {\n              break;\n            }\n\n            if (pos.x > x) end = target;else if (pos.x < x) beginning = target;else break; //position found\n          }\n\n          const yCircle = sensorIndex * 350; // console.log(index1);\n\n          console.log(\"yCircle\", yCircle);\n          svg.selectAll('.mouse-per-line').filter(function (d, i) {\n            return i == index1;\n          }).style(\"transform\", `translate(${x}px, ${yCircle + pos.y}px )`);\n          svg.selectAll('.mouse-per-line text').filter(function (d, i) {\n            return i == index1;\n          }).text(`${clickedPosition.value[\"$numberDecimal\"].toString()}`).style(\"margin-left\", \"10px\");\n          index1++;\n        }\n\n        sensorIndex++;\n      }\n\n      svg.select('.mouse-line').attr(\"d\", `M${mouseClickX} , ${innerHeight} ${mouseClickX}, 0`).style(\"opacity\", \"1\");\n    }\n  };\n\n  const convertLapTimesToArray = array => {\n    let lapTimes = [];\n\n    for (const index in array) {\n      lapTimes = [...lapTimes, +array[index].lapTime[\"$numberDecimal\"]];\n    }\n\n    return lapTimes;\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"svg\", {\n        ref: svgRef,\n        style: {\n          height: `${dimensions.height}`,\n          width: `${dimensions.width}`\n        },\n        children: /*#__PURE__*/_jsxDEV(\"g\", {\n          style: {\n            transform: `translate(${margin.left}px, ${margin.top}px)`\n          },\n          children: [renderGraphs(), /*#__PURE__*/_jsxDEV(\"g\", {\n            className: \"mouseover\",\n            children: [/*#__PURE__*/_jsxDEV(\"path\", {\n              className: \"mouse-line\",\n              style: {\n                stroke: \"black\",\n                strokeWidth: \"2px\",\n                opacity: \"1px\"\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 262,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(\"rect\", {\n              width: innerWidth + 5,\n              height: innerHeight,\n              fill: \"none\",\n              onMouseDown: mouseClick => showLine(mouseClick),\n              pointerEvents: \"all\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 263,\n              columnNumber: 25\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 261,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"g\", {\n            className: \"x-axis\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 265,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 259,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 258,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 257,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n}\n\n_s(GraphicalView, \"TxYdJlFow7ftJ3ZAXSlVDGhgqKI=\", false, function () {\n  return [useSelector, useDispatch];\n});\n\n_c = GraphicalView;\nexport default GraphicalView;\n\nvar _c;\n\n$RefreshReg$(_c, \"GraphicalView\");","map":{"version":3,"sources":["C:/Users/brand/source/repos/das-server/client/src/components/historyPage/graphicalView/GraphicalView.js"],"names":["React","useEffect","useRef","useState","SensorGraph","useSelector","useDispatch","select","bisector","scaleLinear","axisBottom","zoom","zoomTransform","loadDefaultSensorData","GraphicalView","sensorsData","state","generalHistoricalData","dispatch","dimensions","setDimensions","height","width","currentZoomState","setCurrentZoomState","margin","top","right","bottom","left","innerHeight","innerWidth","svgRef","svg","xScale","yScales","renderGraphs","sensorGraphs","sensorIndex","sensor","currentMinMax","getLapMinMaxValues","lap","minValue","maxValue","getMinMax","yScale","domain","range","isFirstSensor","currentMin","currentMax","lapValues","value","valueIndex","parseFloat","toString","getLongestLap","firstSensor","Object","keys","longestLap","length","renderMousePerLines","index","mousePerLine","append","data","attr","style","current","parentNode","getBoundingClientRect","lapTime","xAxis","ticks","call","newXScale","rescaleX","xOffset","console","log","showLine","mouseClick","mouseClickX","clientX","clickedPosition","index1","lapForSensor","x0","invert","roundedX0","Math","round","lapTimes","convertLapTimesToArray","bisect","center","idx","x","beginning","end","selectAll","getTotalLength","target","pos","floor","getPointAtLength","yCircle","filter","d","i","y","text","array","transform","stroke","strokeWidth","opacity"],"mappings":"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","sourcesContent":["import React, {useEffect, useRef, useState} from 'react';\r\nimport SensorGraph from './SensorGraph/SensorGraph';\r\nimport {useSelector, useDispatch} from 'react-redux';\r\nimport {select, bisector, scaleLinear, axisBottom, zoom, zoomTransform} from 'd3';\r\nimport {loadDefaultSensorData} from '../../../actions/historyPage/historicalPageActions'\r\n\r\nfunction GraphicalView() {\r\n    const sensorsData = useSelector( (state) => state.generalHistoricalData.sensorsData);\r\n    const dispatch = useDispatch();\r\n    const [dimensions, setDimensions] = useState({height: 0, width: 0});\r\n    const [currentZoomState, setCurrentZoomState] = useState();\r\n    const margin = {top: 50, right: 50, bottom: 50, left: 50};\r\n    const innerHeight = dimensions.height - margin.top - margin.bottom;\r\n    const innerWidth = dimensions.width - margin.left - margin.right;\r\n\r\n    const svgRef = useRef();\r\n    let svg = null;\r\n    let xScale = null;\r\n    let yScales = {};\r\n\r\n    const renderGraphs = () => {\r\n        let sensorGraphs = [];\r\n        let sensorIndex = 0;\r\n        \r\n        if(dimensions.height !== 0 ) {\r\n            for (const sensor in sensorsData) {\r\n\r\n                yScales[sensor] = null;\r\n    \r\n                let currentMinMax = getLapMinMaxValues(sensorsData[sensor][0]); \r\n    \r\n                // find min and max in all of the sensors laps\r\n                for (const lap of sensorsData[sensor]) {\r\n                    const {minValue, maxValue} = getLapMinMaxValues(lap);\r\n                    currentMinMax = getMinMax(currentMinMax.minValue, minValue, currentMinMax.maxValue, maxValue);\r\n                }\r\n    \r\n                const yScale = scaleLinear().domain( [currentMinMax.minValue, currentMinMax.maxValue]).range( [300, 0] );\r\n                yScales[sensor] = yScale;\r\n    \r\n                const isFirstSensor = sensorIndex === 0 ? true : false;\r\n            \r\n                sensorGraphs = [...sensorGraphs, <SensorGraph minValue={currentMinMax.minValue} maxValue={currentMinMax.maxValue} index={sensorIndex} width={dimensions.width} yScale={yScales[sensor]} isFirstSensor={isFirstSensor} sensor={sensor} sensorData={sensorsData[sensor]} />];\r\n                sensorIndex++;\r\n            }\r\n        }\r\n        \r\n        return sensorGraphs;\r\n    }\r\n\r\n    const getMinMax = (currentMin, minValue, currentMax, maxValue) => {\r\n\r\n        if (currentMin > minValue) {\r\n            currentMin = minValue\r\n        }\r\n\r\n        if(currentMax < maxValue)  {\r\n            currentMax = maxValue\r\n        }\r\n\r\n        return {\r\n            minValue: currentMin,\r\n            maxValue: currentMax\r\n        }\r\n    }\r\n\r\n    const getLapMinMaxValues = (lapValues) =>  {\r\n        let minValue = lapValues[0].value[\"$numberDecimal\"];\r\n        let maxValue = lapValues[0].value[\"$numberDecimal\"];\r\n        \r\n        for (const valueIndex of lapValues) {\r\n        \r\n            if (parseFloat(valueIndex.value[\"$numberDecimal\"].toString()) > maxValue) {\r\n                maxValue = valueIndex.value[\"$numberDecimal\"]\r\n            }\r\n\r\n            if ( parseFloat(valueIndex.value[\"$numberDecimal\"].toString()) < minValue) {\r\n                minValue = valueIndex.value[\"$numberDecimal\"]\r\n            }\r\n        }\r\n\r\n        return {\r\n            minValue,\r\n            maxValue\r\n        }\r\n    }\r\n\r\n    const getLongestLap = () => {\r\n\r\n        let firstSensor = sensorsData[Object.keys(sensorsData)[0]];\r\n        let longestLap = firstSensor[0];\r\n\r\n        for (let lap of firstSensor) {\r\n            if(lap.length > longestLap.length) { \r\n                longestLap = lap;\r\n            }\r\n        }\r\n        return longestLap;\r\n    }\r\n\r\n    const renderMousePerLines = (svg) => {\r\n        for(const sensor in sensorsData) {\r\n            for(const index in sensorsData[sensor]) {\r\n                let mousePerLine = svg.select('.mouseover')\r\n                                    .append(\"g\")\r\n                                    .data([sensorsData[sensor][index]])\r\n                                    .attr(\"class\", \"mouse-per-line\");\r\n\r\n                    mousePerLine.append(\"circle\")\r\n                    .attr(\"r\", 7)\r\n                    .style(\"fill\", \"none\")\r\n                    .style(\"stroke\",\"black\")\r\n                    .style(\"stroke-width\", \"1px\")\r\n                    .attr(\"class\", \"mouse-circle\");\r\n\r\n                    mousePerLine.append(\"text\").attr(\"transform\", \"translate(10,3)\");\r\n            }\r\n        }\r\n    }\r\n\r\n    useEffect( () => {\r\n        dispatch(loadDefaultSensorData())\r\n    }, [])\r\n\r\n    useEffect( () => {\r\n        \r\n        if(svgRef.current && Object.keys(sensorsData).length > 0) {\r\n\r\n            const height = Object.keys(sensorsData).length * 600;\r\n            const width = svgRef.current.parentNode.getBoundingClientRect().width;\r\n            setDimensions({height, width});\r\n\r\n            const longestLap = getLongestLap()\r\n\r\n            svg = select(svgRef.current);\r\n\r\n            renderMousePerLines(svg);\r\n            \r\n            xScale = scaleLinear()\r\n                .domain( [  parseFloat(longestLap[0].lapTime[\"$numberDecimal\"].toString() ), parseFloat(longestLap[longestLap.length - 1].lapTime[\"$numberDecimal\"].toString() ) ] )\r\n                .range( [0, dimensions.width] );\r\n \r\n            const xAxis = axisBottom(xScale).ticks(30)\r\n            svg.select('.x-axis').style('transform', `translateY(${Object.keys(sensorsData).length * 600}px)`).call(xAxis)\r\n\r\n        }\r\n        \r\n    }, [sensorsData, svgRef, sensorsData])\r\n\r\n    useEffect( () => {\r\n\r\n        if(svgRef.current && Object.keys(sensorsData).length > 0) {\r\n            svg = select(svgRef.current);\r\n            const longestLap = getLongestLap()\r\n\r\n            xScale = scaleLinear()\r\n                .domain( [  parseFloat(longestLap[0].lapTime[\"$numberDecimal\"].toString() ), parseFloat(longestLap[longestLap.length - 1].lapTime[\"$numberDecimal\"].toString() ) ] )\r\n                .range( [0, innerWidth] );\r\n\r\n            if(currentZoomState) {\r\n                const newXScale = currentZoomState.rescaleX(xScale);\r\n                xScale.domain(newXScale.domain());\r\n\r\n            }\r\n\r\n            const xAxis = axisBottom(xScale)\r\n            const xOffset = ((Object.keys(sensorsData).length - 1) * 350) + 300\r\n            console.log(Object.keys(sensorsData).length )\r\n            console.log(xOffset);\r\n            svg.select('.x-axis').style('transform', `translateY(${xOffset}px)`).call(xAxis)\r\n            // Object.keys(sensorsData).length * 383\r\n\r\n            // const zoomBehavior = zoom().scaleExtent([1, 10]).translateExtent([ [0,0], [dimensions.width, dimensions.height] ])\r\n            // .on(\"zoom\", () => { \r\n            //     const zoomState = zoomTransform(svg.node());\r\n            //     setCurrentZoomState(zoomState);\r\n            //     // console.log(zoomState)\r\n            // })\r\n\r\n            // svg.call(zoomBehavior);\r\n        }\r\n    }, [dimensions, currentZoomState, sensorsData])\r\n\r\n    \r\n    const showLine = (mouseClick) => {\r\n        // console.log(mouseClick);\r\n        const mouseClickX = mouseClick.clientX - margin.left;\r\n        let clickedPosition = null;\r\n\r\n        if(svgRef.current) {\r\n            \r\n            let index1 = 0;\r\n            let sensorIndex = 0; \r\n            for(const sensor in sensorsData) {\r\n                for(const index in sensorsData[sensor]) {\r\n\r\n                    let lapForSensor = sensorsData[sensor][index];\r\n                    let x0 = xScale.invert(mouseClickX);\r\n\r\n                    let roundedX0 = (Math.round(x0  * 10) / 10)\r\n\r\n                    let lapTimes = convertLapTimesToArray(lapForSensor);\r\n                    \r\n                    let bisect = bisector ( (lapTimes) => { return lapTimes} ).center;\r\n\r\n                    let idx = bisect(lapTimes, roundedX0);\r\n                    \r\n                    clickedPosition = lapForSensor[idx];\r\n\r\n\r\n                    let x = mouseClickX;\r\n                    let beginning = x;\r\n                    let end = svg.selectAll('.line')[\"_groups\"][0][index1].getTotalLength();\r\n                    let target = null;\r\n                    let pos = null; \r\n\r\n                    while (true) {\r\n                        target = Math.floor((beginning + end) / 2);\r\n                        pos = svg.selectAll('.line')[\"_groups\"][0][index1].getPointAtLength(target);\r\n\r\n                        if ((target === end || target === beginning) && pos.x !== x) {\r\n                            break;\r\n                        }\r\n\r\n                        if (pos.x > x) end = target;\r\n                        else if (pos.x < x) beginning = target;\r\n                        else break; //position found\r\n                    }\r\n\r\n                    const yCircle = sensorIndex * 350;\r\n\r\n                    // console.log(index1);\r\n                    console.log(\"yCircle\",yCircle);\r\n\r\n                    svg.selectAll('.mouse-per-line').filter(function(d, i) { return i == index1 }).style(\"transform\", `translate(${x}px, ${yCircle + pos.y}px )`);\r\n                    svg.selectAll('.mouse-per-line text').filter(function(d, i) { return i == index1 }).text(`${clickedPosition.value[\"$numberDecimal\"].toString()}`).style(\"margin-left\",\"10px\");\r\n                    index1++;\r\n                }\r\n                sensorIndex++;\r\n            }\r\n\r\n            svg.select('.mouse-line').attr(\"d\",`M${mouseClickX} , ${innerHeight} ${mouseClickX}, 0`).style(\"opacity\",\"1\")\r\n\r\n        }\r\n    }\r\n\r\n    const convertLapTimesToArray = (array) => {\r\n        let lapTimes = []\r\n        for(const index in array) {\r\n            lapTimes = [...lapTimes, +array[index].lapTime[\"$numberDecimal\"]]\r\n        }\r\n        return lapTimes\r\n    }\r\n\r\n    return (\r\n        <>\r\n        <div>\r\n            <svg ref={svgRef} style={{height: `${dimensions.height}`, width: `${dimensions.width}` }}>\r\n                <g style={{transform: `translate(${margin.left}px, ${margin.top}px)`}}>\r\n                    { renderGraphs() }\r\n                    <g className=\"mouseover\">\r\n                        <path className=\"mouse-line\" style={{stroke: \"black\", strokeWidth: \"2px\", opacity: \"1px\"}}></path>\r\n                        <rect width={innerWidth + 5} height={innerHeight} fill={\"none\"} onMouseDown={(mouseClick) => showLine(mouseClick)} pointerEvents={\"all\"} ></rect>\r\n                    </g>\r\n                    <g className=\"x-axis\" /> \r\n                </g>\r\n            </svg>\r\n        </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default GraphicalView\r\n"]},"metadata":{},"sourceType":"module"}