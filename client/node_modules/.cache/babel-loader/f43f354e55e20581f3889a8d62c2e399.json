{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\brand\\\\source\\\\repos\\\\das-server\\\\client\\\\src\\\\components\\\\livePage\\\\GPSMap\\\\GPSMap.js\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, useLayoutEffect, memo, useEffect, useContext } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport './GPSMap.css';\nimport CarLocation from '../CarLocation/CarLocation';\nimport TrackPath from '../TrackPath/TrackPath';\nimport { SocketContext } from '../../../SocketContext';\nimport { updateGPSMapContainerDimensions } from '../../../actions/livePage/gpsActions';\nimport { updateSpeed } from '../../../actions/livePage/monitoringActions';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction GPSMap() {\n  _s();\n\n  const dispatch = useDispatch();\n  const socket = useContext(SocketContext);\n  const GPSMapSvgPathDimensions = useSelector(state => state.gps.GPSMapSvgPathDimensions);\n  const GPSMapContainer = useRef(null);\n  const speed = useSelector(state => state.monitoring.speed);\n  useLayoutEffect(() => {\n    if (GPSMapContainer.current) {\n      const dimensions = {\n        height: GPSMapContainer.current.offsetHeight,\n        width: GPSMapContainer.current.offsetWidth\n      };\n      dispatch(updateGPSMapContainerDimensions(dimensions));\n    }\n\n    GPSMapContainer.current = false;\n  }, [GPSMapContainer, GPSMapSvgPathDimensions]);\n  useLayoutEffect(() => {\n    socket.on('speed', data => {\n      dispatch(updateSpeed(data));\n    });\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"gps-container d-flex\",\n      ref: GPSMapContainer,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"car-speed align-self-start p-2 mt-3\",\n        style: {\n          fontWeight: 700\n        },\n        children: GPSMapSvgPathDimensions.x === 0 ? \"\" : `${parseInt(speed)} mph`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 17\n      }, this), GPSMapSvgPathDimensions.x === 0 ? /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Need More Data... \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 52\n      }, this) : \"\", /*#__PURE__*/_jsxDEV(\"svg\", {\n        style: {\n          width: \"100%\",\n          height: \"100%\"\n        },\n        viewBox: `${GPSMapSvgPathDimensions.x} ${GPSMapSvgPathDimensions.y - 5} ${GPSMapSvgPathDimensions.width} ${GPSMapSvgPathDimensions.height + 10}`,\n        children: [/*#__PURE__*/_jsxDEV(TrackPath, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(CarLocation, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n}\n\n_s(GPSMap, \"j4UrjDCD96hmJ/5wShz3rRtcDbY=\", false, function () {\n  return [useDispatch, useSelector, useSelector];\n});\n\n_c = GPSMap;\nexport default _c2 = /*#__PURE__*/memo(GPSMap);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"GPSMap\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"sources":["C:/Users/brand/source/repos/das-server/client/src/components/livePage/GPSMap/GPSMap.js"],"names":["React","useRef","useLayoutEffect","memo","useEffect","useContext","useSelector","useDispatch","CarLocation","TrackPath","SocketContext","updateGPSMapContainerDimensions","updateSpeed","GPSMap","dispatch","socket","GPSMapSvgPathDimensions","state","gps","GPSMapContainer","speed","monitoring","current","dimensions","height","offsetHeight","width","offsetWidth","on","data","fontWeight","x","parseInt","y"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,MAAf,EAAuBC,eAAvB,EAAwCC,IAAxC,EAA8CC,SAA9C,EAAyDC,UAAzD,QAA0E,OAA1E;AACA,SAAQC,WAAR,EAAqBC,WAArB,QAAuC,aAAvC;AACA,OAAO,cAAP;AACA,OAAOC,WAAP,MAAwB,4BAAxB;AACA,OAAOC,SAAP,MAAsB,wBAAtB;AACA,SAAQC,aAAR,QAA4B,wBAA5B;AACA,SAAQC,+BAAR,QAA8C,sCAA9C;AACA,SAAQC,WAAR,QAA0B,6CAA1B;;;;AAEA,SAASC,MAAT,GAAmB;AAAA;;AAEf,QAAMC,QAAQ,GAAGP,WAAW,EAA5B;AAEA,QAAMQ,MAAM,GAAGV,UAAU,CAACK,aAAD,CAAzB;AAEA,QAAMM,uBAAuB,GAAGV,WAAW,CAAGW,KAAD,IAAWA,KAAK,CAACC,GAAN,CAAUF,uBAAvB,CAA3C;AAEA,QAAMG,eAAe,GAAGlB,MAAM,CAAC,IAAD,CAA9B;AAEA,QAAMmB,KAAK,GAAGd,WAAW,CAAGW,KAAD,IAAWA,KAAK,CAACI,UAAN,CAAiBD,KAA9B,CAAzB;AAEAlB,EAAAA,eAAe,CAAE,MAAM;AACnB,QAAIiB,eAAe,CAACG,OAApB,EAA6B;AACzB,YAAMC,UAAU,GAAG;AAACC,QAAAA,MAAM,EAAEL,eAAe,CAACG,OAAhB,CAAwBG,YAAjC;AAA+CC,QAAAA,KAAK,EAAEP,eAAe,CAACG,OAAhB,CAAwBK;AAA9E,OAAnB;AACAb,MAAAA,QAAQ,CAACH,+BAA+B,CAACY,UAAD,CAAhC,CAAR;AACH;;AACDJ,IAAAA,eAAe,CAACG,OAAhB,GAA0B,KAA1B;AACH,GANc,EAMZ,CAACH,eAAD,EAAkBH,uBAAlB,CANY,CAAf;AAQAd,EAAAA,eAAe,CAAC,MAAM;AAClBa,IAAAA,MAAM,CAACa,EAAP,CAAU,OAAV,EAAoBC,IAAD,IAAU;AACzBf,MAAAA,QAAQ,CAACF,WAAW,CAACiB,IAAD,CAAZ,CAAR;AACD,KAFH;AAGH,GAJc,EAIZ,EAJY,CAAf;AAMA,sBACI;AAAA,2BACI;AAAK,MAAA,SAAS,EAAC,sBAAf;AAAsC,MAAA,GAAG,EAAEV,eAA3C;AAAA,8BACI;AAAK,QAAA,SAAS,EAAC,qCAAf;AAAqD,QAAA,KAAK,EAAE;AAACW,UAAAA,UAAU,EAAE;AAAb,SAA5D;AAAA,kBACKd,uBAAuB,CAACe,CAAxB,KAA8B,CAA9B,GAAkC,EAAlC,GAAwC,GAAEC,QAAQ,CAACZ,KAAD,CAAQ;AAD/D;AAAA;AAAA;AAAA;AAAA,cADJ,EAIKJ,uBAAuB,CAACe,CAAxB,KAA8B,CAA9B,gBAAkC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAAlC,GAAgE,EAJrE,eAKQ;AAAK,QAAA,KAAK,EAAE;AAACL,UAAAA,KAAK,EAAE,MAAR;AAAgBF,UAAAA,MAAM,EAAE;AAAxB,SAAZ;AAA6C,QAAA,OAAO,EAAG,GAAER,uBAAuB,CAACe,CAAE,IAAGf,uBAAuB,CAACiB,CAAxB,GAA4B,CAAE,IAAGjB,uBAAuB,CAACU,KAAM,IAAGV,uBAAuB,CAACQ,MAAxB,GAAiC,EAAG,EAA5L;AAAA,gCACI,QAAC,SAAD;AAAA;AAAA;AAAA;AAAA,gBADJ,eAEI,QAAC,WAAD;AAAA;AAAA;AAAA;AAAA,gBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,cALR;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ,mBADJ;AAcH;;GAxCQX,M;UAEYN,W,EAIeD,W,EAIlBA,W;;;KAVTO,M;AA0CT,kCAAeV,IAAI,CAACU,MAAD,CAAnB","sourcesContent":["import React, {useRef, useLayoutEffect, memo, useEffect, useContext} from 'react';\r\nimport {useSelector, useDispatch} from 'react-redux';\r\nimport './GPSMap.css';\r\nimport CarLocation from '../CarLocation/CarLocation';\r\nimport TrackPath from '../TrackPath/TrackPath';\r\nimport {SocketContext} from '../../../SocketContext';\r\nimport {updateGPSMapContainerDimensions} from '../../../actions/livePage/gpsActions'\r\nimport {updateSpeed} from '../../../actions/livePage/monitoringActions'\r\n\r\nfunction GPSMap () {\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const socket = useContext(SocketContext);\r\n\r\n    const GPSMapSvgPathDimensions = useSelector( (state) => state.gps.GPSMapSvgPathDimensions);\r\n    \r\n    const GPSMapContainer = useRef(null);\r\n\r\n    const speed = useSelector( (state) => state.monitoring.speed);\r\n\r\n    useLayoutEffect( () => {\r\n        if (GPSMapContainer.current) {\r\n            const dimensions = {height: GPSMapContainer.current.offsetHeight, width: GPSMapContainer.current.offsetWidth };\r\n            dispatch(updateGPSMapContainerDimensions(dimensions))\r\n        }\r\n        GPSMapContainer.current = false;\r\n    }, [GPSMapContainer, GPSMapSvgPathDimensions])\r\n\r\n    useLayoutEffect(() => {\r\n        socket.on('speed', (data) => {\r\n            dispatch(updateSpeed(data))\r\n          });\r\n    }, [])\r\n\r\n    return (\r\n        <>\r\n            <div className=\"gps-container d-flex\" ref={GPSMapContainer}>\r\n                <div className=\"car-speed align-self-start p-2 mt-3\" style={{fontWeight: 700}}>\r\n                    {GPSMapSvgPathDimensions.x === 0 ? \"\" : `${parseInt(speed)} mph`}\r\n                </div>\r\n                {GPSMapSvgPathDimensions.x === 0 ? <h2>Need More Data... </h2> : \"\"}\r\n                    <svg style={{width: \"100%\", height: \"100%\"}} viewBox={`${GPSMapSvgPathDimensions.x} ${GPSMapSvgPathDimensions.y - 5} ${GPSMapSvgPathDimensions.width} ${GPSMapSvgPathDimensions.height + 10}`}  >\r\n                        <TrackPath/>\r\n                        <CarLocation/>\r\n                    </svg>\r\n            </div>\r\n        </>\r\n    ); \r\n}\r\n\r\nexport default memo(GPSMap);"]},"metadata":{},"sourceType":"module"}