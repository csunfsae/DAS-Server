{"ast":null,"code":"import _regeneratorRuntime from\"C:/Users/brand/source/repos/DAS-Server/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"C:/Users/brand/source/repos/DAS-Server/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import axios from'axios';export var ADD_NEW_SENSOR_TO_DISPLAYED_SENSORS=\"ADD_NEW_SENSOR_TO_DISPLAYED_SENSORS\";export var ADD_NEW_SESSION_TO_DISPLAYED_SESSIONS=\"ADD_NEW_SESSION_TO_DISPLAYED_SESSIONS\";export var LOAD_SENSORS_FROM_DATABASE=\"LOAD_SENSORS_FROM_DATABASE\";export var LOAD_DEFAULT_SENSOR_DATA=\"LOAD_DEFAULT_SENSOR_DATA\";export var SET_SENSORS_DATA=\"SET_SENSORS_DATA\";export var addNewSensorToDisplayedSensors=function addNewSensorToDisplayedSensors(sensor){return{type:ADD_NEW_SENSOR_TO_DISPLAYED_SENSORS,payload:sensor};};export var addNewSessionToDisplayedSessions=function addNewSessionToDisplayedSessions(session){return{type:ADD_NEW_SESSION_TO_DISPLAYED_SESSIONS,payload:session};};export var loadDefaultSensorData=function loadDefaultSensorData(){return/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(dispatch,getState){var lastDriveDay,sensorsData;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return axios.get(\"http://localhost:4000/api/v1/drive-days\");case 2:lastDriveDay=_context.sent;_context.next=5;return axios.get(\"http://localhost:4000/api/v1/data?dates=\".concat(lastDriveDay.data.date,\"&session_numbers=1&lap_numbers=1,2&sensors=throttlepositions,brakepositions,steeringangles,speeds,batteryvoltages,rltireloads\"));case 5:sensorsData=_context.sent;dispatch(setSensorsData(sensorsData.data));case 7:case\"end\":return _context.stop();}}},_callee);}));return function(_x,_x2){return _ref.apply(this,arguments);};}();};export var setSensorsData=function setSensorsData(sensorsData){return{type:SET_SENSORS_DATA,payload:sensorsData};};","map":{"version":3,"sources":["C:/Users/brand/source/repos/das-server/client/src/actions/historyPage/historicalPageActions.js"],"names":["axios","ADD_NEW_SENSOR_TO_DISPLAYED_SENSORS","ADD_NEW_SESSION_TO_DISPLAYED_SESSIONS","LOAD_SENSORS_FROM_DATABASE","LOAD_DEFAULT_SENSOR_DATA","SET_SENSORS_DATA","addNewSensorToDisplayedSensors","sensor","type","payload","addNewSessionToDisplayedSessions","session","loadDefaultSensorData","dispatch","getState","get","lastDriveDay","data","date","sensorsData","setSensorsData"],"mappings":"qUAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CAEA,MAAO,IAAMC,CAAAA,mCAAmC,CAAG,qCAA5C,CACP,MAAO,IAAMC,CAAAA,qCAAqC,CAAG,uCAA9C,CACP,MAAO,IAAMC,CAAAA,0BAA0B,CAAG,4BAAnC,CACP,MAAO,IAAMC,CAAAA,wBAAwB,CAAG,0BAAjC,CACP,MAAO,IAAMC,CAAAA,gBAAgB,CAAG,kBAAzB,CAEP,MAAO,IAAMC,CAAAA,8BAA8B,CAAG,QAAjCA,CAAAA,8BAAiC,CAAAC,MAAM,QAAK,CACrDC,IAAI,CAAEP,mCAD+C,CAErDQ,OAAO,CAAEF,MAF4C,CAAL,EAA7C,CAKP,MAAO,IAAMG,CAAAA,gCAAgC,CAAG,QAAnCA,CAAAA,gCAAmC,CAAAC,OAAO,QAAK,CACxDH,IAAI,CAAEN,qCADkD,CAExDO,OAAO,CAAEE,OAF+C,CAAL,EAAhD,CAKP,MAAO,IAAMC,CAAAA,qBAAqB,CAAG,QAAxBA,CAAAA,qBAAwB,kGAAM,iBAAOC,QAAP,CAAiBC,QAAjB,qKACZd,CAAAA,KAAK,CAACe,GAAN,CAAU,yCAAV,CADY,QACjCC,YADiC,qCAEbhB,CAAAA,KAAK,CAACe,GAAN,mDAAqDC,YAAY,CAACC,IAAb,CAAkBC,IAAvE,kIAFa,QAEjCC,WAFiC,eAGvCN,QAAQ,CAACO,cAAc,CAACD,WAAW,CAACF,IAAb,CAAf,CAAR,CAHuC,sDAAN,oEAA9B,CAMP,MAAO,IAAMG,CAAAA,cAAc,CAAG,QAAjBA,CAAAA,cAAiB,CAAAD,WAAW,QAAK,CAC1CX,IAAI,CAAEH,gBADoC,CAE1CI,OAAO,CAAEU,WAFiC,CAAL,EAAlC","sourcesContent":["import axios from 'axios';\r\n\r\nexport const ADD_NEW_SENSOR_TO_DISPLAYED_SENSORS = \"ADD_NEW_SENSOR_TO_DISPLAYED_SENSORS\";\r\nexport const ADD_NEW_SESSION_TO_DISPLAYED_SESSIONS = \"ADD_NEW_SESSION_TO_DISPLAYED_SESSIONS\";\r\nexport const LOAD_SENSORS_FROM_DATABASE = \"LOAD_SENSORS_FROM_DATABASE\";\r\nexport const LOAD_DEFAULT_SENSOR_DATA = \"LOAD_DEFAULT_SENSOR_DATA\";\r\nexport const SET_SENSORS_DATA = \"SET_SENSORS_DATA\";\r\n\r\nexport const addNewSensorToDisplayedSensors = sensor => ({\r\n    type: ADD_NEW_SENSOR_TO_DISPLAYED_SENSORS, \r\n    payload: sensor\r\n})\r\n\r\nexport const addNewSessionToDisplayedSessions = session => ({\r\n    type: ADD_NEW_SESSION_TO_DISPLAYED_SESSIONS, \r\n    payload: session\r\n})\r\n\r\nexport const loadDefaultSensorData = () => async (dispatch, getState) => {\r\n    const lastDriveDay = await axios.get(\"http://localhost:4000/api/v1/drive-days\");\r\n    const sensorsData = await axios.get(`http://localhost:4000/api/v1/data?dates=${lastDriveDay.data.date}&session_numbers=1&lap_numbers=1,2&sensors=throttlepositions,brakepositions,steeringangles,speeds,batteryvoltages,rltireloads`);\r\n    dispatch(setSensorsData(sensorsData.data))\r\n}\r\n\r\nexport const setSensorsData = sensorsData => ({\r\n    type: SET_SENSORS_DATA,\r\n    payload: sensorsData\r\n})\r\n\r\n"]},"metadata":{},"sourceType":"module"}