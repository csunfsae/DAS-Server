{"ast":null,"code":"import parseCode from './parseCode';\nimport extend from './extend';\nimport projections from './projections';\nimport { sphere as dc_sphere, eccentricity as dc_eccentricity } from './deriveConstants';\nimport Datum from './constants/Datum';\nimport datum from './datum';\nimport match from './match';\nimport { getNadgrids } from \"./nadgrid\";\n\nfunction Projection(srsCode, callback) {\n  if (!(this instanceof Projection)) {\n    return new Projection(srsCode);\n  }\n\n  callback = callback || function (error) {\n    if (error) {\n      throw error;\n    }\n  };\n\n  var json = parseCode(srsCode);\n\n  if (typeof json !== 'object') {\n    callback(srsCode);\n    return;\n  }\n\n  var ourProj = Projection.projections.get(json.projName);\n\n  if (!ourProj) {\n    callback(srsCode);\n    return;\n  }\n\n  if (json.datumCode && json.datumCode !== 'none') {\n    var datumDef = match(Datum, json.datumCode);\n\n    if (datumDef) {\n      json.datum_params = json.datum_params || (datumDef.towgs84 ? datumDef.towgs84.split(',') : null);\n      json.ellps = datumDef.ellipse;\n      json.datumName = datumDef.datumName ? datumDef.datumName : json.datumCode;\n    }\n  }\n\n  json.k0 = json.k0 || 1.0;\n  json.axis = json.axis || 'enu';\n  json.ellps = json.ellps || 'wgs84';\n  json.lat1 = json.lat1 || json.lat0; // Lambert_Conformal_Conic_1SP, for example, needs this\n\n  var sphere_ = dc_sphere(json.a, json.b, json.rf, json.ellps, json.sphere);\n  var ecc = dc_eccentricity(sphere_.a, sphere_.b, sphere_.rf, json.R_A);\n  var nadgrids = getNadgrids(json.nadgrids);\n  var datumObj = json.datum || datum(json.datumCode, json.datum_params, sphere_.a, sphere_.b, ecc.es, ecc.ep2, nadgrids);\n  extend(this, json); // transfer everything over from the projection because we don't know what we'll need\n\n  extend(this, ourProj); // transfer all the methods from the projection\n  // copy the 4 things over we calulated in deriveConstants.sphere\n\n  this.a = sphere_.a;\n  this.b = sphere_.b;\n  this.rf = sphere_.rf;\n  this.sphere = sphere_.sphere; // copy the 3 things we calculated in deriveConstants.eccentricity\n\n  this.es = ecc.es;\n  this.e = ecc.e;\n  this.ep2 = ecc.ep2; // add in the datum object\n\n  this.datum = datumObj; // init the projection\n\n  this.init(); // legecy callback from back in the day when it went to spatialreference.org\n\n  callback(null, this);\n}\n\nProjection.projections = projections;\nProjection.projections.start();\nexport default Projection;","map":{"version":3,"sources":["C:/Users/brand/source/repos/DAS-Server/client/node_modules/proj4/lib/Proj.js"],"names":["parseCode","extend","projections","sphere","dc_sphere","eccentricity","dc_eccentricity","Datum","datum","match","getNadgrids","Projection","srsCode","callback","error","json","ourProj","get","projName","datumCode","datumDef","datum_params","towgs84","split","ellps","ellipse","datumName","k0","axis","lat1","lat0","sphere_","a","b","rf","ecc","R_A","nadgrids","datumObj","es","ep2","e","init","start"],"mappings":"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","sourcesContent":["import parseCode from './parseCode';\nimport extend from './extend';\nimport projections from './projections';\nimport {sphere as dc_sphere, eccentricity as dc_eccentricity} from './deriveConstants';\nimport Datum from './constants/Datum';\nimport datum from './datum';\nimport match from './match';\nimport {getNadgrids} from \"./nadgrid\";\n\nfunction Projection(srsCode,callback) {\n  if (!(this instanceof Projection)) {\n    return new Projection(srsCode);\n  }\n  callback = callback || function(error){\n    if(error){\n      throw error;\n    }\n  };\n  var json = parseCode(srsCode);\n  if(typeof json !== 'object'){\n    callback(srsCode);\n    return;\n  }\n  var ourProj = Projection.projections.get(json.projName);\n  if(!ourProj){\n    callback(srsCode);\n    return;\n  }\n  if (json.datumCode && json.datumCode !== 'none') {\n    var datumDef = match(Datum, json.datumCode);\n    if (datumDef) {\n      json.datum_params = json.datum_params || (datumDef.towgs84 ? datumDef.towgs84.split(',') : null);\n      json.ellps = datumDef.ellipse;\n      json.datumName = datumDef.datumName ? datumDef.datumName : json.datumCode;\n    }\n  }\n  json.k0 = json.k0 || 1.0;\n  json.axis = json.axis || 'enu';\n  json.ellps = json.ellps || 'wgs84';\n  json.lat1 = json.lat1 || json.lat0; // Lambert_Conformal_Conic_1SP, for example, needs this\n\n  var sphere_ = dc_sphere(json.a, json.b, json.rf, json.ellps, json.sphere);\n  var ecc = dc_eccentricity(sphere_.a, sphere_.b, sphere_.rf, json.R_A);\n  var nadgrids = getNadgrids(json.nadgrids);\n  var datumObj = json.datum || datum(json.datumCode, json.datum_params, sphere_.a, sphere_.b, ecc.es, ecc.ep2,\n    nadgrids);\n\n  extend(this, json); // transfer everything over from the projection because we don't know what we'll need\n  extend(this, ourProj); // transfer all the methods from the projection\n\n  // copy the 4 things over we calulated in deriveConstants.sphere\n  this.a = sphere_.a;\n  this.b = sphere_.b;\n  this.rf = sphere_.rf;\n  this.sphere = sphere_.sphere;\n\n  // copy the 3 things we calculated in deriveConstants.eccentricity\n  this.es = ecc.es;\n  this.e = ecc.e;\n  this.ep2 = ecc.ep2;\n\n  // add in the datum object\n  this.datum = datumObj;\n\n  // init the projection\n  this.init();\n\n  // legecy callback from back in the day when it went to spatialreference.org\n  callback(null, this);\n\n}\nProjection.projections = projections;\nProjection.projections.start();\nexport default Projection;\n"]},"metadata":{},"sourceType":"module"}