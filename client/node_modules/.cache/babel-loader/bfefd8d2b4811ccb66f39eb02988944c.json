{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\brand\\\\source\\\\repos\\\\DAS-Server\\\\client\\\\src\\\\components\\\\historyPage\\\\sessionView\\\\LapTimes\\\\LapTimes.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { useSelector } from 'react-redux';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction LapTimes() {\n  _s();\n\n  const selectedDriveDate = useSelector(state => state.historyModal.selectedDriveDate);\n  const sessionNumber = useSelector(state => state.historyModal.selectedSessionNumber);\n  const lapNumber = useSelector(state => state.historyModal.selectedLapNumber);\n  const selectedDriveDateIndex = useSelector(state => state.historyModal.selectedDriveDateIndex);\n  const allDriveDays = useSelector(state => state.historyModal.driveDays);\n  const lastSearchedDriveDays = allDriveDays[allDriveDays.length - 1];\n  let bestLap = [];\n  let laps = [];\n\n  if (selectedDriveDate !== \"\" && sessionNumber !== -1 && lapNumber !== -1) {\n    laps = lastSearchedDriveDays[selectedDriveDateIndex][\"sessions\"][sessionNumber - 1][\"laps\"];\n    bestLap = getBestLapTime(laps);\n  }\n\n  function getBestLapTime(laps) {\n    let bestLapTime = laps[0];\n\n    for (let i = 0; i < laps.length; i++) {\n      if (bestLapTime.lap_time > laps[i].lap_time) {\n        bestLapTime = laps[i];\n      }\n    }\n\n    return bestLapTime;\n  }\n\n  function renderLapTimes() {\n    return laps.map((lap, index) => /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\" L\", index + 1, \": \", lap.lap_time]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 17\n    }, this));\n  }\n\n  function isRendered() {\n    if (selectedDriveDate !== \"\" && sessionNumber !== -1 && lapNumber !== -1) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Lap Times\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: [\"Best Lap: \", isRendered() ? `${bestLap.lap_time} (L${bestLap.lap_number})` : \"\", \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 13\n    }, this), isRendered() ? renderLapTimes() : \"\"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 9\n  }, this);\n}\n\n_s(LapTimes, \"4CiGZCp3UPWt69HwgzMbAhWPqsY=\", false, function () {\n  return [useSelector, useSelector, useSelector, useSelector, useSelector];\n});\n\n_c = LapTimes;\nexport default LapTimes;\n\nvar _c;\n\n$RefreshReg$(_c, \"LapTimes\");","map":{"version":3,"sources":["C:/Users/brand/source/repos/DAS-Server/client/src/components/historyPage/sessionView/LapTimes/LapTimes.js"],"names":["React","useSelector","LapTimes","selectedDriveDate","state","historyModal","sessionNumber","selectedSessionNumber","lapNumber","selectedLapNumber","selectedDriveDateIndex","allDriveDays","driveDays","lastSearchedDriveDays","length","bestLap","laps","getBestLapTime","bestLapTime","i","lap_time","renderLapTimes","map","lap","index","isRendered","lap_number"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,WAAR,QAA0B,aAA1B;;;AAEA,SAASC,QAAT,GAAoB;AAAA;;AAChB,QAAMC,iBAAiB,GAAGF,WAAW,CAAGG,KAAD,IAAWA,KAAK,CAACC,YAAN,CAAmBF,iBAAhC,CAArC;AACA,QAAMG,aAAa,GAAGL,WAAW,CAAGG,KAAD,IAAWA,KAAK,CAACC,YAAN,CAAmBE,qBAAhC,CAAjC;AACA,QAAMC,SAAS,GAAGP,WAAW,CAAGG,KAAD,IAAWA,KAAK,CAACC,YAAN,CAAmBI,iBAAhC,CAA7B;AAEA,QAAMC,sBAAsB,GAAGT,WAAW,CAAGG,KAAD,IAAWA,KAAK,CAACC,YAAN,CAAmBK,sBAAhC,CAA1C;AACA,QAAMC,YAAY,GAAGV,WAAW,CAAGG,KAAD,IAAWA,KAAK,CAACC,YAAN,CAAmBO,SAAhC,CAAhC;AACA,QAAMC,qBAAqB,GAAGF,YAAY,CAACA,YAAY,CAACG,MAAb,GAAqB,CAAtB,CAA1C;AAEA,MAAIC,OAAO,GAAG,EAAd;AACA,MAAIC,IAAI,GAAG,EAAX;;AAEA,MAAIb,iBAAiB,KAAK,EAAtB,IAA4BG,aAAa,KAAK,CAAC,CAA/C,IAAoDE,SAAS,KAAK,CAAC,CAAvE,EAA0E;AACtEQ,IAAAA,IAAI,GAAGH,qBAAqB,CAACH,sBAAD,CAArB,CAA8C,UAA9C,EAA0DJ,aAAa,GAAG,CAA1E,EAA6E,MAA7E,CAAP;AACAS,IAAAA,OAAO,GAAGE,cAAc,CAACD,IAAD,CAAxB;AACH;;AAED,WAASC,cAAT,CAAwBD,IAAxB,EAA8B;AAC1B,QAAIE,WAAW,GAAGF,IAAI,CAAC,CAAD,CAAtB;;AACA,SAAK,IAAIG,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,IAAI,CAACF,MAAzB,EAAiCK,CAAC,EAAlC,EAAsC;AAClC,UAAID,WAAW,CAACE,QAAZ,GAAuBJ,IAAI,CAACG,CAAD,CAAJ,CAAQC,QAAnC,EAA6C;AACzCF,QAAAA,WAAW,GAAGF,IAAI,CAACG,CAAD,CAAlB;AACH;AACJ;;AACD,WAAOD,WAAP;AACH;;AAED,WAASG,cAAT,GAA0B;AACtB,WACIL,IAAI,CAACM,GAAL,CAAU,CAACC,GAAD,EAAMC,KAAN,kBACN;AAAA,uBAAMA,KAAK,GAAG,CAAd,QAAmBD,GAAG,CAACH,QAAvB;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,CADJ;AAKH;;AAED,WAASK,UAAT,GAAsB;AAClB,QAAItB,iBAAiB,KAAK,EAAtB,IAA4BG,aAAa,KAAK,CAAC,CAA/C,IAAoDE,SAAS,KAAK,CAAC,CAAvE,EAA0E;AACtE,aAAO,IAAP;AACH,KAFD,MAEO;AACH,aAAO,KAAP;AACH;AAEJ;;AAED,sBAEI;AAAA,4BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI;AAAA,+BAAeiB,UAAU,KAAM,GAAEV,OAAO,CAACK,QAAS,MAAKL,OAAO,CAACW,UAAW,GAAjD,GAAsD,EAA/E;AAAA;AAAA;AAAA;AAAA;AAAA,YAFJ,EAGSD,UAAU,KAAKJ,cAAc,EAAnB,GAAwB,EAH3C;AAAA;AAAA;AAAA;AAAA;AAAA,UAFJ;AAQH;;GApDQnB,Q;UACqBD,W,EACJA,W,EACJA,W,EAEaA,W,EACVA,W;;;KANhBC,Q;AAsDT,eAAeA,QAAf","sourcesContent":["import React from 'react'\r\nimport {useSelector} from 'react-redux';\r\n\r\nfunction LapTimes() {\r\n    const selectedDriveDate = useSelector( (state) => state.historyModal.selectedDriveDate);\r\n    const sessionNumber = useSelector( (state) => state.historyModal.selectedSessionNumber);\r\n    const lapNumber = useSelector( (state) => state.historyModal.selectedLapNumber);\r\n\r\n    const selectedDriveDateIndex = useSelector( (state) => state.historyModal.selectedDriveDateIndex);\r\n    const allDriveDays = useSelector( (state) => state.historyModal.driveDays);\r\n    const lastSearchedDriveDays = allDriveDays[allDriveDays.length -1];\r\n\r\n    let bestLap = [];\r\n    let laps = [];\r\n\r\n    if( selectedDriveDate !== \"\" && sessionNumber !== -1 && lapNumber !== -1) {\r\n        laps = lastSearchedDriveDays[selectedDriveDateIndex][\"sessions\"][sessionNumber - 1][\"laps\"];\r\n        bestLap = getBestLapTime(laps);\r\n    }\r\n\r\n    function getBestLapTime(laps) {\r\n        let bestLapTime = laps[0];\r\n        for (let i = 0; i < laps.length; i++) {\r\n            if (bestLapTime.lap_time > laps[i].lap_time) {\r\n                bestLapTime = laps[i];\r\n            }\r\n        }\r\n        return bestLapTime;\r\n    }\r\n\r\n    function renderLapTimes() {\r\n        return (\r\n            laps.map( (lap, index) =>\r\n                <p> L{index + 1}: {lap.lap_time}</p>\r\n            )\r\n        )\r\n    }\r\n\r\n    function isRendered() {\r\n        if (selectedDriveDate !== \"\" && sessionNumber !== -1 && lapNumber !== -1) {\r\n            return true; \r\n        } else {\r\n            return false;\r\n        }\r\n        \r\n    }\r\n\r\n    return (\r\n\r\n        <div>\r\n            <h2>Lap Times</h2>\r\n            <h3>Best Lap: {isRendered() ? `${bestLap.lap_time} (L${bestLap.lap_number})` : \"\"} </h3>\r\n                {isRendered() ? renderLapTimes() : \"\"}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default LapTimes\r\n"]},"metadata":{},"sourceType":"module"}