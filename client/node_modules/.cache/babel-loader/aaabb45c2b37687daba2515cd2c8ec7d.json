{"ast":null,"code":"import _slicedToArray from\"C:/Users/brand/source/repos/DAS-Server/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useEffect,useLayoutEffect,useRef,useContext}from'react';import{useSelector,useDispatch}from'react-redux';import{select}from'd3';import{SocketContext}from'../../../SocketContext';import proj4 from'proj4';import{updateCarLocation,updateFirstLap,addCoordinateToGPSTrack}from'../../../actions/livePage/gpsActions';import{updateLapCount}from'../../../actions/livePage/lapTimesActions';import{jsx as _jsx}from\"react/jsx-runtime\";function CarLocation(){var GPSMapSvgPathDimensions=useSelector(function(state){return state.gps.GPSMapSvgPathDimensions;});var firstLap=useSelector(function(state){return state.gps.firstLap;});var GPSMapContainerDimensions=useSelector(function(state){return state.gps.GPSMapContainerDimensions;});var socket=useContext(SocketContext);var carLocation=useSelector(function(state){return state.gps.carLocation;});var dispatch=useDispatch();var carCircleRef=useRef(null);var oldCarLocation=useRef();var startLocation=useSelector(function(state){return state.gps.startLocation;});useEffect(function(){oldCarLocation.current=carLocation;});var previousCarLocation=oldCarLocation.current;useLayoutEffect(function(){if(carCircleRef.current){var carCircle=select(carCircleRef.current);carCircle.attr(\"cx\",carLocation.x).attr(\"cy\",carLocation.y).attr(\"fill\",\"red\").attr(\"r\",7);}},[carCircleRef]);useEffect(function(){if(carCircleRef.current){var carCircle=select(carCircleRef.current);carCircle.attr(\"cx\",carLocation.x).attr(\"cy\",carLocation.y);}},[carLocation]);useEffect(function(){socket.on('gps_data',function(data){if(GPSMapContainerDimensions.height!==0){var carCoordinates=getCarXYCoordinates(data);if(firstLap){dispatch(addCoordinateToGPSTrack({x:carCoordinates.x,y:carCoordinates.y}));}dispatch(updateCarLocation(carCoordinates));}});},[GPSMapContainerDimensions,GPSMapSvgPathDimensions]);useEffect(function(){if(oldCarLocation.current&&previousCarLocation!==undefined){var isNewLap=checkIfNewLap();if(firstLap&&isNewLap){dispatch(updateFirstLap(false));dispatch(updateLapCount());}else if(isNewLap){dispatch(updateLapCount());}}},[carLocation]);function checkIfNewLap(){if(previousCarLocation.verticalDisplacement<0&&carLocation.verticalDisplacement>=0){return true;}return false;}function getCarXYCoordinates(carCoordinates){if(GPSMapContainerDimensions.height!==0){var _proj=proj4(\"EPSG:4326\",\"EPSG:3857\",[parseFloat(carCoordinates.x.toFixed(7)),parseFloat(carCoordinates.y.toFixed(7))]),_proj2=_slicedToArray(_proj,2),x1=_proj2[0],y1=_proj2[1];var verticalOffset=GPSMapContainerDimensions.height;var horizontalOffset=parseFloat(GPSMapContainerDimensions.width/2);var verticalDisplacement=parseFloat(parseFloat(y1).toFixed(2)-parseFloat(startLocation.y)).toFixed(2);var horizontalDisplacement=parseFloat(parseFloat(x1).toFixed(2)-parseFloat(startLocation.x)).toFixed(2);var x=parseFloat(parseFloat(horizontalOffset)+parseFloat(horizontalDisplacement)).toFixed(2);var y=parseFloat(parseFloat(verticalOffset)-(parseFloat(horizontalOffset)+parseFloat(verticalDisplacement))).toFixed(2);return{x:x,y:y,verticalDisplacement:verticalDisplacement};}}return/*#__PURE__*/_jsx(\"circle\",{ref:carCircleRef});}export default CarLocation;","map":{"version":3,"sources":["C:/Users/brand/source/repos/das-server/client/src/components/livePage/CarLocation/CarLocation.js"],"names":["React","useEffect","useLayoutEffect","useRef","useContext","useSelector","useDispatch","select","SocketContext","proj4","updateCarLocation","updateFirstLap","addCoordinateToGPSTrack","updateLapCount","CarLocation","GPSMapSvgPathDimensions","state","gps","firstLap","GPSMapContainerDimensions","socket","carLocation","dispatch","carCircleRef","oldCarLocation","startLocation","current","previousCarLocation","carCircle","attr","x","y","on","data","height","carCoordinates","getCarXYCoordinates","undefined","isNewLap","checkIfNewLap","verticalDisplacement","parseFloat","toFixed","x1","y1","verticalOffset","horizontalOffset","width","horizontalDisplacement"],"mappings":"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","sourcesContent":["import React, {useEffect, useLayoutEffect, useRef, useContext} from 'react';\r\nimport {useSelector, useDispatch} from 'react-redux';\r\nimport {select} from 'd3';\r\nimport {SocketContext} from '../../../SocketContext';\r\nimport proj4 from 'proj4';\r\nimport {updateCarLocation, updateFirstLap, addCoordinateToGPSTrack} from '../../../actions/livePage/gpsActions'\r\nimport {updateLapCount}  from '../../../actions/livePage/lapTimesActions'\r\n\r\nfunction CarLocation() {  \r\n\r\n    const GPSMapSvgPathDimensions = useSelector( (state) => state.gps.GPSMapSvgPathDimensions);\r\n\r\n    const firstLap = useSelector( (state) => state.gps.firstLap);\r\n\r\n    const GPSMapContainerDimensions = useSelector( (state) => state.gps.GPSMapContainerDimensions);\r\n\r\n    const socket = useContext(SocketContext);\r\n\r\n    const carLocation = useSelector( (state) => state.gps.carLocation);\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const carCircleRef = useRef(null);\r\n    \r\n    const oldCarLocation = useRef();\r\n\r\n    const startLocation = useSelector( (state) => state.gps.startLocation);\r\n\r\n\r\n    useEffect( () => {\r\n        oldCarLocation.current = carLocation;\r\n    })\r\n\r\n    const previousCarLocation = oldCarLocation.current;\r\n\r\n\r\n    useLayoutEffect( () => { \r\n        if(carCircleRef.current) {\r\n            const carCircle = select(carCircleRef.current);\r\n            carCircle.attr(\"cx\", carLocation.x).attr(\"cy\", carLocation.y).attr(\"fill\", \"red\").attr(\"r\", 7);\r\n        }\r\n    }, [carCircleRef]);\r\n\r\n    useEffect( () => {\r\n        if(carCircleRef.current) {\r\n            const carCircle = select(carCircleRef.current);\r\n            carCircle.attr(\"cx\", carLocation.x).attr(\"cy\", carLocation.y);\r\n        }\r\n\r\n    }, [carLocation])\r\n\r\n    useEffect( () => {\r\n        socket.on('gps_data', (data) => {\r\n            \r\n            if (GPSMapContainerDimensions.height !== 0) { \r\n\r\n                const carCoordinates = getCarXYCoordinates(data);\r\n\r\n                if(firstLap) {\r\n                    dispatch(addCoordinateToGPSTrack({x: carCoordinates.x, y: carCoordinates.y}))\r\n                }\r\n\r\n                dispatch(updateCarLocation(carCoordinates))\r\n            }\r\n        });\r\n\r\n    }, [GPSMapContainerDimensions, GPSMapSvgPathDimensions])\r\n\r\n    useEffect( () => {\r\n\r\n        if(oldCarLocation.current && previousCarLocation !== undefined) {\r\n            const isNewLap = checkIfNewLap();\r\n\r\n            if(firstLap && isNewLap) {\r\n                dispatch(updateFirstLap(false))\r\n                dispatch(updateLapCount())\r\n            } else if (isNewLap) {\r\n                dispatch(updateLapCount())\r\n            }\r\n        }\r\n       \r\n    }, [carLocation])\r\n\r\n    function checkIfNewLap() {\r\n        if (previousCarLocation.verticalDisplacement < 0 && carLocation.verticalDisplacement >= 0) {\r\n            return true;\r\n        } \r\n\r\n        return false;\r\n    }\r\n\r\n    function getCarXYCoordinates (carCoordinates) {\r\n\r\n        if (GPSMapContainerDimensions.height !== 0 ) {\r\n      \r\n          const [x1,y1] = proj4(\"EPSG:4326\", \"EPSG:3857\", [ parseFloat(carCoordinates.x.toFixed(7)),  parseFloat(carCoordinates.y.toFixed(7))] );\r\n          \r\n          const verticalOffset = (GPSMapContainerDimensions.height);\r\n                    \r\n          const horizontalOffset = parseFloat(GPSMapContainerDimensions.width / 2);\r\n         \r\n          const verticalDisplacement = parseFloat(parseFloat(y1).toFixed(2) - parseFloat(startLocation.y)).toFixed(2);\r\n          \r\n          const horizontalDisplacement = parseFloat(parseFloat(x1).toFixed(2) - parseFloat(startLocation.x)).toFixed(2);\r\n        \r\n          const x = parseFloat(parseFloat(horizontalOffset) + parseFloat(horizontalDisplacement)).toFixed(2);\r\n          \r\n          const y = parseFloat(parseFloat(verticalOffset) - (parseFloat(horizontalOffset) + parseFloat(verticalDisplacement))).toFixed(2);\r\n        \r\n          return  {\r\n            x: x,\r\n            y: y,\r\n            verticalDisplacement: verticalDisplacement\r\n          }\r\n        }\r\n      }\r\n\r\n    return (\r\n        <circle ref={carCircleRef}></circle>\r\n    )\r\n}\r\n\r\nexport default CarLocation;\r\n"]},"metadata":{},"sourceType":"module"}