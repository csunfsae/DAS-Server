{"ast":null,"code":"import e0fn from '../common/e0fn';\nimport e1fn from '../common/e1fn';\nimport e2fn from '../common/e2fn';\nimport e3fn from '../common/e3fn';\nimport adjust_lon from '../common/adjust_lon';\nimport adjust_lat from '../common/adjust_lat';\nimport mlfn from '../common/mlfn';\nimport { EPSLN } from '../constants/values';\nimport gN from '../common/gN';\nvar MAX_ITER = 20;\nexport function init() {\n  /* Place parameters in static storage for common use\n      -------------------------------------------------*/\n  this.temp = this.b / this.a;\n  this.es = 1 - Math.pow(this.temp, 2); // devait etre dans tmerc.js mais n y est pas donc je commente sinon retour de valeurs nulles\n\n  this.e = Math.sqrt(this.es);\n  this.e0 = e0fn(this.es);\n  this.e1 = e1fn(this.es);\n  this.e2 = e2fn(this.es);\n  this.e3 = e3fn(this.es);\n  this.ml0 = this.a * mlfn(this.e0, this.e1, this.e2, this.e3, this.lat0); //si que des zeros le calcul ne se fait pas\n}\n/* Polyconic forward equations--mapping lat,long to x,y\n    ---------------------------------------------------*/\n\nexport function forward(p) {\n  var lon = p.x;\n  var lat = p.y;\n  var x, y, el;\n  var dlon = adjust_lon(lon - this.long0);\n  el = dlon * Math.sin(lat);\n\n  if (this.sphere) {\n    if (Math.abs(lat) <= EPSLN) {\n      x = this.a * dlon;\n      y = -1 * this.a * this.lat0;\n    } else {\n      x = this.a * Math.sin(el) / Math.tan(lat);\n      y = this.a * (adjust_lat(lat - this.lat0) + (1 - Math.cos(el)) / Math.tan(lat));\n    }\n  } else {\n    if (Math.abs(lat) <= EPSLN) {\n      x = this.a * dlon;\n      y = -1 * this.ml0;\n    } else {\n      var nl = gN(this.a, this.e, Math.sin(lat)) / Math.tan(lat);\n      x = nl * Math.sin(el);\n      y = this.a * mlfn(this.e0, this.e1, this.e2, this.e3, lat) - this.ml0 + nl * (1 - Math.cos(el));\n    }\n  }\n\n  p.x = x + this.x0;\n  p.y = y + this.y0;\n  return p;\n}\n/* Inverse equations\n  -----------------*/\n\nexport function inverse(p) {\n  var lon, lat, x, y, i;\n  var al, bl;\n  var phi, dphi;\n  x = p.x - this.x0;\n  y = p.y - this.y0;\n\n  if (this.sphere) {\n    if (Math.abs(y + this.a * this.lat0) <= EPSLN) {\n      lon = adjust_lon(x / this.a + this.long0);\n      lat = 0;\n    } else {\n      al = this.lat0 + y / this.a;\n      bl = x * x / this.a / this.a + al * al;\n      phi = al;\n      var tanphi;\n\n      for (i = MAX_ITER; i; --i) {\n        tanphi = Math.tan(phi);\n        dphi = -1 * (al * (phi * tanphi + 1) - phi - 0.5 * (phi * phi + bl) * tanphi) / ((phi - al) / tanphi - 1);\n        phi += dphi;\n\n        if (Math.abs(dphi) <= EPSLN) {\n          lat = phi;\n          break;\n        }\n      }\n\n      lon = adjust_lon(this.long0 + Math.asin(x * Math.tan(phi) / this.a) / Math.sin(lat));\n    }\n  } else {\n    if (Math.abs(y + this.ml0) <= EPSLN) {\n      lat = 0;\n      lon = adjust_lon(this.long0 + x / this.a);\n    } else {\n      al = (this.ml0 + y) / this.a;\n      bl = x * x / this.a / this.a + al * al;\n      phi = al;\n      var cl, mln, mlnp, ma;\n      var con;\n\n      for (i = MAX_ITER; i; --i) {\n        con = this.e * Math.sin(phi);\n        cl = Math.sqrt(1 - con * con) * Math.tan(phi);\n        mln = this.a * mlfn(this.e0, this.e1, this.e2, this.e3, phi);\n        mlnp = this.e0 - 2 * this.e1 * Math.cos(2 * phi) + 4 * this.e2 * Math.cos(4 * phi) - 6 * this.e3 * Math.cos(6 * phi);\n        ma = mln / this.a;\n        dphi = (al * (cl * ma + 1) - ma - 0.5 * cl * (ma * ma + bl)) / (this.es * Math.sin(2 * phi) * (ma * ma + bl - 2 * al * ma) / (4 * cl) + (al - ma) * (cl * mlnp - 2 / Math.sin(2 * phi)) - mlnp);\n        phi -= dphi;\n\n        if (Math.abs(dphi) <= EPSLN) {\n          lat = phi;\n          break;\n        }\n      } //lat=phi4z(this.e,this.e0,this.e1,this.e2,this.e3,al,bl,0,0);\n\n\n      cl = Math.sqrt(1 - this.es * Math.pow(Math.sin(lat), 2)) * Math.tan(lat);\n      lon = adjust_lon(this.long0 + Math.asin(x * cl / this.a) / Math.sin(lat));\n    }\n  }\n\n  p.x = lon;\n  p.y = lat;\n  return p;\n}\nexport var names = [\"Polyconic\", \"poly\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names\n};","map":{"version":3,"sources":["C:/Users/brand/source/repos/DAS-Server/client/node_modules/proj4/lib/projections/poly.js"],"names":["e0fn","e1fn","e2fn","e3fn","adjust_lon","adjust_lat","mlfn","EPSLN","gN","MAX_ITER","init","temp","b","a","es","Math","pow","e","sqrt","e0","e1","e2","e3","ml0","lat0","forward","p","lon","x","lat","y","el","dlon","long0","sin","sphere","abs","tan","cos","nl","x0","y0","inverse","i","al","bl","phi","dphi","tanphi","asin","cl","mln","mlnp","ma","con","names"],"mappings":"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","sourcesContent":["import e0fn from '../common/e0fn';\nimport e1fn from '../common/e1fn';\nimport e2fn from '../common/e2fn';\nimport e3fn from '../common/e3fn';\nimport adjust_lon from '../common/adjust_lon';\nimport adjust_lat from '../common/adjust_lat';\nimport mlfn from '../common/mlfn';\nimport {EPSLN} from '../constants/values';\n\nimport gN from '../common/gN';\nvar MAX_ITER = 20;\n\nexport function init() {\n  /* Place parameters in static storage for common use\n      -------------------------------------------------*/\n  this.temp = this.b / this.a;\n  this.es = 1 - Math.pow(this.temp, 2); // devait etre dans tmerc.js mais n y est pas donc je commente sinon retour de valeurs nulles\n  this.e = Math.sqrt(this.es);\n  this.e0 = e0fn(this.es);\n  this.e1 = e1fn(this.es);\n  this.e2 = e2fn(this.es);\n  this.e3 = e3fn(this.es);\n  this.ml0 = this.a * mlfn(this.e0, this.e1, this.e2, this.e3, this.lat0); //si que des zeros le calcul ne se fait pas\n}\n\n/* Polyconic forward equations--mapping lat,long to x,y\n    ---------------------------------------------------*/\nexport function forward(p) {\n  var lon = p.x;\n  var lat = p.y;\n  var x, y, el;\n  var dlon = adjust_lon(lon - this.long0);\n  el = dlon * Math.sin(lat);\n  if (this.sphere) {\n    if (Math.abs(lat) <= EPSLN) {\n      x = this.a * dlon;\n      y = -1 * this.a * this.lat0;\n    }\n    else {\n      x = this.a * Math.sin(el) / Math.tan(lat);\n      y = this.a * (adjust_lat(lat - this.lat0) + (1 - Math.cos(el)) / Math.tan(lat));\n    }\n  }\n  else {\n    if (Math.abs(lat) <= EPSLN) {\n      x = this.a * dlon;\n      y = -1 * this.ml0;\n    }\n    else {\n      var nl = gN(this.a, this.e, Math.sin(lat)) / Math.tan(lat);\n      x = nl * Math.sin(el);\n      y = this.a * mlfn(this.e0, this.e1, this.e2, this.e3, lat) - this.ml0 + nl * (1 - Math.cos(el));\n    }\n\n  }\n  p.x = x + this.x0;\n  p.y = y + this.y0;\n  return p;\n}\n\n/* Inverse equations\n  -----------------*/\nexport function inverse(p) {\n  var lon, lat, x, y, i;\n  var al, bl;\n  var phi, dphi;\n  x = p.x - this.x0;\n  y = p.y - this.y0;\n\n  if (this.sphere) {\n    if (Math.abs(y + this.a * this.lat0) <= EPSLN) {\n      lon = adjust_lon(x / this.a + this.long0);\n      lat = 0;\n    }\n    else {\n      al = this.lat0 + y / this.a;\n      bl = x * x / this.a / this.a + al * al;\n      phi = al;\n      var tanphi;\n      for (i = MAX_ITER; i; --i) {\n        tanphi = Math.tan(phi);\n        dphi = -1 * (al * (phi * tanphi + 1) - phi - 0.5 * (phi * phi + bl) * tanphi) / ((phi - al) / tanphi - 1);\n        phi += dphi;\n        if (Math.abs(dphi) <= EPSLN) {\n          lat = phi;\n          break;\n        }\n      }\n      lon = adjust_lon(this.long0 + (Math.asin(x * Math.tan(phi) / this.a)) / Math.sin(lat));\n    }\n  }\n  else {\n    if (Math.abs(y + this.ml0) <= EPSLN) {\n      lat = 0;\n      lon = adjust_lon(this.long0 + x / this.a);\n    }\n    else {\n\n      al = (this.ml0 + y) / this.a;\n      bl = x * x / this.a / this.a + al * al;\n      phi = al;\n      var cl, mln, mlnp, ma;\n      var con;\n      for (i = MAX_ITER; i; --i) {\n        con = this.e * Math.sin(phi);\n        cl = Math.sqrt(1 - con * con) * Math.tan(phi);\n        mln = this.a * mlfn(this.e0, this.e1, this.e2, this.e3, phi);\n        mlnp = this.e0 - 2 * this.e1 * Math.cos(2 * phi) + 4 * this.e2 * Math.cos(4 * phi) - 6 * this.e3 * Math.cos(6 * phi);\n        ma = mln / this.a;\n        dphi = (al * (cl * ma + 1) - ma - 0.5 * cl * (ma * ma + bl)) / (this.es * Math.sin(2 * phi) * (ma * ma + bl - 2 * al * ma) / (4 * cl) + (al - ma) * (cl * mlnp - 2 / Math.sin(2 * phi)) - mlnp);\n        phi -= dphi;\n        if (Math.abs(dphi) <= EPSLN) {\n          lat = phi;\n          break;\n        }\n      }\n\n      //lat=phi4z(this.e,this.e0,this.e1,this.e2,this.e3,al,bl,0,0);\n      cl = Math.sqrt(1 - this.es * Math.pow(Math.sin(lat), 2)) * Math.tan(lat);\n      lon = adjust_lon(this.long0 + Math.asin(x * cl / this.a) / Math.sin(lat));\n    }\n  }\n\n  p.x = lon;\n  p.y = lat;\n  return p;\n}\n\nexport var names = [\"Polyconic\", \"poly\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names\n};\n"]},"metadata":{},"sourceType":"module"}