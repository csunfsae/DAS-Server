{"ast":null,"code":"import React,{useEffect,useContext}from'react';import{useSelector,useDispatch}from'react-redux';import{SocketContext}from'../../../SocketContext';import{updateLapTime,updateLapTimes,updateBestLapTime}from'../../../actions/livePage/lapTimesActions';import'./LapTimes.css';import{jsxs as _jsxs}from\"react/jsx-runtime\";import{jsx as _jsx}from\"react/jsx-runtime\";function LapTimes(){var socket=useContext(SocketContext);var lap_time=useSelector(function(state){return state.lapTimes.lapTime;});var dispatch=useDispatch();var lapCount=useSelector(function(state){return state.lapTimes.lapCount;});var lapTimes=useSelector(function(state){return state.lapTimes.lapTimes;});var bestLap=useSelector(function(state){return state.lapTimes.bestLapTime;});useEffect(function(){socket.on('lap_time',function(data){dispatch(updateLapTime(data));});},[]);useEffect(function(){if(lapCount>1){dispatch(updateLapTimes(\"\".concat(lap_time)));}},[lapCount]);useEffect(function(){if(lapCount>1){getBestLapTime();}},[lapTimes]);function getBestLapTime(){var bestLapTime=lapTimes[0];var bestLapNumber=1;for(var i=0;i<lapTimes.length;i++){if(bestLapTime>lapTimes[i]){bestLapTime=lapTimes[i];bestLapNumber=i+1;}}dispatch(updateBestLapTime({time:bestLapTime,lapNumber:bestLapNumber}));}return/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsxs(\"h1\",{children:[\"Lap \",lapCount,\": \",lap_time,\" sec\"]}),/*#__PURE__*/_jsxs(\"h2\",{style:{color:\"red\"},children:[\"Best Lap: \",lapCount===1?\"\".concat(lap_time,\" (L1)\"):\"\".concat(bestLap.time,\" (L\").concat(bestLap.lapNumber,\")\")]}),/*#__PURE__*/_jsx(\"h3\",{children:lapTimes.map(function(lapTime,index){return/*#__PURE__*/_jsxs(\"div\",{children:[\"L\",index+1,\": \",lapTime]});})})]});}export default LapTimes;","map":{"version":3,"sources":["C:/Users/brand/source/repos/DAS-Server/client/src/components/livePage/LapTimes/LapTimes.js"],"names":["React","useEffect","useContext","useSelector","useDispatch","SocketContext","updateLapTime","updateLapTimes","updateBestLapTime","LapTimes","socket","lap_time","state","lapTimes","lapTime","dispatch","lapCount","bestLap","bestLapTime","on","data","getBestLapTime","bestLapNumber","i","length","time","lapNumber","color","map","index"],"mappings":"AAAA,MAAOA,CAAAA,KAAP,EAAeC,SAAf,CAA0BC,UAA1B,KAA4C,OAA5C,CACA,OAAQC,WAAR,CAAqBC,WAArB,KAAuC,aAAvC,CACA,OAAQC,aAAR,KAA4B,wBAA5B,CACA,OAAQC,aAAR,CAAuBC,cAAvB,CAAuCC,iBAAvC,KAA+D,2CAA/D,CAGA,MAAO,gBAAP,C,wFAEA,QAASC,CAAAA,QAAT,EAAqB,CAEjB,GAAMC,CAAAA,MAAM,CAAGR,UAAU,CAACG,aAAD,CAAzB,CACA,GAAMM,CAAAA,QAAQ,CAAGR,WAAW,CAAE,SAACS,KAAD,QAAWA,CAAAA,KAAK,CAACC,QAAN,CAAeC,OAA1B,EAAF,CAA5B,CACA,GAAMC,CAAAA,QAAQ,CAAGX,WAAW,EAA5B,CACA,GAAMY,CAAAA,QAAQ,CAAGb,WAAW,CAAE,SAACS,KAAD,QAAWA,CAAAA,KAAK,CAACC,QAAN,CAAeG,QAA1B,EAAF,CAA5B,CACA,GAAMH,CAAAA,QAAQ,CAAGV,WAAW,CAAE,SAACS,KAAD,QAAWA,CAAAA,KAAK,CAACC,QAAN,CAAeA,QAA1B,EAAF,CAA5B,CACA,GAAMI,CAAAA,OAAO,CAAGd,WAAW,CAAE,SAACS,KAAD,QAAWA,CAAAA,KAAK,CAACC,QAAN,CAAeK,WAA1B,EAAF,CAA3B,CAEAjB,SAAS,CAAE,UAAK,CACZS,MAAM,CAACS,EAAP,CAAU,UAAV,CAAsB,SAACC,IAAD,CAAU,CAC5BL,QAAQ,CAACT,aAAa,CAACc,IAAD,CAAd,CAAR,CACD,CAFH,EAGH,CAJQ,CAIN,EAJM,CAAT,CAMAnB,SAAS,CAAE,UAAM,CACb,GAAIe,QAAQ,CAAG,CAAf,CAAkB,CACdD,QAAQ,CAACR,cAAc,WAAII,QAAJ,EAAf,CAAR,CACH,CACJ,CAJQ,CAIN,CAACK,QAAD,CAJM,CAAT,CAMAf,SAAS,CAAE,UAAM,CACb,GAAIe,QAAQ,CAAG,CAAf,CAAkB,CACdK,cAAc,GACjB,CACJ,CAJQ,CAIN,CAACR,QAAD,CAJM,CAAT,CAMF,QAASQ,CAAAA,cAAT,EAA0B,CACpB,GAAIH,CAAAA,WAAW,CAAGL,QAAQ,CAAC,CAAD,CAA1B,CACA,GAAIS,CAAAA,aAAa,CAAG,CAApB,CACA,IAAK,GAAIC,CAAAA,CAAC,CAAG,CAAb,CAAgBA,CAAC,CAAGV,QAAQ,CAACW,MAA7B,CAAqCD,CAAC,EAAtC,CAA0C,CACtC,GAAIL,WAAW,CAAGL,QAAQ,CAACU,CAAD,CAA1B,CAA+B,CAC3BL,WAAW,CAAGL,QAAQ,CAACU,CAAD,CAAtB,CACAD,aAAa,CAAGC,CAAC,CAAC,CAAlB,CACH,CACJ,CACDR,QAAQ,CAACP,iBAAiB,CAAC,CAACiB,IAAI,CAAEP,WAAP,CAAoBQ,SAAS,CAAEJ,aAA/B,CAAD,CAAlB,CAAR,CACL,CAEC,mBACI,oCACI,6BACSN,QADT,MACqBL,QADrB,UADJ,cAII,YAAI,KAAK,CAAE,CAACgB,KAAK,CAAE,KAAR,CAAX,wBACeX,QAAQ,GAAK,CAAb,WAAqBL,QAArB,oBAA0CM,OAAO,CAACQ,IAAlD,eAA4DR,OAAO,CAACS,SAApE,KADf,GAJJ,cAOI,oBACCb,QAAQ,CAACe,GAAT,CAAc,SAACd,OAAD,CAAUe,KAAV,CAAoB,CAC3B,mBAAQ,2BAAOA,KAAK,CAAG,CAAf,MAAoBf,OAApB,GAAR,CACH,CAFJ,CADD,EAPJ,GADJ,CAgBH,CAED,cAAeL,CAAAA,QAAf","sourcesContent":["import React, {useEffect, useContext } from 'react';\r\nimport {useSelector, useDispatch} from 'react-redux';\r\nimport {SocketContext} from '../../../SocketContext';\r\nimport {updateLapTime, updateLapTimes, updateBestLapTime} from '../../../actions/livePage/lapTimesActions'\r\n\r\n\r\nimport './LapTimes.css';\r\n\r\nfunction LapTimes () {\r\n    \r\n    const socket = useContext(SocketContext);\r\n    const lap_time = useSelector( (state) => state.lapTimes.lapTime);\r\n    const dispatch = useDispatch();\r\n    const lapCount = useSelector( (state) => state.lapTimes.lapCount);\r\n    const lapTimes = useSelector( (state) => state.lapTimes.lapTimes);\r\n    const bestLap = useSelector( (state) => state.lapTimes.bestLapTime);\r\n\r\n    useEffect( () =>{\r\n        socket.on('lap_time', (data) => {\r\n            dispatch(updateLapTime(data))\r\n          });\r\n    }, [])\r\n\r\n    useEffect( () => {\r\n        if (lapCount > 1) {\r\n            dispatch(updateLapTimes(`${lap_time}`))\r\n        }\r\n    }, [lapCount])\r\n\r\n    useEffect( () => {\r\n        if (lapCount > 1) {\r\n            getBestLapTime();\r\n        }\r\n    }, [lapTimes])\r\n\r\n  function getBestLapTime() {\r\n        let bestLapTime = lapTimes[0];\r\n        let bestLapNumber = 1;\r\n        for (let i = 0; i < lapTimes.length; i++) {\r\n            if (bestLapTime > lapTimes[i]) {\r\n                bestLapTime = lapTimes[i];\r\n                bestLapNumber = i+1;\r\n            }\r\n        }\r\n        dispatch(updateBestLapTime({time: bestLapTime, lapNumber: bestLapNumber}))\r\n  }\r\n\r\n    return (\r\n        <div>\r\n            <h1>    \r\n                Lap {lapCount}: {lap_time} sec  \r\n            </h1>\r\n            <h2 style={{color: \"red\"}}>\r\n                Best Lap: {lapCount === 1 ?  `${lap_time} (L1)` : `${bestLap.time} (L${bestLap.lapNumber})` }\r\n            </h2>\r\n            <h3>\r\n            {lapTimes.map( (lapTime, index) => {\r\n                    return (<div>L{index + 1}: {lapTime}</div> )\r\n                })\r\n            }\r\n            </h3>\r\n        </div>\r\n    );\r\n} \r\n\r\nexport default LapTimes;\r\n"]},"metadata":{},"sourceType":"module"}