{"ast":null,"code":"/**\n * UTM zones are grouped, and assigned to one of a group of 6\n * sets.\n *\n * {int} @private\n */\nvar NUM_100K_SETS = 6;\n/**\n * The column letters (for easting) of the lower left value, per\n * set.\n *\n * {string} @private\n */\n\nvar SET_ORIGIN_COLUMN_LETTERS = 'AJSAJS';\n/**\n * The row letters (for northing) of the lower left value, per\n * set.\n *\n * {string} @private\n */\n\nvar SET_ORIGIN_ROW_LETTERS = 'AFAFAF';\nvar A = 65; // A\n\nvar I = 73; // I\n\nvar O = 79; // O\n\nvar V = 86; // V\n\nvar Z = 90; // Z\n\nexport default {\n  forward: forward,\n  inverse: inverse,\n  toPoint: toPoint\n};\n/**\n * Conversion of lat/lon to MGRS.\n *\n * @param {object} ll Object literal with lat and lon properties on a\n *     WGS84 ellipsoid.\n * @param {int} accuracy Accuracy in digits (5 for 1 m, 4 for 10 m, 3 for\n *      100 m, 2 for 1000 m or 1 for 10000 m). Optional, default is 5.\n * @return {string} the MGRS string for the given location and accuracy.\n */\n\nexport function forward(ll, accuracy) {\n  accuracy = accuracy || 5; // default accuracy 1m\n\n  return encode(LLtoUTM({\n    lat: ll[1],\n    lon: ll[0]\n  }), accuracy);\n}\n;\n/**\n * Conversion of MGRS to lat/lon.\n *\n * @param {string} mgrs MGRS string.\n * @return {array} An array with left (longitude), bottom (latitude), right\n *     (longitude) and top (latitude) values in WGS84, representing the\n *     bounding box for the provided MGRS reference.\n */\n\nexport function inverse(mgrs) {\n  var bbox = UTMtoLL(decode(mgrs.toUpperCase()));\n\n  if (bbox.lat && bbox.lon) {\n    return [bbox.lon, bbox.lat, bbox.lon, bbox.lat];\n  }\n\n  return [bbox.left, bbox.bottom, bbox.right, bbox.top];\n}\n;\nexport function toPoint(mgrs) {\n  var bbox = UTMtoLL(decode(mgrs.toUpperCase()));\n\n  if (bbox.lat && bbox.lon) {\n    return [bbox.lon, bbox.lat];\n  }\n\n  return [(bbox.left + bbox.right) / 2, (bbox.top + bbox.bottom) / 2];\n}\n;\n/**\n * Conversion from degrees to radians.\n *\n * @private\n * @param {number} deg the angle in degrees.\n * @return {number} the angle in radians.\n */\n\nfunction degToRad(deg) {\n  return deg * (Math.PI / 180.0);\n}\n/**\n * Conversion from radians to degrees.\n *\n * @private\n * @param {number} rad the angle in radians.\n * @return {number} the angle in degrees.\n */\n\n\nfunction radToDeg(rad) {\n  return 180.0 * (rad / Math.PI);\n}\n/**\n * Converts a set of Longitude and Latitude co-ordinates to UTM\n * using the WGS84 ellipsoid.\n *\n * @private\n * @param {object} ll Object literal with lat and lon properties\n *     representing the WGS84 coordinate to be converted.\n * @return {object} Object literal containing the UTM value with easting,\n *     northing, zoneNumber and zoneLetter properties, and an optional\n *     accuracy property in digits. Returns null if the conversion failed.\n */\n\n\nfunction LLtoUTM(ll) {\n  var Lat = ll.lat;\n  var Long = ll.lon;\n  var a = 6378137.0; //ellip.radius;\n\n  var eccSquared = 0.00669438; //ellip.eccsq;\n\n  var k0 = 0.9996;\n  var LongOrigin;\n  var eccPrimeSquared;\n  var N, T, C, A, M;\n  var LatRad = degToRad(Lat);\n  var LongRad = degToRad(Long);\n  var LongOriginRad;\n  var ZoneNumber; // (int)\n\n  ZoneNumber = Math.floor((Long + 180) / 6) + 1; //Make sure the longitude 180.00 is in Zone 60\n\n  if (Long === 180) {\n    ZoneNumber = 60;\n  } // Special zone for Norway\n\n\n  if (Lat >= 56.0 && Lat < 64.0 && Long >= 3.0 && Long < 12.0) {\n    ZoneNumber = 32;\n  } // Special zones for Svalbard\n\n\n  if (Lat >= 72.0 && Lat < 84.0) {\n    if (Long >= 0.0 && Long < 9.0) {\n      ZoneNumber = 31;\n    } else if (Long >= 9.0 && Long < 21.0) {\n      ZoneNumber = 33;\n    } else if (Long >= 21.0 && Long < 33.0) {\n      ZoneNumber = 35;\n    } else if (Long >= 33.0 && Long < 42.0) {\n      ZoneNumber = 37;\n    }\n  }\n\n  LongOrigin = (ZoneNumber - 1) * 6 - 180 + 3; //+3 puts origin\n  // in middle of\n  // zone\n\n  LongOriginRad = degToRad(LongOrigin);\n  eccPrimeSquared = eccSquared / (1 - eccSquared);\n  N = a / Math.sqrt(1 - eccSquared * Math.sin(LatRad) * Math.sin(LatRad));\n  T = Math.tan(LatRad) * Math.tan(LatRad);\n  C = eccPrimeSquared * Math.cos(LatRad) * Math.cos(LatRad);\n  A = Math.cos(LatRad) * (LongRad - LongOriginRad);\n  M = a * ((1 - eccSquared / 4 - 3 * eccSquared * eccSquared / 64 - 5 * eccSquared * eccSquared * eccSquared / 256) * LatRad - (3 * eccSquared / 8 + 3 * eccSquared * eccSquared / 32 + 45 * eccSquared * eccSquared * eccSquared / 1024) * Math.sin(2 * LatRad) + (15 * eccSquared * eccSquared / 256 + 45 * eccSquared * eccSquared * eccSquared / 1024) * Math.sin(4 * LatRad) - 35 * eccSquared * eccSquared * eccSquared / 3072 * Math.sin(6 * LatRad));\n  var UTMEasting = k0 * N * (A + (1 - T + C) * A * A * A / 6.0 + (5 - 18 * T + T * T + 72 * C - 58 * eccPrimeSquared) * A * A * A * A * A / 120.0) + 500000.0;\n  var UTMNorthing = k0 * (M + N * Math.tan(LatRad) * (A * A / 2 + (5 - T + 9 * C + 4 * C * C) * A * A * A * A / 24.0 + (61 - 58 * T + T * T + 600 * C - 330 * eccPrimeSquared) * A * A * A * A * A * A / 720.0));\n\n  if (Lat < 0.0) {\n    UTMNorthing += 10000000.0; //10000000 meter offset for\n    // southern hemisphere\n  }\n\n  return {\n    northing: Math.round(UTMNorthing),\n    easting: Math.round(UTMEasting),\n    zoneNumber: ZoneNumber,\n    zoneLetter: getLetterDesignator(Lat)\n  };\n}\n/**\n * Converts UTM coords to lat/long, using the WGS84 ellipsoid. This is a convenience\n * class where the Zone can be specified as a single string eg.\"60N\" which\n * is then broken down into the ZoneNumber and ZoneLetter.\n *\n * @private\n * @param {object} utm An object literal with northing, easting, zoneNumber\n *     and zoneLetter properties. If an optional accuracy property is\n *     provided (in meters), a bounding box will be returned instead of\n *     latitude and longitude.\n * @return {object} An object literal containing either lat and lon values\n *     (if no accuracy was provided), or top, right, bottom and left values\n *     for the bounding box calculated according to the provided accuracy.\n *     Returns null if the conversion failed.\n */\n\n\nfunction UTMtoLL(utm) {\n  var UTMNorthing = utm.northing;\n  var UTMEasting = utm.easting;\n  var zoneLetter = utm.zoneLetter;\n  var zoneNumber = utm.zoneNumber; // check the ZoneNummber is valid\n\n  if (zoneNumber < 0 || zoneNumber > 60) {\n    return null;\n  }\n\n  var k0 = 0.9996;\n  var a = 6378137.0; //ellip.radius;\n\n  var eccSquared = 0.00669438; //ellip.eccsq;\n\n  var eccPrimeSquared;\n  var e1 = (1 - Math.sqrt(1 - eccSquared)) / (1 + Math.sqrt(1 - eccSquared));\n  var N1, T1, C1, R1, D, M;\n  var LongOrigin;\n  var mu, phi1Rad; // remove 500,000 meter offset for longitude\n\n  var x = UTMEasting - 500000.0;\n  var y = UTMNorthing; // We must know somehow if we are in the Northern or Southern\n  // hemisphere, this is the only time we use the letter So even\n  // if the Zone letter isn't exactly correct it should indicate\n  // the hemisphere correctly\n\n  if (zoneLetter < 'N') {\n    y -= 10000000.0; // remove 10,000,000 meter offset used\n    // for southern hemisphere\n  } // There are 60 zones with zone 1 being at West -180 to -174\n\n\n  LongOrigin = (zoneNumber - 1) * 6 - 180 + 3; // +3 puts origin\n  // in middle of\n  // zone\n\n  eccPrimeSquared = eccSquared / (1 - eccSquared);\n  M = y / k0;\n  mu = M / (a * (1 - eccSquared / 4 - 3 * eccSquared * eccSquared / 64 - 5 * eccSquared * eccSquared * eccSquared / 256));\n  phi1Rad = mu + (3 * e1 / 2 - 27 * e1 * e1 * e1 / 32) * Math.sin(2 * mu) + (21 * e1 * e1 / 16 - 55 * e1 * e1 * e1 * e1 / 32) * Math.sin(4 * mu) + 151 * e1 * e1 * e1 / 96 * Math.sin(6 * mu); // double phi1 = ProjMath.radToDeg(phi1Rad);\n\n  N1 = a / Math.sqrt(1 - eccSquared * Math.sin(phi1Rad) * Math.sin(phi1Rad));\n  T1 = Math.tan(phi1Rad) * Math.tan(phi1Rad);\n  C1 = eccPrimeSquared * Math.cos(phi1Rad) * Math.cos(phi1Rad);\n  R1 = a * (1 - eccSquared) / Math.pow(1 - eccSquared * Math.sin(phi1Rad) * Math.sin(phi1Rad), 1.5);\n  D = x / (N1 * k0);\n  var lat = phi1Rad - N1 * Math.tan(phi1Rad) / R1 * (D * D / 2 - (5 + 3 * T1 + 10 * C1 - 4 * C1 * C1 - 9 * eccPrimeSquared) * D * D * D * D / 24 + (61 + 90 * T1 + 298 * C1 + 45 * T1 * T1 - 252 * eccPrimeSquared - 3 * C1 * C1) * D * D * D * D * D * D / 720);\n  lat = radToDeg(lat);\n  var lon = (D - (1 + 2 * T1 + C1) * D * D * D / 6 + (5 - 2 * C1 + 28 * T1 - 3 * C1 * C1 + 8 * eccPrimeSquared + 24 * T1 * T1) * D * D * D * D * D / 120) / Math.cos(phi1Rad);\n  lon = LongOrigin + radToDeg(lon);\n  var result;\n\n  if (utm.accuracy) {\n    var topRight = UTMtoLL({\n      northing: utm.northing + utm.accuracy,\n      easting: utm.easting + utm.accuracy,\n      zoneLetter: utm.zoneLetter,\n      zoneNumber: utm.zoneNumber\n    });\n    result = {\n      top: topRight.lat,\n      right: topRight.lon,\n      bottom: lat,\n      left: lon\n    };\n  } else {\n    result = {\n      lat: lat,\n      lon: lon\n    };\n  }\n\n  return result;\n}\n/**\n * Calculates the MGRS letter designator for the given latitude.\n *\n * @private\n * @param {number} lat The latitude in WGS84 to get the letter designator\n *     for.\n * @return {char} The letter designator.\n */\n\n\nfunction getLetterDesignator(lat) {\n  //This is here as an error flag to show that the Latitude is\n  //outside MGRS limits\n  var LetterDesignator = 'Z';\n\n  if (84 >= lat && lat >= 72) {\n    LetterDesignator = 'X';\n  } else if (72 > lat && lat >= 64) {\n    LetterDesignator = 'W';\n  } else if (64 > lat && lat >= 56) {\n    LetterDesignator = 'V';\n  } else if (56 > lat && lat >= 48) {\n    LetterDesignator = 'U';\n  } else if (48 > lat && lat >= 40) {\n    LetterDesignator = 'T';\n  } else if (40 > lat && lat >= 32) {\n    LetterDesignator = 'S';\n  } else if (32 > lat && lat >= 24) {\n    LetterDesignator = 'R';\n  } else if (24 > lat && lat >= 16) {\n    LetterDesignator = 'Q';\n  } else if (16 > lat && lat >= 8) {\n    LetterDesignator = 'P';\n  } else if (8 > lat && lat >= 0) {\n    LetterDesignator = 'N';\n  } else if (0 > lat && lat >= -8) {\n    LetterDesignator = 'M';\n  } else if (-8 > lat && lat >= -16) {\n    LetterDesignator = 'L';\n  } else if (-16 > lat && lat >= -24) {\n    LetterDesignator = 'K';\n  } else if (-24 > lat && lat >= -32) {\n    LetterDesignator = 'J';\n  } else if (-32 > lat && lat >= -40) {\n    LetterDesignator = 'H';\n  } else if (-40 > lat && lat >= -48) {\n    LetterDesignator = 'G';\n  } else if (-48 > lat && lat >= -56) {\n    LetterDesignator = 'F';\n  } else if (-56 > lat && lat >= -64) {\n    LetterDesignator = 'E';\n  } else if (-64 > lat && lat >= -72) {\n    LetterDesignator = 'D';\n  } else if (-72 > lat && lat >= -80) {\n    LetterDesignator = 'C';\n  }\n\n  return LetterDesignator;\n}\n/**\n * Encodes a UTM location as MGRS string.\n *\n * @private\n * @param {object} utm An object literal with easting, northing,\n *     zoneLetter, zoneNumber\n * @param {number} accuracy Accuracy in digits (1-5).\n * @return {string} MGRS string for the given UTM location.\n */\n\n\nfunction encode(utm, accuracy) {\n  // prepend with leading zeroes\n  var seasting = \"00000\" + utm.easting,\n      snorthing = \"00000\" + utm.northing;\n  return utm.zoneNumber + utm.zoneLetter + get100kID(utm.easting, utm.northing, utm.zoneNumber) + seasting.substr(seasting.length - 5, accuracy) + snorthing.substr(snorthing.length - 5, accuracy);\n}\n/**\n * Get the two letter 100k designator for a given UTM easting,\n * northing and zone number value.\n *\n * @private\n * @param {number} easting\n * @param {number} northing\n * @param {number} zoneNumber\n * @return the two letter 100k designator for the given UTM location.\n */\n\n\nfunction get100kID(easting, northing, zoneNumber) {\n  var setParm = get100kSetForZone(zoneNumber);\n  var setColumn = Math.floor(easting / 100000);\n  var setRow = Math.floor(northing / 100000) % 20;\n  return getLetter100kID(setColumn, setRow, setParm);\n}\n/**\n * Given a UTM zone number, figure out the MGRS 100K set it is in.\n *\n * @private\n * @param {number} i An UTM zone number.\n * @return {number} the 100k set the UTM zone is in.\n */\n\n\nfunction get100kSetForZone(i) {\n  var setParm = i % NUM_100K_SETS;\n\n  if (setParm === 0) {\n    setParm = NUM_100K_SETS;\n  }\n\n  return setParm;\n}\n/**\n * Get the two-letter MGRS 100k designator given information\n * translated from the UTM northing, easting and zone number.\n *\n * @private\n * @param {number} column the column index as it relates to the MGRS\n *        100k set spreadsheet, created from the UTM easting.\n *        Values are 1-8.\n * @param {number} row the row index as it relates to the MGRS 100k set\n *        spreadsheet, created from the UTM northing value. Values\n *        are from 0-19.\n * @param {number} parm the set block, as it relates to the MGRS 100k set\n *        spreadsheet, created from the UTM zone. Values are from\n *        1-60.\n * @return two letter MGRS 100k code.\n */\n\n\nfunction getLetter100kID(column, row, parm) {\n  // colOrigin and rowOrigin are the letters at the origin of the set\n  var index = parm - 1;\n  var colOrigin = SET_ORIGIN_COLUMN_LETTERS.charCodeAt(index);\n  var rowOrigin = SET_ORIGIN_ROW_LETTERS.charCodeAt(index); // colInt and rowInt are the letters to build to return\n\n  var colInt = colOrigin + column - 1;\n  var rowInt = rowOrigin + row;\n  var rollover = false;\n\n  if (colInt > Z) {\n    colInt = colInt - Z + A - 1;\n    rollover = true;\n  }\n\n  if (colInt === I || colOrigin < I && colInt > I || (colInt > I || colOrigin < I) && rollover) {\n    colInt++;\n  }\n\n  if (colInt === O || colOrigin < O && colInt > O || (colInt > O || colOrigin < O) && rollover) {\n    colInt++;\n\n    if (colInt === I) {\n      colInt++;\n    }\n  }\n\n  if (colInt > Z) {\n    colInt = colInt - Z + A - 1;\n  }\n\n  if (rowInt > V) {\n    rowInt = rowInt - V + A - 1;\n    rollover = true;\n  } else {\n    rollover = false;\n  }\n\n  if (rowInt === I || rowOrigin < I && rowInt > I || (rowInt > I || rowOrigin < I) && rollover) {\n    rowInt++;\n  }\n\n  if (rowInt === O || rowOrigin < O && rowInt > O || (rowInt > O || rowOrigin < O) && rollover) {\n    rowInt++;\n\n    if (rowInt === I) {\n      rowInt++;\n    }\n  }\n\n  if (rowInt > V) {\n    rowInt = rowInt - V + A - 1;\n  }\n\n  var twoLetter = String.fromCharCode(colInt) + String.fromCharCode(rowInt);\n  return twoLetter;\n}\n/**\n * Decode the UTM parameters from a MGRS string.\n *\n * @private\n * @param {string} mgrsString an UPPERCASE coordinate string is expected.\n * @return {object} An object literal with easting, northing, zoneLetter,\n *     zoneNumber and accuracy (in meters) properties.\n */\n\n\nfunction decode(mgrsString) {\n  if (mgrsString && mgrsString.length === 0) {\n    throw \"MGRSPoint coverting from nothing\";\n  }\n\n  var length = mgrsString.length;\n  var hunK = null;\n  var sb = \"\";\n  var testChar;\n  var i = 0; // get Zone number\n\n  while (!/[A-Z]/.test(testChar = mgrsString.charAt(i))) {\n    if (i >= 2) {\n      throw \"MGRSPoint bad conversion from: \" + mgrsString;\n    }\n\n    sb += testChar;\n    i++;\n  }\n\n  var zoneNumber = parseInt(sb, 10);\n\n  if (i === 0 || i + 3 > length) {\n    // A good MGRS string has to be 4-5 digits long,\n    // ##AAA/#AAA at least.\n    throw \"MGRSPoint bad conversion from: \" + mgrsString;\n  }\n\n  var zoneLetter = mgrsString.charAt(i++); // Should we check the zone letter here? Why not.\n\n  if (zoneLetter <= 'A' || zoneLetter === 'B' || zoneLetter === 'Y' || zoneLetter >= 'Z' || zoneLetter === 'I' || zoneLetter === 'O') {\n    throw \"MGRSPoint zone letter \" + zoneLetter + \" not handled: \" + mgrsString;\n  }\n\n  hunK = mgrsString.substring(i, i += 2);\n  var set = get100kSetForZone(zoneNumber);\n  var east100k = getEastingFromChar(hunK.charAt(0), set);\n  var north100k = getNorthingFromChar(hunK.charAt(1), set); // We have a bug where the northing may be 2000000 too low.\n  // How\n  // do we know when to roll over?\n\n  while (north100k < getMinNorthing(zoneLetter)) {\n    north100k += 2000000;\n  } // calculate the char index for easting/northing separator\n\n\n  var remainder = length - i;\n\n  if (remainder % 2 !== 0) {\n    throw \"MGRSPoint has to have an even number \\nof digits after the zone letter and two 100km letters - front \\nhalf for easting meters, second half for \\nnorthing meters\" + mgrsString;\n  }\n\n  var sep = remainder / 2;\n  var sepEasting = 0.0;\n  var sepNorthing = 0.0;\n  var accuracyBonus, sepEastingString, sepNorthingString, easting, northing;\n\n  if (sep > 0) {\n    accuracyBonus = 100000.0 / Math.pow(10, sep);\n    sepEastingString = mgrsString.substring(i, i + sep);\n    sepEasting = parseFloat(sepEastingString) * accuracyBonus;\n    sepNorthingString = mgrsString.substring(i + sep);\n    sepNorthing = parseFloat(sepNorthingString) * accuracyBonus;\n  }\n\n  easting = sepEasting + east100k;\n  northing = sepNorthing + north100k;\n  return {\n    easting: easting,\n    northing: northing,\n    zoneLetter: zoneLetter,\n    zoneNumber: zoneNumber,\n    accuracy: accuracyBonus\n  };\n}\n/**\n * Given the first letter from a two-letter MGRS 100k zone, and given the\n * MGRS table set for the zone number, figure out the easting value that\n * should be added to the other, secondary easting value.\n *\n * @private\n * @param {char} e The first letter from a two-letter MGRS 100´k zone.\n * @param {number} set The MGRS table set for the zone number.\n * @return {number} The easting value for the given letter and set.\n */\n\n\nfunction getEastingFromChar(e, set) {\n  // colOrigin is the letter at the origin of the set for the\n  // column\n  var curCol = SET_ORIGIN_COLUMN_LETTERS.charCodeAt(set - 1);\n  var eastingValue = 100000.0;\n  var rewindMarker = false;\n\n  while (curCol !== e.charCodeAt(0)) {\n    curCol++;\n\n    if (curCol === I) {\n      curCol++;\n    }\n\n    if (curCol === O) {\n      curCol++;\n    }\n\n    if (curCol > Z) {\n      if (rewindMarker) {\n        throw \"Bad character: \" + e;\n      }\n\n      curCol = A;\n      rewindMarker = true;\n    }\n\n    eastingValue += 100000.0;\n  }\n\n  return eastingValue;\n}\n/**\n * Given the second letter from a two-letter MGRS 100k zone, and given the\n * MGRS table set for the zone number, figure out the northing value that\n * should be added to the other, secondary northing value. You have to\n * remember that Northings are determined from the equator, and the vertical\n * cycle of letters mean a 2000000 additional northing meters. This happens\n * approx. every 18 degrees of latitude. This method does *NOT* count any\n * additional northings. You have to figure out how many 2000000 meters need\n * to be added for the zone letter of the MGRS coordinate.\n *\n * @private\n * @param {char} n Second letter of the MGRS 100k zone\n * @param {number} set The MGRS table set number, which is dependent on the\n *     UTM zone number.\n * @return {number} The northing value for the given letter and set.\n */\n\n\nfunction getNorthingFromChar(n, set) {\n  if (n > 'V') {\n    throw \"MGRSPoint given invalid Northing \" + n;\n  } // rowOrigin is the letter at the origin of the set for the\n  // column\n\n\n  var curRow = SET_ORIGIN_ROW_LETTERS.charCodeAt(set - 1);\n  var northingValue = 0.0;\n  var rewindMarker = false;\n\n  while (curRow !== n.charCodeAt(0)) {\n    curRow++;\n\n    if (curRow === I) {\n      curRow++;\n    }\n\n    if (curRow === O) {\n      curRow++;\n    } // fixing a bug making whole application hang in this loop\n    // when 'n' is a wrong character\n\n\n    if (curRow > V) {\n      if (rewindMarker) {\n        // making sure that this loop ends\n        throw \"Bad character: \" + n;\n      }\n\n      curRow = A;\n      rewindMarker = true;\n    }\n\n    northingValue += 100000.0;\n  }\n\n  return northingValue;\n}\n/**\n * The function getMinNorthing returns the minimum northing value of a MGRS\n * zone.\n *\n * Ported from Geotrans' c Lattitude_Band_Value structure table.\n *\n * @private\n * @param {char} zoneLetter The MGRS zone to get the min northing for.\n * @return {number}\n */\n\n\nfunction getMinNorthing(zoneLetter) {\n  var northing;\n\n  switch (zoneLetter) {\n    case 'C':\n      northing = 1100000.0;\n      break;\n\n    case 'D':\n      northing = 2000000.0;\n      break;\n\n    case 'E':\n      northing = 2800000.0;\n      break;\n\n    case 'F':\n      northing = 3700000.0;\n      break;\n\n    case 'G':\n      northing = 4600000.0;\n      break;\n\n    case 'H':\n      northing = 5500000.0;\n      break;\n\n    case 'J':\n      northing = 6400000.0;\n      break;\n\n    case 'K':\n      northing = 7300000.0;\n      break;\n\n    case 'L':\n      northing = 8200000.0;\n      break;\n\n    case 'M':\n      northing = 9100000.0;\n      break;\n\n    case 'N':\n      northing = 0.0;\n      break;\n\n    case 'P':\n      northing = 800000.0;\n      break;\n\n    case 'Q':\n      northing = 1700000.0;\n      break;\n\n    case 'R':\n      northing = 2600000.0;\n      break;\n\n    case 'S':\n      northing = 3500000.0;\n      break;\n\n    case 'T':\n      northing = 4400000.0;\n      break;\n\n    case 'U':\n      northing = 5300000.0;\n      break;\n\n    case 'V':\n      northing = 6200000.0;\n      break;\n\n    case 'W':\n      northing = 7000000.0;\n      break;\n\n    case 'X':\n      northing = 7900000.0;\n      break;\n\n    default:\n      northing = -1.0;\n  }\n\n  if (northing >= 0.0) {\n    return northing;\n  } else {\n    throw \"Invalid zone letter: \" + zoneLetter;\n  }\n}","map":{"version":3,"sources":["C:/Users/brand/source/repos/das-server/client/node_modules/mgrs/mgrs.js"],"names":["NUM_100K_SETS","SET_ORIGIN_COLUMN_LETTERS","SET_ORIGIN_ROW_LETTERS","A","I","O","V","Z","forward","inverse","toPoint","ll","accuracy","encode","LLtoUTM","lat","lon","mgrs","bbox","UTMtoLL","decode","toUpperCase","left","bottom","right","top","degToRad","deg","Math","PI","radToDeg","rad","Lat","Long","a","eccSquared","k0","LongOrigin","eccPrimeSquared","N","T","C","M","LatRad","LongRad","LongOriginRad","ZoneNumber","floor","sqrt","sin","tan","cos","UTMEasting","UTMNorthing","northing","round","easting","zoneNumber","zoneLetter","getLetterDesignator","utm","e1","N1","T1","C1","R1","D","mu","phi1Rad","x","y","pow","result","topRight","LetterDesignator","seasting","snorthing","get100kID","substr","length","setParm","get100kSetForZone","setColumn","setRow","getLetter100kID","i","column","row","parm","index","colOrigin","charCodeAt","rowOrigin","colInt","rowInt","rollover","twoLetter","String","fromCharCode","mgrsString","hunK","sb","testChar","test","charAt","parseInt","substring","set","east100k","getEastingFromChar","north100k","getNorthingFromChar","getMinNorthing","remainder","sep","sepEasting","sepNorthing","accuracyBonus","sepEastingString","sepNorthingString","parseFloat","e","curCol","eastingValue","rewindMarker","n","curRow","northingValue"],"mappings":"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","sourcesContent":["\n\n\n/**\n * UTM zones are grouped, and assigned to one of a group of 6\n * sets.\n *\n * {int} @private\n */\nvar NUM_100K_SETS = 6;\n\n/**\n * The column letters (for easting) of the lower left value, per\n * set.\n *\n * {string} @private\n */\nvar SET_ORIGIN_COLUMN_LETTERS = 'AJSAJS';\n\n/**\n * The row letters (for northing) of the lower left value, per\n * set.\n *\n * {string} @private\n */\nvar SET_ORIGIN_ROW_LETTERS = 'AFAFAF';\n\nvar A = 65; // A\nvar I = 73; // I\nvar O = 79; // O\nvar V = 86; // V\nvar Z = 90; // Z\nexport default {\n  forward: forward,\n  inverse: inverse,\n  toPoint: toPoint\n};\n/**\n * Conversion of lat/lon to MGRS.\n *\n * @param {object} ll Object literal with lat and lon properties on a\n *     WGS84 ellipsoid.\n * @param {int} accuracy Accuracy in digits (5 for 1 m, 4 for 10 m, 3 for\n *      100 m, 2 for 1000 m or 1 for 10000 m). Optional, default is 5.\n * @return {string} the MGRS string for the given location and accuracy.\n */\nexport function forward(ll, accuracy) {\n  accuracy = accuracy || 5; // default accuracy 1m\n  return encode(LLtoUTM({\n    lat: ll[1],\n    lon: ll[0]\n  }), accuracy);\n};\n\n/**\n * Conversion of MGRS to lat/lon.\n *\n * @param {string} mgrs MGRS string.\n * @return {array} An array with left (longitude), bottom (latitude), right\n *     (longitude) and top (latitude) values in WGS84, representing the\n *     bounding box for the provided MGRS reference.\n */\nexport function inverse(mgrs) {\n  var bbox = UTMtoLL(decode(mgrs.toUpperCase()));\n  if (bbox.lat && bbox.lon) {\n    return [bbox.lon, bbox.lat, bbox.lon, bbox.lat];\n  }\n  return [bbox.left, bbox.bottom, bbox.right, bbox.top];\n};\n\nexport function toPoint(mgrs) {\n  var bbox = UTMtoLL(decode(mgrs.toUpperCase()));\n  if (bbox.lat && bbox.lon) {\n    return [bbox.lon, bbox.lat];\n  }\n  return [(bbox.left + bbox.right) / 2, (bbox.top + bbox.bottom) / 2];\n};\n/**\n * Conversion from degrees to radians.\n *\n * @private\n * @param {number} deg the angle in degrees.\n * @return {number} the angle in radians.\n */\nfunction degToRad(deg) {\n  return (deg * (Math.PI / 180.0));\n}\n\n/**\n * Conversion from radians to degrees.\n *\n * @private\n * @param {number} rad the angle in radians.\n * @return {number} the angle in degrees.\n */\nfunction radToDeg(rad) {\n  return (180.0 * (rad / Math.PI));\n}\n\n/**\n * Converts a set of Longitude and Latitude co-ordinates to UTM\n * using the WGS84 ellipsoid.\n *\n * @private\n * @param {object} ll Object literal with lat and lon properties\n *     representing the WGS84 coordinate to be converted.\n * @return {object} Object literal containing the UTM value with easting,\n *     northing, zoneNumber and zoneLetter properties, and an optional\n *     accuracy property in digits. Returns null if the conversion failed.\n */\nfunction LLtoUTM(ll) {\n  var Lat = ll.lat;\n  var Long = ll.lon;\n  var a = 6378137.0; //ellip.radius;\n  var eccSquared = 0.00669438; //ellip.eccsq;\n  var k0 = 0.9996;\n  var LongOrigin;\n  var eccPrimeSquared;\n  var N, T, C, A, M;\n  var LatRad = degToRad(Lat);\n  var LongRad = degToRad(Long);\n  var LongOriginRad;\n  var ZoneNumber;\n  // (int)\n  ZoneNumber = Math.floor((Long + 180) / 6) + 1;\n\n  //Make sure the longitude 180.00 is in Zone 60\n  if (Long === 180) {\n    ZoneNumber = 60;\n  }\n\n  // Special zone for Norway\n  if (Lat >= 56.0 && Lat < 64.0 && Long >= 3.0 && Long < 12.0) {\n    ZoneNumber = 32;\n  }\n\n  // Special zones for Svalbard\n  if (Lat >= 72.0 && Lat < 84.0) {\n    if (Long >= 0.0 && Long < 9.0) {\n      ZoneNumber = 31;\n    }\n    else if (Long >= 9.0 && Long < 21.0) {\n      ZoneNumber = 33;\n    }\n    else if (Long >= 21.0 && Long < 33.0) {\n      ZoneNumber = 35;\n    }\n    else if (Long >= 33.0 && Long < 42.0) {\n      ZoneNumber = 37;\n    }\n  }\n\n  LongOrigin = (ZoneNumber - 1) * 6 - 180 + 3; //+3 puts origin\n  // in middle of\n  // zone\n  LongOriginRad = degToRad(LongOrigin);\n\n  eccPrimeSquared = (eccSquared) / (1 - eccSquared);\n\n  N = a / Math.sqrt(1 - eccSquared * Math.sin(LatRad) * Math.sin(LatRad));\n  T = Math.tan(LatRad) * Math.tan(LatRad);\n  C = eccPrimeSquared * Math.cos(LatRad) * Math.cos(LatRad);\n  A = Math.cos(LatRad) * (LongRad - LongOriginRad);\n\n  M = a * ((1 - eccSquared / 4 - 3 * eccSquared * eccSquared / 64 - 5 * eccSquared * eccSquared * eccSquared / 256) * LatRad - (3 * eccSquared / 8 + 3 * eccSquared * eccSquared / 32 + 45 * eccSquared * eccSquared * eccSquared / 1024) * Math.sin(2 * LatRad) + (15 * eccSquared * eccSquared / 256 + 45 * eccSquared * eccSquared * eccSquared / 1024) * Math.sin(4 * LatRad) - (35 * eccSquared * eccSquared * eccSquared / 3072) * Math.sin(6 * LatRad));\n\n  var UTMEasting = (k0 * N * (A + (1 - T + C) * A * A * A / 6.0 + (5 - 18 * T + T * T + 72 * C - 58 * eccPrimeSquared) * A * A * A * A * A / 120.0) + 500000.0);\n\n  var UTMNorthing = (k0 * (M + N * Math.tan(LatRad) * (A * A / 2 + (5 - T + 9 * C + 4 * C * C) * A * A * A * A / 24.0 + (61 - 58 * T + T * T + 600 * C - 330 * eccPrimeSquared) * A * A * A * A * A * A / 720.0)));\n  if (Lat < 0.0) {\n    UTMNorthing += 10000000.0; //10000000 meter offset for\n    // southern hemisphere\n  }\n\n  return {\n    northing: Math.round(UTMNorthing),\n    easting: Math.round(UTMEasting),\n    zoneNumber: ZoneNumber,\n    zoneLetter: getLetterDesignator(Lat)\n  };\n}\n\n/**\n * Converts UTM coords to lat/long, using the WGS84 ellipsoid. This is a convenience\n * class where the Zone can be specified as a single string eg.\"60N\" which\n * is then broken down into the ZoneNumber and ZoneLetter.\n *\n * @private\n * @param {object} utm An object literal with northing, easting, zoneNumber\n *     and zoneLetter properties. If an optional accuracy property is\n *     provided (in meters), a bounding box will be returned instead of\n *     latitude and longitude.\n * @return {object} An object literal containing either lat and lon values\n *     (if no accuracy was provided), or top, right, bottom and left values\n *     for the bounding box calculated according to the provided accuracy.\n *     Returns null if the conversion failed.\n */\nfunction UTMtoLL(utm) {\n\n  var UTMNorthing = utm.northing;\n  var UTMEasting = utm.easting;\n  var zoneLetter = utm.zoneLetter;\n  var zoneNumber = utm.zoneNumber;\n  // check the ZoneNummber is valid\n  if (zoneNumber < 0 || zoneNumber > 60) {\n    return null;\n  }\n\n  var k0 = 0.9996;\n  var a = 6378137.0; //ellip.radius;\n  var eccSquared = 0.00669438; //ellip.eccsq;\n  var eccPrimeSquared;\n  var e1 = (1 - Math.sqrt(1 - eccSquared)) / (1 + Math.sqrt(1 - eccSquared));\n  var N1, T1, C1, R1, D, M;\n  var LongOrigin;\n  var mu, phi1Rad;\n\n  // remove 500,000 meter offset for longitude\n  var x = UTMEasting - 500000.0;\n  var y = UTMNorthing;\n\n  // We must know somehow if we are in the Northern or Southern\n  // hemisphere, this is the only time we use the letter So even\n  // if the Zone letter isn't exactly correct it should indicate\n  // the hemisphere correctly\n  if (zoneLetter < 'N') {\n    y -= 10000000.0; // remove 10,000,000 meter offset used\n    // for southern hemisphere\n  }\n\n  // There are 60 zones with zone 1 being at West -180 to -174\n  LongOrigin = (zoneNumber - 1) * 6 - 180 + 3; // +3 puts origin\n  // in middle of\n  // zone\n\n  eccPrimeSquared = (eccSquared) / (1 - eccSquared);\n\n  M = y / k0;\n  mu = M / (a * (1 - eccSquared / 4 - 3 * eccSquared * eccSquared / 64 - 5 * eccSquared * eccSquared * eccSquared / 256));\n\n  phi1Rad = mu + (3 * e1 / 2 - 27 * e1 * e1 * e1 / 32) * Math.sin(2 * mu) + (21 * e1 * e1 / 16 - 55 * e1 * e1 * e1 * e1 / 32) * Math.sin(4 * mu) + (151 * e1 * e1 * e1 / 96) * Math.sin(6 * mu);\n  // double phi1 = ProjMath.radToDeg(phi1Rad);\n\n  N1 = a / Math.sqrt(1 - eccSquared * Math.sin(phi1Rad) * Math.sin(phi1Rad));\n  T1 = Math.tan(phi1Rad) * Math.tan(phi1Rad);\n  C1 = eccPrimeSquared * Math.cos(phi1Rad) * Math.cos(phi1Rad);\n  R1 = a * (1 - eccSquared) / Math.pow(1 - eccSquared * Math.sin(phi1Rad) * Math.sin(phi1Rad), 1.5);\n  D = x / (N1 * k0);\n\n  var lat = phi1Rad - (N1 * Math.tan(phi1Rad) / R1) * (D * D / 2 - (5 + 3 * T1 + 10 * C1 - 4 * C1 * C1 - 9 * eccPrimeSquared) * D * D * D * D / 24 + (61 + 90 * T1 + 298 * C1 + 45 * T1 * T1 - 252 * eccPrimeSquared - 3 * C1 * C1) * D * D * D * D * D * D / 720);\n  lat = radToDeg(lat);\n\n  var lon = (D - (1 + 2 * T1 + C1) * D * D * D / 6 + (5 - 2 * C1 + 28 * T1 - 3 * C1 * C1 + 8 * eccPrimeSquared + 24 * T1 * T1) * D * D * D * D * D / 120) / Math.cos(phi1Rad);\n  lon = LongOrigin + radToDeg(lon);\n\n  var result;\n  if (utm.accuracy) {\n    var topRight = UTMtoLL({\n      northing: utm.northing + utm.accuracy,\n      easting: utm.easting + utm.accuracy,\n      zoneLetter: utm.zoneLetter,\n      zoneNumber: utm.zoneNumber\n    });\n    result = {\n      top: topRight.lat,\n      right: topRight.lon,\n      bottom: lat,\n      left: lon\n    };\n  }\n  else {\n    result = {\n      lat: lat,\n      lon: lon\n    };\n  }\n  return result;\n}\n\n/**\n * Calculates the MGRS letter designator for the given latitude.\n *\n * @private\n * @param {number} lat The latitude in WGS84 to get the letter designator\n *     for.\n * @return {char} The letter designator.\n */\nfunction getLetterDesignator(lat) {\n  //This is here as an error flag to show that the Latitude is\n  //outside MGRS limits\n  var LetterDesignator = 'Z';\n\n  if ((84 >= lat) && (lat >= 72)) {\n    LetterDesignator = 'X';\n  }\n  else if ((72 > lat) && (lat >= 64)) {\n    LetterDesignator = 'W';\n  }\n  else if ((64 > lat) && (lat >= 56)) {\n    LetterDesignator = 'V';\n  }\n  else if ((56 > lat) && (lat >= 48)) {\n    LetterDesignator = 'U';\n  }\n  else if ((48 > lat) && (lat >= 40)) {\n    LetterDesignator = 'T';\n  }\n  else if ((40 > lat) && (lat >= 32)) {\n    LetterDesignator = 'S';\n  }\n  else if ((32 > lat) && (lat >= 24)) {\n    LetterDesignator = 'R';\n  }\n  else if ((24 > lat) && (lat >= 16)) {\n    LetterDesignator = 'Q';\n  }\n  else if ((16 > lat) && (lat >= 8)) {\n    LetterDesignator = 'P';\n  }\n  else if ((8 > lat) && (lat >= 0)) {\n    LetterDesignator = 'N';\n  }\n  else if ((0 > lat) && (lat >= -8)) {\n    LetterDesignator = 'M';\n  }\n  else if ((-8 > lat) && (lat >= -16)) {\n    LetterDesignator = 'L';\n  }\n  else if ((-16 > lat) && (lat >= -24)) {\n    LetterDesignator = 'K';\n  }\n  else if ((-24 > lat) && (lat >= -32)) {\n    LetterDesignator = 'J';\n  }\n  else if ((-32 > lat) && (lat >= -40)) {\n    LetterDesignator = 'H';\n  }\n  else if ((-40 > lat) && (lat >= -48)) {\n    LetterDesignator = 'G';\n  }\n  else if ((-48 > lat) && (lat >= -56)) {\n    LetterDesignator = 'F';\n  }\n  else if ((-56 > lat) && (lat >= -64)) {\n    LetterDesignator = 'E';\n  }\n  else if ((-64 > lat) && (lat >= -72)) {\n    LetterDesignator = 'D';\n  }\n  else if ((-72 > lat) && (lat >= -80)) {\n    LetterDesignator = 'C';\n  }\n  return LetterDesignator;\n}\n\n/**\n * Encodes a UTM location as MGRS string.\n *\n * @private\n * @param {object} utm An object literal with easting, northing,\n *     zoneLetter, zoneNumber\n * @param {number} accuracy Accuracy in digits (1-5).\n * @return {string} MGRS string for the given UTM location.\n */\nfunction encode(utm, accuracy) {\n  // prepend with leading zeroes\n  var seasting = \"00000\" + utm.easting,\n    snorthing = \"00000\" + utm.northing;\n\n  return utm.zoneNumber + utm.zoneLetter + get100kID(utm.easting, utm.northing, utm.zoneNumber) + seasting.substr(seasting.length - 5, accuracy) + snorthing.substr(snorthing.length - 5, accuracy);\n}\n\n/**\n * Get the two letter 100k designator for a given UTM easting,\n * northing and zone number value.\n *\n * @private\n * @param {number} easting\n * @param {number} northing\n * @param {number} zoneNumber\n * @return the two letter 100k designator for the given UTM location.\n */\nfunction get100kID(easting, northing, zoneNumber) {\n  var setParm = get100kSetForZone(zoneNumber);\n  var setColumn = Math.floor(easting / 100000);\n  var setRow = Math.floor(northing / 100000) % 20;\n  return getLetter100kID(setColumn, setRow, setParm);\n}\n\n/**\n * Given a UTM zone number, figure out the MGRS 100K set it is in.\n *\n * @private\n * @param {number} i An UTM zone number.\n * @return {number} the 100k set the UTM zone is in.\n */\nfunction get100kSetForZone(i) {\n  var setParm = i % NUM_100K_SETS;\n  if (setParm === 0) {\n    setParm = NUM_100K_SETS;\n  }\n\n  return setParm;\n}\n\n/**\n * Get the two-letter MGRS 100k designator given information\n * translated from the UTM northing, easting and zone number.\n *\n * @private\n * @param {number} column the column index as it relates to the MGRS\n *        100k set spreadsheet, created from the UTM easting.\n *        Values are 1-8.\n * @param {number} row the row index as it relates to the MGRS 100k set\n *        spreadsheet, created from the UTM northing value. Values\n *        are from 0-19.\n * @param {number} parm the set block, as it relates to the MGRS 100k set\n *        spreadsheet, created from the UTM zone. Values are from\n *        1-60.\n * @return two letter MGRS 100k code.\n */\nfunction getLetter100kID(column, row, parm) {\n  // colOrigin and rowOrigin are the letters at the origin of the set\n  var index = parm - 1;\n  var colOrigin = SET_ORIGIN_COLUMN_LETTERS.charCodeAt(index);\n  var rowOrigin = SET_ORIGIN_ROW_LETTERS.charCodeAt(index);\n\n  // colInt and rowInt are the letters to build to return\n  var colInt = colOrigin + column - 1;\n  var rowInt = rowOrigin + row;\n  var rollover = false;\n\n  if (colInt > Z) {\n    colInt = colInt - Z + A - 1;\n    rollover = true;\n  }\n\n  if (colInt === I || (colOrigin < I && colInt > I) || ((colInt > I || colOrigin < I) && rollover)) {\n    colInt++;\n  }\n\n  if (colInt === O || (colOrigin < O && colInt > O) || ((colInt > O || colOrigin < O) && rollover)) {\n    colInt++;\n\n    if (colInt === I) {\n      colInt++;\n    }\n  }\n\n  if (colInt > Z) {\n    colInt = colInt - Z + A - 1;\n  }\n\n  if (rowInt > V) {\n    rowInt = rowInt - V + A - 1;\n    rollover = true;\n  }\n  else {\n    rollover = false;\n  }\n\n  if (((rowInt === I) || ((rowOrigin < I) && (rowInt > I))) || (((rowInt > I) || (rowOrigin < I)) && rollover)) {\n    rowInt++;\n  }\n\n  if (((rowInt === O) || ((rowOrigin < O) && (rowInt > O))) || (((rowInt > O) || (rowOrigin < O)) && rollover)) {\n    rowInt++;\n\n    if (rowInt === I) {\n      rowInt++;\n    }\n  }\n\n  if (rowInt > V) {\n    rowInt = rowInt - V + A - 1;\n  }\n\n  var twoLetter = String.fromCharCode(colInt) + String.fromCharCode(rowInt);\n  return twoLetter;\n}\n\n/**\n * Decode the UTM parameters from a MGRS string.\n *\n * @private\n * @param {string} mgrsString an UPPERCASE coordinate string is expected.\n * @return {object} An object literal with easting, northing, zoneLetter,\n *     zoneNumber and accuracy (in meters) properties.\n */\nfunction decode(mgrsString) {\n\n  if (mgrsString && mgrsString.length === 0) {\n    throw (\"MGRSPoint coverting from nothing\");\n  }\n\n  var length = mgrsString.length;\n\n  var hunK = null;\n  var sb = \"\";\n  var testChar;\n  var i = 0;\n\n  // get Zone number\n  while (!(/[A-Z]/).test(testChar = mgrsString.charAt(i))) {\n    if (i >= 2) {\n      throw (\"MGRSPoint bad conversion from: \" + mgrsString);\n    }\n    sb += testChar;\n    i++;\n  }\n\n  var zoneNumber = parseInt(sb, 10);\n\n  if (i === 0 || i + 3 > length) {\n    // A good MGRS string has to be 4-5 digits long,\n    // ##AAA/#AAA at least.\n    throw (\"MGRSPoint bad conversion from: \" + mgrsString);\n  }\n\n  var zoneLetter = mgrsString.charAt(i++);\n\n  // Should we check the zone letter here? Why not.\n  if (zoneLetter <= 'A' || zoneLetter === 'B' || zoneLetter === 'Y' || zoneLetter >= 'Z' || zoneLetter === 'I' || zoneLetter === 'O') {\n    throw (\"MGRSPoint zone letter \" + zoneLetter + \" not handled: \" + mgrsString);\n  }\n\n  hunK = mgrsString.substring(i, i += 2);\n\n  var set = get100kSetForZone(zoneNumber);\n\n  var east100k = getEastingFromChar(hunK.charAt(0), set);\n  var north100k = getNorthingFromChar(hunK.charAt(1), set);\n\n  // We have a bug where the northing may be 2000000 too low.\n  // How\n  // do we know when to roll over?\n\n  while (north100k < getMinNorthing(zoneLetter)) {\n    north100k += 2000000;\n  }\n\n  // calculate the char index for easting/northing separator\n  var remainder = length - i;\n\n  if (remainder % 2 !== 0) {\n    throw (\"MGRSPoint has to have an even number \\nof digits after the zone letter and two 100km letters - front \\nhalf for easting meters, second half for \\nnorthing meters\" + mgrsString);\n  }\n\n  var sep = remainder / 2;\n\n  var sepEasting = 0.0;\n  var sepNorthing = 0.0;\n  var accuracyBonus, sepEastingString, sepNorthingString, easting, northing;\n  if (sep > 0) {\n    accuracyBonus = 100000.0 / Math.pow(10, sep);\n    sepEastingString = mgrsString.substring(i, i + sep);\n    sepEasting = parseFloat(sepEastingString) * accuracyBonus;\n    sepNorthingString = mgrsString.substring(i + sep);\n    sepNorthing = parseFloat(sepNorthingString) * accuracyBonus;\n  }\n\n  easting = sepEasting + east100k;\n  northing = sepNorthing + north100k;\n\n  return {\n    easting: easting,\n    northing: northing,\n    zoneLetter: zoneLetter,\n    zoneNumber: zoneNumber,\n    accuracy: accuracyBonus\n  };\n}\n\n/**\n * Given the first letter from a two-letter MGRS 100k zone, and given the\n * MGRS table set for the zone number, figure out the easting value that\n * should be added to the other, secondary easting value.\n *\n * @private\n * @param {char} e The first letter from a two-letter MGRS 100´k zone.\n * @param {number} set The MGRS table set for the zone number.\n * @return {number} The easting value for the given letter and set.\n */\nfunction getEastingFromChar(e, set) {\n  // colOrigin is the letter at the origin of the set for the\n  // column\n  var curCol = SET_ORIGIN_COLUMN_LETTERS.charCodeAt(set - 1);\n  var eastingValue = 100000.0;\n  var rewindMarker = false;\n\n  while (curCol !== e.charCodeAt(0)) {\n    curCol++;\n    if (curCol === I) {\n      curCol++;\n    }\n    if (curCol === O) {\n      curCol++;\n    }\n    if (curCol > Z) {\n      if (rewindMarker) {\n        throw (\"Bad character: \" + e);\n      }\n      curCol = A;\n      rewindMarker = true;\n    }\n    eastingValue += 100000.0;\n  }\n\n  return eastingValue;\n}\n\n/**\n * Given the second letter from a two-letter MGRS 100k zone, and given the\n * MGRS table set for the zone number, figure out the northing value that\n * should be added to the other, secondary northing value. You have to\n * remember that Northings are determined from the equator, and the vertical\n * cycle of letters mean a 2000000 additional northing meters. This happens\n * approx. every 18 degrees of latitude. This method does *NOT* count any\n * additional northings. You have to figure out how many 2000000 meters need\n * to be added for the zone letter of the MGRS coordinate.\n *\n * @private\n * @param {char} n Second letter of the MGRS 100k zone\n * @param {number} set The MGRS table set number, which is dependent on the\n *     UTM zone number.\n * @return {number} The northing value for the given letter and set.\n */\nfunction getNorthingFromChar(n, set) {\n\n  if (n > 'V') {\n    throw (\"MGRSPoint given invalid Northing \" + n);\n  }\n\n  // rowOrigin is the letter at the origin of the set for the\n  // column\n  var curRow = SET_ORIGIN_ROW_LETTERS.charCodeAt(set - 1);\n  var northingValue = 0.0;\n  var rewindMarker = false;\n\n  while (curRow !== n.charCodeAt(0)) {\n    curRow++;\n    if (curRow === I) {\n      curRow++;\n    }\n    if (curRow === O) {\n      curRow++;\n    }\n    // fixing a bug making whole application hang in this loop\n    // when 'n' is a wrong character\n    if (curRow > V) {\n      if (rewindMarker) { // making sure that this loop ends\n        throw (\"Bad character: \" + n);\n      }\n      curRow = A;\n      rewindMarker = true;\n    }\n    northingValue += 100000.0;\n  }\n\n  return northingValue;\n}\n\n/**\n * The function getMinNorthing returns the minimum northing value of a MGRS\n * zone.\n *\n * Ported from Geotrans' c Lattitude_Band_Value structure table.\n *\n * @private\n * @param {char} zoneLetter The MGRS zone to get the min northing for.\n * @return {number}\n */\nfunction getMinNorthing(zoneLetter) {\n  var northing;\n  switch (zoneLetter) {\n  case 'C':\n    northing = 1100000.0;\n    break;\n  case 'D':\n    northing = 2000000.0;\n    break;\n  case 'E':\n    northing = 2800000.0;\n    break;\n  case 'F':\n    northing = 3700000.0;\n    break;\n  case 'G':\n    northing = 4600000.0;\n    break;\n  case 'H':\n    northing = 5500000.0;\n    break;\n  case 'J':\n    northing = 6400000.0;\n    break;\n  case 'K':\n    northing = 7300000.0;\n    break;\n  case 'L':\n    northing = 8200000.0;\n    break;\n  case 'M':\n    northing = 9100000.0;\n    break;\n  case 'N':\n    northing = 0.0;\n    break;\n  case 'P':\n    northing = 800000.0;\n    break;\n  case 'Q':\n    northing = 1700000.0;\n    break;\n  case 'R':\n    northing = 2600000.0;\n    break;\n  case 'S':\n    northing = 3500000.0;\n    break;\n  case 'T':\n    northing = 4400000.0;\n    break;\n  case 'U':\n    northing = 5300000.0;\n    break;\n  case 'V':\n    northing = 6200000.0;\n    break;\n  case 'W':\n    northing = 7000000.0;\n    break;\n  case 'X':\n    northing = 7900000.0;\n    break;\n  default:\n    northing = -1.0;\n  }\n  if (northing >= 0.0) {\n    return northing;\n  }\n  else {\n    throw (\"Invalid zone letter: \" + zoneLetter);\n  }\n\n}\n"]},"metadata":{},"sourceType":"module"}