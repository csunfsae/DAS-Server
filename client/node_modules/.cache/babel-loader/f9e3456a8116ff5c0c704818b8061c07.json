{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\brand\\\\source\\\\repos\\\\das-server\\\\client\\\\src\\\\components\\\\historyPage\\\\graphicalView\\\\SensorGraph\\\\SensorGraph.js\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, useEffect } from 'react';\nimport { select, line, curveLinear, axisLeft } from 'd3';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction SensorGraph({\n  sensor,\n  sensorData,\n  isFirstSensor,\n  yScale,\n  width,\n  index,\n  minValue,\n  maxValue\n}) {\n  _s();\n\n  const gRef = useRef(null);\n\n  const getMinMaxValues = values => {\n    let greatestValue = values[0].value[\"$numberDecimal\"];\n    let lowestValue = values[0].value[\"$numberDecimal\"];\n\n    for (const valueIndex of values) {\n      if (parseFloat(valueIndex.value[\"$numberDecimal\"].toString()) > greatestValue) {\n        greatestValue = valueIndex.value[\"$numberDecimal\"];\n      }\n\n      if (parseFloat(valueIndex.value[\"$numberDecimal\"].toString()) < lowestValue) {\n        lowestValue = valueIndex.value[\"$numberDecimal\"];\n      }\n    }\n\n    return {\n      greatestValue,\n      lowestValue\n    };\n  };\n\n  const getLongestLap = laps => {\n    let longestLap = laps[0]; // console.log(\"laps\", laps);\n\n    for (let lap of laps) {\n      if (lap.length > longestLap.length) {\n        longestLap = lap;\n      }\n    }\n\n    return longestLap;\n  };\n\n  useEffect(() => {\n    if (gRef.current) {\n      const g = select(gRef.current);\n      const longestLap = getLongestLap(sensorData);\n      const {\n        greatestValue,\n        lowestValue\n      } = getMinMaxValues(longestLap);\n      const xMultiplier = parseFloat(parseFloat(width - 100) / parseFloat(longestLap[longestLap.length - 1].lapTime[\"$numberDecimal\"].toString()));\n      const yMultiplier = parseFloat(parseFloat(300) / parseFloat(maxValue));\n      const chartLine = line().x(p => parseFloat(parseFloat(p.lapTime[\"$numberDecimal\"].toString()) * xMultiplier)).y(p => parseFloat(parseFloat(300) - Math.abs(parseFloat(parseFloat(p.value[\"$numberDecimal\"].toString()) * parseFloat(yMultiplier))))).curve(curveLinear);\n\n      for (let i = 0; i < sensorData.length; i++) {\n        g.append(\"path\").data([sensorData[i]]).attr(\"d\", value => chartLine(value)).attr(\"fill\", \"none\").attr(\"stroke\", \"#\" + ((1 << 24) * Math.random() | 0).toString(16)).attr('stroke-width', '2px').attr(\"class\", \"line\");\n      }\n\n      const yAxis = axisLeft(yScale);\n      g.select('.y-axis').call(yAxis);\n\n      if (!isFirstSensor) {\n        g.style('transform', `translateY(${index * 350}px)`);\n      }\n    }\n  }, [gRef, width]);\n  return /*#__PURE__*/_jsxDEV(\"g\", {\n    ref: gRef,\n    className: \"chart\",\n    children: [/*#__PURE__*/_jsxDEV(\"g\", {\n      children: sensor\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"g\", {\n      className: \"y-axis\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 9\n  }, this);\n}\n\n_s(SensorGraph, \"U7WD8RHZHvd5+vSuxaJzpxy9rB0=\");\n\n_c = SensorGraph;\nexport default SensorGraph;\n\nvar _c;\n\n$RefreshReg$(_c, \"SensorGraph\");","map":{"version":3,"sources":["C:/Users/brand/source/repos/das-server/client/src/components/historyPage/graphicalView/SensorGraph/SensorGraph.js"],"names":["React","useRef","useEffect","select","line","curveLinear","axisLeft","SensorGraph","sensor","sensorData","isFirstSensor","yScale","width","index","minValue","maxValue","gRef","getMinMaxValues","values","greatestValue","value","lowestValue","valueIndex","parseFloat","toString","getLongestLap","laps","longestLap","lap","length","current","g","xMultiplier","lapTime","yMultiplier","chartLine","x","p","y","Math","abs","curve","i","append","data","attr","random","yAxis","call","style"],"mappings":"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","sourcesContent":["import React, {useRef, useEffect} from 'react'\r\nimport {select, line, curveLinear, axisLeft} from 'd3';\r\n\r\nfunction SensorGraph({sensor, sensorData, isFirstSensor, yScale, width, index, minValue, maxValue}) {\r\n    const gRef = useRef(null);\r\n\r\n    const getMinMaxValues = (values) =>  {\r\n        let greatestValue = values[0].value[\"$numberDecimal\"];\r\n        let lowestValue = values[0].value[\"$numberDecimal\"];\r\n        \r\n        for (const valueIndex of values) {\r\n\r\n            if (parseFloat(valueIndex.value[\"$numberDecimal\"].toString()) > greatestValue) {\r\n                greatestValue = valueIndex.value[\"$numberDecimal\"]\r\n            }\r\n\r\n            if ( parseFloat(valueIndex.value[\"$numberDecimal\"].toString()) < lowestValue) {\r\n                lowestValue = valueIndex.value[\"$numberDecimal\"]\r\n            }\r\n        }\r\n\r\n        return {\r\n            greatestValue,\r\n            lowestValue\r\n        }\r\n    }\r\n\r\n    const getLongestLap = (laps) => {\r\n        let longestLap = laps[0];\r\n        // console.log(\"laps\", laps);\r\n        for (let lap of laps) {\r\n            if(lap.length > longestLap.length) {\r\n                longestLap = lap;\r\n            }\r\n        }\r\n        return longestLap;\r\n    }\r\n\r\n    useEffect( ()=> {\r\n        if(gRef.current) {\r\n            const g = select(gRef.current);\r\n\r\n            const longestLap = getLongestLap(sensorData);\r\n\r\n            const {greatestValue, lowestValue} = getMinMaxValues(longestLap);\r\n            \r\n            const xMultiplier =  parseFloat(parseFloat(width - 100) / parseFloat(longestLap[longestLap.length - 1].lapTime[\"$numberDecimal\"].toString()));\r\n            const yMultiplier = parseFloat(parseFloat(300) / parseFloat(maxValue));\r\n\r\n\r\n            const chartLine = line().x( p => parseFloat(parseFloat(p.lapTime[\"$numberDecimal\"].toString()) * xMultiplier) ).y( (p) => parseFloat( parseFloat(300) - Math.abs(parseFloat( parseFloat( p.value[\"$numberDecimal\"].toString() ) * parseFloat(yMultiplier ) ))  ) ).curve(curveLinear); \r\n\r\n            for(let i = 0; i < sensorData.length; i++) {\r\n                g.append(\"path\").data([sensorData[i]]).attr(\"d\", value => chartLine(value)).attr(\"fill\", \"none\").attr(\"stroke\", \"#\" + ((1<<24)*Math.random() | 0).toString(16)).attr('stroke-width', '2px').attr(\"class\",\"line\");\r\n            }\r\n\r\n            const yAxis = axisLeft(yScale)\r\n            g.select('.y-axis').call(yAxis)\r\n            \r\n            if(!isFirstSensor) {\r\n                g.style('transform', `translateY(${index * 350}px)`);\r\n            } \r\n        }\r\n\r\n        \r\n\r\n    }, [gRef, width])\r\n\r\n    return (\r\n        <g ref={gRef} className=\"chart\">\r\n            <g>{sensor}</g>\r\n            <g className=\"y-axis\" />\r\n        </g>\r\n    )\r\n}\r\n\r\nexport default SensorGraph;\r\n"]},"metadata":{},"sourceType":"module"}