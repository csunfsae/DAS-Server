{"ast":null,"code":"/**\n * Resources for details of NTv2 file formats:\n * - https://web.archive.org/web/20140127204822if_/http://www.mgs.gov.on.ca:80/stdprodconsume/groups/content/@mgs/@iandit/documents/resourcelist/stel02_047447.pdf\n * - http://mimaka.com/help/gs/html/004_NTV2%20Data%20Format.htm\n */\nvar loadedNadgrids = {};\n/**\n * Load a binary NTv2 file (.gsb) to a key that can be used in a proj string like +nadgrids=<key>. Pass the NTv2 file\n * as an ArrayBuffer.\n */\n\nexport default function nadgrid(key, data) {\n  var view = new DataView(data);\n  var isLittleEndian = detectLittleEndian(view);\n  var header = readHeader(view, isLittleEndian);\n\n  if (header.nSubgrids > 1) {\n    console.log('Only single NTv2 subgrids are currently supported, subsequent sub grids are ignored');\n  }\n\n  var subgrids = readSubgrids(view, header, isLittleEndian);\n  var nadgrid = {\n    header: header,\n    subgrids: subgrids\n  };\n  loadedNadgrids[key] = nadgrid;\n  return nadgrid;\n}\n/**\n * Given a proj4 value for nadgrids, return an array of loaded grids\n */\n\nexport function getNadgrids(nadgrids) {\n  // Format details: http://proj.maptools.org/gen_parms.html\n  if (nadgrids === undefined) {\n    return null;\n  }\n\n  var grids = nadgrids.split(',');\n  return grids.map(parseNadgridString);\n}\n\nfunction parseNadgridString(value) {\n  if (value.length === 0) {\n    return null;\n  }\n\n  var optional = value[0] === '@';\n\n  if (optional) {\n    value = value.slice(1);\n  }\n\n  if (value === 'null') {\n    return {\n      name: 'null',\n      mandatory: !optional,\n      grid: null,\n      isNull: true\n    };\n  }\n\n  return {\n    name: value,\n    mandatory: !optional,\n    grid: loadedNadgrids[value] || null,\n    isNull: false\n  };\n}\n\nfunction secondsToRadians(seconds) {\n  return seconds / 3600 * Math.PI / 180;\n}\n\nfunction detectLittleEndian(view) {\n  var nFields = view.getInt32(8, false);\n\n  if (nFields === 11) {\n    return false;\n  }\n\n  nFields = view.getInt32(8, true);\n\n  if (nFields !== 11) {\n    console.warn('Failed to detect nadgrid endian-ness, defaulting to little-endian');\n  }\n\n  return true;\n}\n\nfunction readHeader(view, isLittleEndian) {\n  return {\n    nFields: view.getInt32(8, isLittleEndian),\n    nSubgridFields: view.getInt32(24, isLittleEndian),\n    nSubgrids: view.getInt32(40, isLittleEndian),\n    shiftType: decodeString(view, 56, 56 + 8).trim(),\n    fromSemiMajorAxis: view.getFloat64(120, isLittleEndian),\n    fromSemiMinorAxis: view.getFloat64(136, isLittleEndian),\n    toSemiMajorAxis: view.getFloat64(152, isLittleEndian),\n    toSemiMinorAxis: view.getFloat64(168, isLittleEndian)\n  };\n}\n\nfunction decodeString(view, start, end) {\n  return String.fromCharCode.apply(null, new Uint8Array(view.buffer.slice(start, end)));\n}\n\nfunction readSubgrids(view, header, isLittleEndian) {\n  var gridOffset = 176;\n  var grids = [];\n\n  for (var i = 0; i < header.nSubgrids; i++) {\n    var subHeader = readGridHeader(view, gridOffset, isLittleEndian);\n    var nodes = readGridNodes(view, gridOffset, subHeader, isLittleEndian);\n    var lngColumnCount = Math.round(1 + (subHeader.upperLongitude - subHeader.lowerLongitude) / subHeader.longitudeInterval);\n    var latColumnCount = Math.round(1 + (subHeader.upperLatitude - subHeader.lowerLatitude) / subHeader.latitudeInterval); // Proj4 operates on radians whereas the coordinates are in seconds in the grid\n\n    grids.push({\n      ll: [secondsToRadians(subHeader.lowerLongitude), secondsToRadians(subHeader.lowerLatitude)],\n      del: [secondsToRadians(subHeader.longitudeInterval), secondsToRadians(subHeader.latitudeInterval)],\n      lim: [lngColumnCount, latColumnCount],\n      count: subHeader.gridNodeCount,\n      cvs: mapNodes(nodes)\n    });\n  }\n\n  return grids;\n}\n\nfunction mapNodes(nodes) {\n  return nodes.map(function (r) {\n    return [secondsToRadians(r.longitudeShift), secondsToRadians(r.latitudeShift)];\n  });\n}\n\nfunction readGridHeader(view, offset, isLittleEndian) {\n  return {\n    name: decodeString(view, offset + 8, offset + 16).trim(),\n    parent: decodeString(view, offset + 24, offset + 24 + 8).trim(),\n    lowerLatitude: view.getFloat64(offset + 72, isLittleEndian),\n    upperLatitude: view.getFloat64(offset + 88, isLittleEndian),\n    lowerLongitude: view.getFloat64(offset + 104, isLittleEndian),\n    upperLongitude: view.getFloat64(offset + 120, isLittleEndian),\n    latitudeInterval: view.getFloat64(offset + 136, isLittleEndian),\n    longitudeInterval: view.getFloat64(offset + 152, isLittleEndian),\n    gridNodeCount: view.getInt32(offset + 168, isLittleEndian)\n  };\n}\n\nfunction readGridNodes(view, offset, gridHeader, isLittleEndian) {\n  var nodesOffset = offset + 176;\n  var gridRecordLength = 16;\n  var gridShiftRecords = [];\n\n  for (var i = 0; i < gridHeader.gridNodeCount; i++) {\n    var record = {\n      latitudeShift: view.getFloat32(nodesOffset + i * gridRecordLength, isLittleEndian),\n      longitudeShift: view.getFloat32(nodesOffset + i * gridRecordLength + 4, isLittleEndian),\n      latitudeAccuracy: view.getFloat32(nodesOffset + i * gridRecordLength + 8, isLittleEndian),\n      longitudeAccuracy: view.getFloat32(nodesOffset + i * gridRecordLength + 12, isLittleEndian)\n    };\n    gridShiftRecords.push(record);\n  }\n\n  return gridShiftRecords;\n}","map":{"version":3,"sources":["C:/Users/brand/source/repos/das-server/client/node_modules/proj4/lib/nadgrid.js"],"names":["loadedNadgrids","nadgrid","key","data","view","DataView","isLittleEndian","detectLittleEndian","header","readHeader","nSubgrids","console","log","subgrids","readSubgrids","getNadgrids","nadgrids","undefined","grids","split","map","parseNadgridString","value","length","optional","slice","name","mandatory","grid","isNull","secondsToRadians","seconds","Math","PI","nFields","getInt32","warn","nSubgridFields","shiftType","decodeString","trim","fromSemiMajorAxis","getFloat64","fromSemiMinorAxis","toSemiMajorAxis","toSemiMinorAxis","start","end","String","fromCharCode","apply","Uint8Array","buffer","gridOffset","i","subHeader","readGridHeader","nodes","readGridNodes","lngColumnCount","round","upperLongitude","lowerLongitude","longitudeInterval","latColumnCount","upperLatitude","lowerLatitude","latitudeInterval","push","ll","del","lim","count","gridNodeCount","cvs","mapNodes","r","longitudeShift","latitudeShift","offset","parent","gridHeader","nodesOffset","gridRecordLength","gridShiftRecords","record","getFloat32","latitudeAccuracy","longitudeAccuracy"],"mappings":"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","sourcesContent":["/**\n * Resources for details of NTv2 file formats:\n * - https://web.archive.org/web/20140127204822if_/http://www.mgs.gov.on.ca:80/stdprodconsume/groups/content/@mgs/@iandit/documents/resourcelist/stel02_047447.pdf\n * - http://mimaka.com/help/gs/html/004_NTV2%20Data%20Format.htm\n */\n\nvar loadedNadgrids = {};\n\n/**\n * Load a binary NTv2 file (.gsb) to a key that can be used in a proj string like +nadgrids=<key>. Pass the NTv2 file\n * as an ArrayBuffer.\n */\nexport default function nadgrid(key, data) {\n  var view = new DataView(data);\n  var isLittleEndian = detectLittleEndian(view);\n  var header = readHeader(view, isLittleEndian);\n  if (header.nSubgrids > 1) {\n    console.log('Only single NTv2 subgrids are currently supported, subsequent sub grids are ignored');\n  }\n  var subgrids = readSubgrids(view, header, isLittleEndian);\n  var nadgrid = {header: header, subgrids: subgrids};\n  loadedNadgrids[key] = nadgrid;\n  return nadgrid;\n}\n\n/**\n * Given a proj4 value for nadgrids, return an array of loaded grids\n */\nexport function getNadgrids(nadgrids) {\n  // Format details: http://proj.maptools.org/gen_parms.html\n  if (nadgrids === undefined) { return null; }\n  var grids = nadgrids.split(',');\n  return grids.map(parseNadgridString);\n}\n\nfunction parseNadgridString(value) {\n  if (value.length === 0) {\n    return null;\n  }\n  var optional = value[0] === '@';\n  if (optional) {\n    value = value.slice(1);\n  }\n  if (value === 'null') {\n    return {name: 'null', mandatory: !optional, grid: null, isNull: true};\n  }\n  return {\n    name: value,\n    mandatory: !optional,\n    grid: loadedNadgrids[value] || null,\n    isNull: false\n  };\n}\n\nfunction secondsToRadians(seconds) {\n  return (seconds / 3600) * Math.PI / 180;\n}\n\nfunction detectLittleEndian(view) {\n  var nFields = view.getInt32(8, false);\n  if (nFields === 11) {\n    return false;\n  }\n  nFields = view.getInt32(8, true);\n  if (nFields !== 11) {\n    console.warn('Failed to detect nadgrid endian-ness, defaulting to little-endian');\n  }\n  return true;\n}\n\nfunction readHeader(view, isLittleEndian) {\n  return {\n    nFields: view.getInt32(8, isLittleEndian),\n    nSubgridFields: view.getInt32(24, isLittleEndian),\n    nSubgrids: view.getInt32(40, isLittleEndian),\n    shiftType: decodeString(view, 56, 56 + 8).trim(),\n    fromSemiMajorAxis: view.getFloat64(120, isLittleEndian),\n    fromSemiMinorAxis: view.getFloat64(136, isLittleEndian),\n    toSemiMajorAxis: view.getFloat64(152, isLittleEndian),\n    toSemiMinorAxis: view.getFloat64(168, isLittleEndian),\n  };\n}\n\nfunction decodeString(view, start, end) {\n  return String.fromCharCode.apply(null, new Uint8Array(view.buffer.slice(start, end)));\n}\n\nfunction readSubgrids(view, header, isLittleEndian) {\n  var gridOffset = 176;\n  var grids = [];\n  for (var i = 0; i < header.nSubgrids; i++) {\n    var subHeader = readGridHeader(view, gridOffset, isLittleEndian);\n    var nodes = readGridNodes(view, gridOffset, subHeader, isLittleEndian);\n    var lngColumnCount = Math.round(\n      1 + (subHeader.upperLongitude - subHeader.lowerLongitude) / subHeader.longitudeInterval);\n    var latColumnCount = Math.round(\n      1 + (subHeader.upperLatitude - subHeader.lowerLatitude) / subHeader.latitudeInterval);\n    // Proj4 operates on radians whereas the coordinates are in seconds in the grid\n    grids.push({\n      ll: [secondsToRadians(subHeader.lowerLongitude), secondsToRadians(subHeader.lowerLatitude)],\n      del: [secondsToRadians(subHeader.longitudeInterval), secondsToRadians(subHeader.latitudeInterval)],\n      lim: [lngColumnCount, latColumnCount],\n      count: subHeader.gridNodeCount,\n      cvs: mapNodes(nodes)\n    });\n  }\n  return grids;\n}\n\nfunction mapNodes(nodes) {\n  return nodes.map(function (r) {return [secondsToRadians(r.longitudeShift), secondsToRadians(r.latitudeShift)];});\n}\n\nfunction readGridHeader(view, offset, isLittleEndian) {\n  return {\n    name: decodeString(view, offset + 8, offset + 16).trim(),\n    parent: decodeString(view, offset + 24, offset + 24 + 8).trim(),\n    lowerLatitude: view.getFloat64(offset + 72, isLittleEndian),\n    upperLatitude: view.getFloat64(offset + 88, isLittleEndian),\n    lowerLongitude: view.getFloat64(offset + 104, isLittleEndian),\n    upperLongitude: view.getFloat64(offset + 120, isLittleEndian),\n    latitudeInterval: view.getFloat64(offset + 136, isLittleEndian),\n    longitudeInterval: view.getFloat64(offset + 152, isLittleEndian),\n    gridNodeCount: view.getInt32(offset + 168, isLittleEndian)\n  };\n}\n\nfunction readGridNodes(view, offset, gridHeader, isLittleEndian) {\n  var nodesOffset = offset + 176;\n  var gridRecordLength = 16;\n  var gridShiftRecords = [];\n  for (var i = 0; i < gridHeader.gridNodeCount; i++) {\n    var record = {\n      latitudeShift: view.getFloat32(nodesOffset + i * gridRecordLength, isLittleEndian),\n      longitudeShift: view.getFloat32(nodesOffset + i * gridRecordLength + 4, isLittleEndian),\n      latitudeAccuracy: view.getFloat32(nodesOffset + i * gridRecordLength + 8, isLittleEndian),\n      longitudeAccuracy: view.getFloat32(nodesOffset + i * gridRecordLength + 12, isLittleEndian),\n    };\n    gridShiftRecords.push(record);\n  }\n  return gridShiftRecords;\n}\n"]},"metadata":{},"sourceType":"module"}