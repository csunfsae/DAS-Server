{"ast":null,"code":"import adjust_lon from '../common/adjust_lon';\nimport asinz from '../common/asinz';\nimport { EPSLN, HALF_PI } from '../constants/values';\nexport function init() {\n  //double temp;      /* temporary variable    */\n\n  /* Place parameters in static storage for common use\n      -------------------------------------------------*/\n  this.sin_p14 = Math.sin(this.lat0);\n  this.cos_p14 = Math.cos(this.lat0);\n}\n/* Orthographic forward equations--mapping lat,long to x,y\n    ---------------------------------------------------*/\n\nexport function forward(p) {\n  var sinphi, cosphi;\n  /* sin and cos value        */\n\n  var dlon;\n  /* delta longitude value      */\n\n  var coslon;\n  /* cos of longitude        */\n\n  var ksp;\n  /* scale factor          */\n\n  var g, x, y;\n  var lon = p.x;\n  var lat = p.y;\n  /* Forward equations\n      -----------------*/\n\n  dlon = adjust_lon(lon - this.long0);\n  sinphi = Math.sin(lat);\n  cosphi = Math.cos(lat);\n  coslon = Math.cos(dlon);\n  g = this.sin_p14 * sinphi + this.cos_p14 * cosphi * coslon;\n  ksp = 1;\n\n  if (g > 0 || Math.abs(g) <= EPSLN) {\n    x = this.a * ksp * cosphi * Math.sin(dlon);\n    y = this.y0 + this.a * ksp * (this.cos_p14 * sinphi - this.sin_p14 * cosphi * coslon);\n  }\n\n  p.x = x;\n  p.y = y;\n  return p;\n}\nexport function inverse(p) {\n  var rh;\n  /* height above ellipsoid      */\n\n  var z;\n  /* angle          */\n\n  var sinz, cosz;\n  /* sin of z and cos of z      */\n\n  var con;\n  var lon, lat;\n  /* Inverse equations\n      -----------------*/\n\n  p.x -= this.x0;\n  p.y -= this.y0;\n  rh = Math.sqrt(p.x * p.x + p.y * p.y);\n  z = asinz(rh / this.a);\n  sinz = Math.sin(z);\n  cosz = Math.cos(z);\n  lon = this.long0;\n\n  if (Math.abs(rh) <= EPSLN) {\n    lat = this.lat0;\n    p.x = lon;\n    p.y = lat;\n    return p;\n  }\n\n  lat = asinz(cosz * this.sin_p14 + p.y * sinz * this.cos_p14 / rh);\n  con = Math.abs(this.lat0) - HALF_PI;\n\n  if (Math.abs(con) <= EPSLN) {\n    if (this.lat0 >= 0) {\n      lon = adjust_lon(this.long0 + Math.atan2(p.x, -p.y));\n    } else {\n      lon = adjust_lon(this.long0 - Math.atan2(-p.x, p.y));\n    }\n\n    p.x = lon;\n    p.y = lat;\n    return p;\n  }\n\n  lon = adjust_lon(this.long0 + Math.atan2(p.x * sinz, rh * this.cos_p14 * cosz - p.y * this.sin_p14 * sinz));\n  p.x = lon;\n  p.y = lat;\n  return p;\n}\nexport var names = [\"ortho\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names\n};","map":{"version":3,"sources":["C:/Users/brand/source/repos/DAS-Server/client/node_modules/proj4/lib/projections/ortho.js"],"names":["adjust_lon","asinz","EPSLN","HALF_PI","init","sin_p14","Math","sin","lat0","cos_p14","cos","forward","p","sinphi","cosphi","dlon","coslon","ksp","g","x","y","lon","lat","long0","abs","a","y0","inverse","rh","z","sinz","cosz","con","x0","sqrt","atan2","names"],"mappings":"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","sourcesContent":["import adjust_lon from '../common/adjust_lon';\nimport asinz from '../common/asinz';\nimport {EPSLN, HALF_PI} from '../constants/values';\n\nexport function init() {\n  //double temp;      /* temporary variable    */\n\n  /* Place parameters in static storage for common use\n      -------------------------------------------------*/\n  this.sin_p14 = Math.sin(this.lat0);\n  this.cos_p14 = Math.cos(this.lat0);\n}\n\n/* Orthographic forward equations--mapping lat,long to x,y\n    ---------------------------------------------------*/\nexport function forward(p) {\n  var sinphi, cosphi; /* sin and cos value        */\n  var dlon; /* delta longitude value      */\n  var coslon; /* cos of longitude        */\n  var ksp; /* scale factor          */\n  var g, x, y;\n  var lon = p.x;\n  var lat = p.y;\n  /* Forward equations\n      -----------------*/\n  dlon = adjust_lon(lon - this.long0);\n\n  sinphi = Math.sin(lat);\n  cosphi = Math.cos(lat);\n\n  coslon = Math.cos(dlon);\n  g = this.sin_p14 * sinphi + this.cos_p14 * cosphi * coslon;\n  ksp = 1;\n  if ((g > 0) || (Math.abs(g) <= EPSLN)) {\n    x = this.a * ksp * cosphi * Math.sin(dlon);\n    y = this.y0 + this.a * ksp * (this.cos_p14 * sinphi - this.sin_p14 * cosphi * coslon);\n  }\n  p.x = x;\n  p.y = y;\n  return p;\n}\n\nexport function inverse(p) {\n  var rh; /* height above ellipsoid      */\n  var z; /* angle          */\n  var sinz, cosz; /* sin of z and cos of z      */\n  var con;\n  var lon, lat;\n  /* Inverse equations\n      -----------------*/\n  p.x -= this.x0;\n  p.y -= this.y0;\n  rh = Math.sqrt(p.x * p.x + p.y * p.y);\n  z = asinz(rh / this.a);\n\n  sinz = Math.sin(z);\n  cosz = Math.cos(z);\n\n  lon = this.long0;\n  if (Math.abs(rh) <= EPSLN) {\n    lat = this.lat0;\n    p.x = lon;\n    p.y = lat;\n    return p;\n  }\n  lat = asinz(cosz * this.sin_p14 + (p.y * sinz * this.cos_p14) / rh);\n  con = Math.abs(this.lat0) - HALF_PI;\n  if (Math.abs(con) <= EPSLN) {\n    if (this.lat0 >= 0) {\n      lon = adjust_lon(this.long0 + Math.atan2(p.x, - p.y));\n    }\n    else {\n      lon = adjust_lon(this.long0 - Math.atan2(-p.x, p.y));\n    }\n    p.x = lon;\n    p.y = lat;\n    return p;\n  }\n  lon = adjust_lon(this.long0 + Math.atan2((p.x * sinz), rh * this.cos_p14 * cosz - p.y * this.sin_p14 * sinz));\n  p.x = lon;\n  p.y = lat;\n  return p;\n}\n\nexport var names = [\"ortho\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names\n};\n"]},"metadata":{},"sourceType":"module"}