{"ast":null,"code":"import _toConsumableArray from\"C:/Users/brand/source/repos/DAS-Server/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import _createForOfIteratorHelper from\"C:/Users/brand/source/repos/DAS-Server/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";import _slicedToArray from\"C:/Users/brand/source/repos/DAS-Server/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useEffect,useRef,useState}from'react';import SensorGraph from'./SensorGraph/SensorGraph';import{useSelector,useDispatch}from'react-redux';import{select,bisector,scaleLinear,axisBottom,zoom,zoomTransform}from'd3';import{loadDefaultSensorData}from'../../../actions/historyPage/historicalPageActions';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";function GraphicalView(){var sensorsData=useSelector(function(state){return state.generalHistoricalData.sensorsData;});var dispatch=useDispatch();var _useState=useState({height:0,width:0}),_useState2=_slicedToArray(_useState,2),dimensions=_useState2[0],setDimensions=_useState2[1];var _useState3=useState(),_useState4=_slicedToArray(_useState3,2),currentZoomState=_useState4[0],setCurrentZoomState=_useState4[1];var margin={top:50,right:50,bottom:50,left:50};var innerHeight=dimensions.height-margin.top-margin.bottom;var innerWidth=dimensions.width-margin.left-margin.right;var svgRef=useRef();var svg=null;var xScale=null;var yScales={};var renderGraphs=function renderGraphs(){var sensorGraphs=[];var sensorIndex=0;if(dimensions.height!==0){for(var sensor in sensorsData){yScales[sensor]=null;var currentMinMax=getLapMinMaxValues(sensorsData[sensor][0]);// find min and max in all of the sensors laps\nvar _iterator=_createForOfIteratorHelper(sensorsData[sensor]),_step;try{for(_iterator.s();!(_step=_iterator.n()).done;){var lap=_step.value;var _getLapMinMaxValues=getLapMinMaxValues(lap),minValue=_getLapMinMaxValues.minValue,maxValue=_getLapMinMaxValues.maxValue;currentMinMax=getMinMax(currentMinMax.minValue,minValue,currentMinMax.maxValue,maxValue);}}catch(err){_iterator.e(err);}finally{_iterator.f();}var yScale=scaleLinear().domain([currentMinMax.minValue,currentMinMax.maxValue]).range([300,0]);yScales[sensor]=yScale;var isFirstSensor=sensorIndex===0?true:false;sensorGraphs=[].concat(_toConsumableArray(sensorGraphs),[/*#__PURE__*/_jsx(SensorGraph,{minValue:currentMinMax.minValue,maxValue:currentMinMax.maxValue,index:sensorIndex,width:dimensions.width,yScale:yScales[sensor],isFirstSensor:isFirstSensor,sensor:sensor,sensorData:sensorsData[sensor]})]);sensorIndex++;}}return sensorGraphs;};var getMinMax=function getMinMax(currentMin,minValue,currentMax,maxValue){if(currentMin>minValue){currentMin=minValue;}if(currentMax<maxValue){currentMax=maxValue;}return{minValue:currentMin,maxValue:currentMax};};var getLapMinMaxValues=function getLapMinMaxValues(lapValues){var minValue=lapValues[0].value[\"$numberDecimal\"];var maxValue=lapValues[0].value[\"$numberDecimal\"];var _iterator2=_createForOfIteratorHelper(lapValues),_step2;try{for(_iterator2.s();!(_step2=_iterator2.n()).done;){var valueIndex=_step2.value;if(parseFloat(valueIndex.value[\"$numberDecimal\"].toString())>maxValue){maxValue=valueIndex.value[\"$numberDecimal\"];}if(parseFloat(valueIndex.value[\"$numberDecimal\"].toString())<minValue){minValue=valueIndex.value[\"$numberDecimal\"];}}}catch(err){_iterator2.e(err);}finally{_iterator2.f();}return{minValue:minValue,maxValue:maxValue};};var getLongestLap=function getLongestLap(){var firstSensor=sensorsData[Object.keys(sensorsData)[0]];var longestLap=firstSensor[0];var _iterator3=_createForOfIteratorHelper(firstSensor),_step3;try{for(_iterator3.s();!(_step3=_iterator3.n()).done;){var lap=_step3.value;if(lap.length>longestLap.length){longestLap=lap;}}}catch(err){_iterator3.e(err);}finally{_iterator3.f();}return longestLap;};var renderMousePerLines=function renderMousePerLines(svg){for(var sensor in sensorsData){for(var index in sensorsData[sensor]){var mousePerLine=svg.select('.mouseover').append(\"g\").data([sensorsData[sensor][index]]).attr(\"class\",\"mouse-per-line\");mousePerLine.append(\"circle\").attr(\"r\",7).style(\"fill\",\"none\").style(\"stroke\",\"black\").style(\"stroke-width\",\"1px\").attr(\"class\",\"mouse-circle\");mousePerLine.append(\"text\").attr(\"transform\",\"translate(10,3)\");}}};useEffect(function(){dispatch(loadDefaultSensorData());},[]);useEffect(function(){if(svgRef.current&&Object.keys(sensorsData).length>0){var height=Object.keys(sensorsData).length*600;var width=svgRef.current.parentNode.getBoundingClientRect().width;setDimensions({height:height,width:width});var longestLap=getLongestLap();svg=select(svgRef.current);renderMousePerLines(svg);xScale=scaleLinear().domain([parseFloat(longestLap[0].lapTime[\"$numberDecimal\"].toString()),parseFloat(longestLap[longestLap.length-1].lapTime[\"$numberDecimal\"].toString())]).range([0,dimensions.width]);var xAxis=axisBottom(xScale).ticks(30);svg.select('.x-axis').style('transform',\"translateY(\".concat(Object.keys(sensorsData).length*600,\"px)\")).call(xAxis);}},[sensorsData,svgRef,sensorsData]);useEffect(function(){if(svgRef.current&&Object.keys(sensorsData).length>0){svg=select(svgRef.current);var longestLap=getLongestLap();xScale=scaleLinear().domain([parseFloat(longestLap[0].lapTime[\"$numberDecimal\"].toString()),parseFloat(longestLap[longestLap.length-1].lapTime[\"$numberDecimal\"].toString())]).range([0,innerWidth]);if(currentZoomState){var newXScale=currentZoomState.rescaleX(xScale);xScale.domain(newXScale.domain());}var xAxis=axisBottom(xScale);var xOffset=(Object.keys(sensorsData).length-1)*350+300;console.log(Object.keys(sensorsData).length);console.log(xOffset);svg.select('.x-axis').style('transform',\"translateY(\".concat(xOffset,\"px)\")).call(xAxis);// Object.keys(sensorsData).length * 383\n// const zoomBehavior = zoom().scaleExtent([1, 10]).translateExtent([ [0,0], [dimensions.width, dimensions.height] ])\n// .on(\"zoom\", () => { \n//     const zoomState = zoomTransform(svg.node());\n//     setCurrentZoomState(zoomState);\n//     // console.log(zoomState)\n// })\n// svg.call(zoomBehavior);\n}},[dimensions,currentZoomState,sensorsData]);var showLine=function showLine(mouseClick){// console.log(mouseClick);\nvar mouseClickX=mouseClick.clientX-margin.left;var clickedPosition=null;if(svgRef.current){(function(){var index1=0;var sensorIndex=0;for(var sensor in sensorsData){for(var index in sensorsData[sensor]){var lapForSensor=sensorsData[sensor][index];var x0=xScale.invert(mouseClickX);var roundedX0=Math.round(x0*10)/10;var lapTimes=convertLapTimesToArray(lapForSensor);var bisect=bisector(function(lapTimes){return lapTimes;}).center;var idx=bisect(lapTimes,roundedX0);clickedPosition=lapForSensor[idx];var x=mouseClickX;var beginning=x;var end=svg.selectAll('.line')[\"_groups\"][0][index1].getTotalLength();var target=null;var pos=null;while(true){target=Math.floor((beginning+end)/2);pos=svg.selectAll('.line')[\"_groups\"][0][index1].getPointAtLength(target);if((target===end||target===beginning)&&pos.x!==x){break;}if(pos.x>x)end=target;else if(pos.x<x)beginning=target;else break;//position found\n}var yCircle=sensorIndex*350;// console.log(index1);\nconsole.log(\"yCircle\",yCircle);svg.selectAll('.mouse-per-line').filter(function(d,i){return i==index1;}).style(\"transform\",\"translate(\".concat(x,\"px, \").concat(yCircle+pos.y,\"px )\"));svg.selectAll('.mouse-per-line text').filter(function(d,i){return i==index1;}).text(\"\".concat(clickedPosition.value[\"$numberDecimal\"].toString())).style(\"margin-left\",\"10px\");index1++;}sensorIndex++;}svg.select('.mouse-line').attr(\"d\",\"M\".concat(mouseClickX,\" , \").concat(innerHeight,\" \").concat(mouseClickX,\", 0\")).style(\"opacity\",\"1\");})();}};var convertLapTimesToArray=function convertLapTimesToArray(array){var lapTimes=[];for(var index in array){lapTimes=[].concat(_toConsumableArray(lapTimes),[+array[index].lapTime[\"$numberDecimal\"]]);}return lapTimes;};return/*#__PURE__*/_jsx(_Fragment,{children:/*#__PURE__*/_jsx(\"div\",{children:/*#__PURE__*/_jsx(\"svg\",{ref:svgRef,style:{height:\"\".concat(dimensions.height),width:\"\".concat(dimensions.width)},children:/*#__PURE__*/_jsxs(\"g\",{style:{transform:\"translate(\".concat(margin.left,\"px, \").concat(margin.top,\"px)\")},children:[renderGraphs(),/*#__PURE__*/_jsxs(\"g\",{className:\"mouseover\",children:[/*#__PURE__*/_jsx(\"path\",{className:\"mouse-line\",style:{stroke:\"black\",strokeWidth:\"2px\",opacity:\"1px\"}}),/*#__PURE__*/_jsx(\"rect\",{width:innerWidth+5,height:innerHeight,fill:\"none\",onMouseDown:function onMouseDown(mouseClick){return showLine(mouseClick);},pointerEvents:\"all\"})]}),/*#__PURE__*/_jsx(\"g\",{className:\"x-axis\"})]})})})});}export default GraphicalView;","map":{"version":3,"sources":["C:/Users/brand/source/repos/das-server/client/src/components/historyPage/graphicalView/GraphicalView.js"],"names":["React","useEffect","useRef","useState","SensorGraph","useSelector","useDispatch","select","bisector","scaleLinear","axisBottom","zoom","zoomTransform","loadDefaultSensorData","GraphicalView","sensorsData","state","generalHistoricalData","dispatch","height","width","dimensions","setDimensions","currentZoomState","setCurrentZoomState","margin","top","right","bottom","left","innerHeight","innerWidth","svgRef","svg","xScale","yScales","renderGraphs","sensorGraphs","sensorIndex","sensor","currentMinMax","getLapMinMaxValues","lap","minValue","maxValue","getMinMax","yScale","domain","range","isFirstSensor","currentMin","currentMax","lapValues","value","valueIndex","parseFloat","toString","getLongestLap","firstSensor","Object","keys","longestLap","length","renderMousePerLines","index","mousePerLine","append","data","attr","style","current","parentNode","getBoundingClientRect","lapTime","xAxis","ticks","call","newXScale","rescaleX","xOffset","console","log","showLine","mouseClick","mouseClickX","clientX","clickedPosition","index1","lapForSensor","x0","invert","roundedX0","Math","round","lapTimes","convertLapTimesToArray","bisect","center","idx","x","beginning","end","selectAll","getTotalLength","target","pos","floor","getPointAtLength","yCircle","filter","d","i","y","text","array","transform","stroke","strokeWidth","opacity"],"mappings":"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","sourcesContent":["import React, {useEffect, useRef, useState} from 'react';\r\nimport SensorGraph from './SensorGraph/SensorGraph';\r\nimport {useSelector, useDispatch} from 'react-redux';\r\nimport {select, bisector, scaleLinear, axisBottom, zoom, zoomTransform} from 'd3';\r\nimport {loadDefaultSensorData} from '../../../actions/historyPage/historicalPageActions'\r\n\r\nfunction GraphicalView() {\r\n    const sensorsData = useSelector( (state) => state.generalHistoricalData.sensorsData);\r\n    const dispatch = useDispatch();\r\n    const [dimensions, setDimensions] = useState({height: 0, width: 0});\r\n    const [currentZoomState, setCurrentZoomState] = useState();\r\n    const margin = {top: 50, right: 50, bottom: 50, left: 50};\r\n    const innerHeight = dimensions.height - margin.top - margin.bottom;\r\n    const innerWidth = dimensions.width - margin.left - margin.right;\r\n\r\n    const svgRef = useRef();\r\n    let svg = null;\r\n    let xScale = null;\r\n    let yScales = {};\r\n\r\n    const renderGraphs = () => {\r\n        let sensorGraphs = [];\r\n        let sensorIndex = 0;\r\n        \r\n        if(dimensions.height !== 0 ) {\r\n            for (const sensor in sensorsData) {\r\n\r\n                yScales[sensor] = null;\r\n    \r\n                let currentMinMax = getLapMinMaxValues(sensorsData[sensor][0]); \r\n    \r\n                // find min and max in all of the sensors laps\r\n                for (const lap of sensorsData[sensor]) {\r\n                    const {minValue, maxValue} = getLapMinMaxValues(lap);\r\n                    currentMinMax = getMinMax(currentMinMax.minValue, minValue, currentMinMax.maxValue, maxValue);\r\n                }\r\n    \r\n                const yScale = scaleLinear().domain( [currentMinMax.minValue, currentMinMax.maxValue]).range( [300, 0] );\r\n                yScales[sensor] = yScale;\r\n    \r\n                const isFirstSensor = sensorIndex === 0 ? true : false;\r\n            \r\n                sensorGraphs = [...sensorGraphs, <SensorGraph minValue={currentMinMax.minValue} maxValue={currentMinMax.maxValue} index={sensorIndex} width={dimensions.width} yScale={yScales[sensor]} isFirstSensor={isFirstSensor} sensor={sensor} sensorData={sensorsData[sensor]} />];\r\n                sensorIndex++;\r\n            }\r\n        }\r\n        \r\n        return sensorGraphs;\r\n    }\r\n\r\n    const getMinMax = (currentMin, minValue, currentMax, maxValue) => {\r\n\r\n        if (currentMin > minValue) {\r\n            currentMin = minValue\r\n        }\r\n\r\n        if(currentMax < maxValue)  {\r\n            currentMax = maxValue\r\n        }\r\n\r\n        return {\r\n            minValue: currentMin,\r\n            maxValue: currentMax\r\n        }\r\n    }\r\n\r\n    const getLapMinMaxValues = (lapValues) =>  {\r\n        let minValue = lapValues[0].value[\"$numberDecimal\"];\r\n        let maxValue = lapValues[0].value[\"$numberDecimal\"];\r\n        \r\n        for (const valueIndex of lapValues) {\r\n        \r\n            if (parseFloat(valueIndex.value[\"$numberDecimal\"].toString()) > maxValue) {\r\n                maxValue = valueIndex.value[\"$numberDecimal\"]\r\n            }\r\n\r\n            if ( parseFloat(valueIndex.value[\"$numberDecimal\"].toString()) < minValue) {\r\n                minValue = valueIndex.value[\"$numberDecimal\"]\r\n            }\r\n        }\r\n\r\n        return {\r\n            minValue,\r\n            maxValue\r\n        }\r\n    }\r\n\r\n    const getLongestLap = () => {\r\n\r\n        let firstSensor = sensorsData[Object.keys(sensorsData)[0]];\r\n        let longestLap = firstSensor[0];\r\n\r\n        for (let lap of firstSensor) {\r\n            if(lap.length > longestLap.length) { \r\n                longestLap = lap;\r\n            }\r\n        }\r\n        return longestLap;\r\n    }\r\n\r\n    const renderMousePerLines = (svg) => {\r\n        for(const sensor in sensorsData) {\r\n            for(const index in sensorsData[sensor]) {\r\n                let mousePerLine = svg.select('.mouseover')\r\n                                    .append(\"g\")\r\n                                    .data([sensorsData[sensor][index]])\r\n                                    .attr(\"class\", \"mouse-per-line\");\r\n\r\n                    mousePerLine.append(\"circle\")\r\n                    .attr(\"r\", 7)\r\n                    .style(\"fill\", \"none\")\r\n                    .style(\"stroke\",\"black\")\r\n                    .style(\"stroke-width\", \"1px\")\r\n                    .attr(\"class\", \"mouse-circle\");\r\n\r\n                    mousePerLine.append(\"text\").attr(\"transform\", \"translate(10,3)\");\r\n            }\r\n        }\r\n    }\r\n\r\n    useEffect( () => {\r\n        dispatch(loadDefaultSensorData())\r\n    }, [])\r\n\r\n    useEffect( () => {\r\n        \r\n        if(svgRef.current && Object.keys(sensorsData).length > 0) {\r\n\r\n            const height = Object.keys(sensorsData).length * 600;\r\n            const width = svgRef.current.parentNode.getBoundingClientRect().width;\r\n            setDimensions({height, width});\r\n\r\n            const longestLap = getLongestLap()\r\n\r\n            svg = select(svgRef.current);\r\n\r\n            renderMousePerLines(svg);\r\n            \r\n            xScale = scaleLinear()\r\n                .domain( [  parseFloat(longestLap[0].lapTime[\"$numberDecimal\"].toString() ), parseFloat(longestLap[longestLap.length - 1].lapTime[\"$numberDecimal\"].toString() ) ] )\r\n                .range( [0, dimensions.width] );\r\n \r\n            const xAxis = axisBottom(xScale).ticks(30)\r\n            svg.select('.x-axis').style('transform', `translateY(${Object.keys(sensorsData).length * 600}px)`).call(xAxis)\r\n\r\n        }\r\n        \r\n    }, [sensorsData, svgRef, sensorsData])\r\n\r\n    useEffect( () => {\r\n\r\n        if(svgRef.current && Object.keys(sensorsData).length > 0) {\r\n            svg = select(svgRef.current);\r\n            const longestLap = getLongestLap()\r\n\r\n            xScale = scaleLinear()\r\n                .domain( [  parseFloat(longestLap[0].lapTime[\"$numberDecimal\"].toString() ), parseFloat(longestLap[longestLap.length - 1].lapTime[\"$numberDecimal\"].toString() ) ] )\r\n                .range( [0, innerWidth] );\r\n\r\n            if(currentZoomState) {\r\n                const newXScale = currentZoomState.rescaleX(xScale);\r\n                xScale.domain(newXScale.domain());\r\n\r\n            }\r\n\r\n            const xAxis = axisBottom(xScale)\r\n            const xOffset = ((Object.keys(sensorsData).length - 1) * 350) + 300\r\n            console.log(Object.keys(sensorsData).length )\r\n            console.log(xOffset);\r\n            svg.select('.x-axis').style('transform', `translateY(${xOffset}px)`).call(xAxis)\r\n            // Object.keys(sensorsData).length * 383\r\n\r\n            // const zoomBehavior = zoom().scaleExtent([1, 10]).translateExtent([ [0,0], [dimensions.width, dimensions.height] ])\r\n            // .on(\"zoom\", () => { \r\n            //     const zoomState = zoomTransform(svg.node());\r\n            //     setCurrentZoomState(zoomState);\r\n            //     // console.log(zoomState)\r\n            // })\r\n\r\n            // svg.call(zoomBehavior);\r\n        }\r\n    }, [dimensions, currentZoomState, sensorsData])\r\n\r\n    \r\n    const showLine = (mouseClick) => {\r\n        // console.log(mouseClick);\r\n        const mouseClickX = mouseClick.clientX - margin.left;\r\n        let clickedPosition = null;\r\n\r\n        if(svgRef.current) {\r\n            \r\n            let index1 = 0;\r\n            let sensorIndex = 0; \r\n            for(const sensor in sensorsData) {\r\n                for(const index in sensorsData[sensor]) {\r\n\r\n                    let lapForSensor = sensorsData[sensor][index];\r\n                    let x0 = xScale.invert(mouseClickX);\r\n\r\n                    let roundedX0 = (Math.round(x0  * 10) / 10)\r\n\r\n                    let lapTimes = convertLapTimesToArray(lapForSensor);\r\n                    \r\n                    let bisect = bisector ( (lapTimes) => { return lapTimes} ).center;\r\n\r\n                    let idx = bisect(lapTimes, roundedX0);\r\n                    \r\n                    clickedPosition = lapForSensor[idx];\r\n\r\n\r\n                    let x = mouseClickX;\r\n                    let beginning = x;\r\n                    let end = svg.selectAll('.line')[\"_groups\"][0][index1].getTotalLength();\r\n                    let target = null;\r\n                    let pos = null; \r\n\r\n                    while (true) {\r\n                        target = Math.floor((beginning + end) / 2);\r\n                        pos = svg.selectAll('.line')[\"_groups\"][0][index1].getPointAtLength(target);\r\n\r\n                        if ((target === end || target === beginning) && pos.x !== x) {\r\n                            break;\r\n                        }\r\n\r\n                        if (pos.x > x) end = target;\r\n                        else if (pos.x < x) beginning = target;\r\n                        else break; //position found\r\n                    }\r\n\r\n                    const yCircle = sensorIndex * 350;\r\n\r\n                    // console.log(index1);\r\n                    console.log(\"yCircle\",yCircle);\r\n\r\n                    svg.selectAll('.mouse-per-line').filter(function(d, i) { return i == index1 }).style(\"transform\", `translate(${x}px, ${yCircle + pos.y}px )`);\r\n                    svg.selectAll('.mouse-per-line text').filter(function(d, i) { return i == index1 }).text(`${clickedPosition.value[\"$numberDecimal\"].toString()}`).style(\"margin-left\",\"10px\");\r\n                    index1++;\r\n                }\r\n                sensorIndex++;\r\n            }\r\n\r\n            svg.select('.mouse-line').attr(\"d\",`M${mouseClickX} , ${innerHeight} ${mouseClickX}, 0`).style(\"opacity\",\"1\")\r\n\r\n        }\r\n    }\r\n\r\n    const convertLapTimesToArray = (array) => {\r\n        let lapTimes = []\r\n        for(const index in array) {\r\n            lapTimes = [...lapTimes, +array[index].lapTime[\"$numberDecimal\"]]\r\n        }\r\n        return lapTimes\r\n    }\r\n\r\n    return (\r\n        <>\r\n        <div>\r\n            <svg ref={svgRef} style={{height: `${dimensions.height}`, width: `${dimensions.width}` }}>\r\n                <g style={{transform: `translate(${margin.left}px, ${margin.top}px)`}}>\r\n                    { renderGraphs() }\r\n                    <g className=\"mouseover\">\r\n                        <path className=\"mouse-line\" style={{stroke: \"black\", strokeWidth: \"2px\", opacity: \"1px\"}}></path>\r\n                        <rect width={innerWidth + 5} height={innerHeight} fill={\"none\"} onMouseDown={(mouseClick) => showLine(mouseClick)} pointerEvents={\"all\"} ></rect>\r\n                    </g>\r\n                    <g className=\"x-axis\" /> \r\n                </g>\r\n            </svg>\r\n        </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default GraphicalView\r\n"]},"metadata":{},"sourceType":"module"}