{"ast":null,"code":"import gauss from './gauss';\nimport adjust_lon from '../common/adjust_lon';\nexport function init() {\n  gauss.init.apply(this);\n\n  if (!this.rc) {\n    return;\n  }\n\n  this.sinc0 = Math.sin(this.phic0);\n  this.cosc0 = Math.cos(this.phic0);\n  this.R2 = 2 * this.rc;\n\n  if (!this.title) {\n    this.title = \"Oblique Stereographic Alternative\";\n  }\n}\nexport function forward(p) {\n  var sinc, cosc, cosl, k;\n  p.x = adjust_lon(p.x - this.long0);\n  gauss.forward.apply(this, [p]);\n  sinc = Math.sin(p.y);\n  cosc = Math.cos(p.y);\n  cosl = Math.cos(p.x);\n  k = this.k0 * this.R2 / (1 + this.sinc0 * sinc + this.cosc0 * cosc * cosl);\n  p.x = k * cosc * Math.sin(p.x);\n  p.y = k * (this.cosc0 * sinc - this.sinc0 * cosc * cosl);\n  p.x = this.a * p.x + this.x0;\n  p.y = this.a * p.y + this.y0;\n  return p;\n}\nexport function inverse(p) {\n  var sinc, cosc, lon, lat, rho;\n  p.x = (p.x - this.x0) / this.a;\n  p.y = (p.y - this.y0) / this.a;\n  p.x /= this.k0;\n  p.y /= this.k0;\n\n  if (rho = Math.sqrt(p.x * p.x + p.y * p.y)) {\n    var c = 2 * Math.atan2(rho, this.R2);\n    sinc = Math.sin(c);\n    cosc = Math.cos(c);\n    lat = Math.asin(cosc * this.sinc0 + p.y * sinc * this.cosc0 / rho);\n    lon = Math.atan2(p.x * sinc, rho * this.cosc0 * cosc - p.y * this.sinc0 * sinc);\n  } else {\n    lat = this.phic0;\n    lon = 0;\n  }\n\n  p.x = lon;\n  p.y = lat;\n  gauss.inverse.apply(this, [p]);\n  p.x = adjust_lon(p.x + this.long0);\n  return p;\n}\nexport var names = [\"Stereographic_North_Pole\", \"Oblique_Stereographic\", \"Polar_Stereographic\", \"sterea\", \"Oblique Stereographic Alternative\", \"Double_Stereographic\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names\n};","map":{"version":3,"sources":["C:/Users/brand/source/repos/das-server/client/node_modules/proj4/lib/projections/sterea.js"],"names":["gauss","adjust_lon","init","apply","rc","sinc0","Math","sin","phic0","cosc0","cos","R2","title","forward","p","sinc","cosc","cosl","k","x","long0","y","k0","a","x0","y0","inverse","lon","lat","rho","sqrt","c","atan2","asin","names"],"mappings":"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","sourcesContent":["import gauss from './gauss';\nimport adjust_lon from '../common/adjust_lon';\n\nexport function init() {\n  gauss.init.apply(this);\n  if (!this.rc) {\n    return;\n  }\n  this.sinc0 = Math.sin(this.phic0);\n  this.cosc0 = Math.cos(this.phic0);\n  this.R2 = 2 * this.rc;\n  if (!this.title) {\n    this.title = \"Oblique Stereographic Alternative\";\n  }\n}\n\nexport function forward(p) {\n  var sinc, cosc, cosl, k;\n  p.x = adjust_lon(p.x - this.long0);\n  gauss.forward.apply(this, [p]);\n  sinc = Math.sin(p.y);\n  cosc = Math.cos(p.y);\n  cosl = Math.cos(p.x);\n  k = this.k0 * this.R2 / (1 + this.sinc0 * sinc + this.cosc0 * cosc * cosl);\n  p.x = k * cosc * Math.sin(p.x);\n  p.y = k * (this.cosc0 * sinc - this.sinc0 * cosc * cosl);\n  p.x = this.a * p.x + this.x0;\n  p.y = this.a * p.y + this.y0;\n  return p;\n}\n\nexport function inverse(p) {\n  var sinc, cosc, lon, lat, rho;\n  p.x = (p.x - this.x0) / this.a;\n  p.y = (p.y - this.y0) / this.a;\n\n  p.x /= this.k0;\n  p.y /= this.k0;\n  if ((rho = Math.sqrt(p.x * p.x + p.y * p.y))) {\n    var c = 2 * Math.atan2(rho, this.R2);\n    sinc = Math.sin(c);\n    cosc = Math.cos(c);\n    lat = Math.asin(cosc * this.sinc0 + p.y * sinc * this.cosc0 / rho);\n    lon = Math.atan2(p.x * sinc, rho * this.cosc0 * cosc - p.y * this.sinc0 * sinc);\n  }\n  else {\n    lat = this.phic0;\n    lon = 0;\n  }\n\n  p.x = lon;\n  p.y = lat;\n  gauss.inverse.apply(this, [p]);\n  p.x = adjust_lon(p.x + this.long0);\n  return p;\n}\n\nexport var names = [\"Stereographic_North_Pole\", \"Oblique_Stereographic\", \"Polar_Stereographic\", \"sterea\",\"Oblique Stereographic Alternative\",\"Double_Stereographic\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names\n};\n"]},"metadata":{},"sourceType":"module"}