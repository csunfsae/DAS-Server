{"ast":null,"code":"// Heavily based on this tmerc projection implementation\n// https://github.com/mbloch/mapshaper-proj/blob/master/src/projections/tmerc.js\nimport pj_enfn from '../common/pj_enfn';\nimport pj_mlfn from '../common/pj_mlfn';\nimport pj_inv_mlfn from '../common/pj_inv_mlfn';\nimport adjust_lon from '../common/adjust_lon';\nimport { EPSLN, HALF_PI } from '../constants/values';\nimport sign from '../common/sign';\nexport function init() {\n  this.x0 = this.x0 !== undefined ? this.x0 : 0;\n  this.y0 = this.y0 !== undefined ? this.y0 : 0;\n  this.long0 = this.long0 !== undefined ? this.long0 : 0;\n  this.lat0 = this.lat0 !== undefined ? this.lat0 : 0;\n\n  if (this.es) {\n    this.en = pj_enfn(this.es);\n    this.ml0 = pj_mlfn(this.lat0, Math.sin(this.lat0), Math.cos(this.lat0), this.en);\n  }\n}\n/**\n    Transverse Mercator Forward  - long/lat to x/y\n    long/lat in radians\n  */\n\nexport function forward(p) {\n  var lon = p.x;\n  var lat = p.y;\n  var delta_lon = adjust_lon(lon - this.long0);\n  var con;\n  var x, y;\n  var sin_phi = Math.sin(lat);\n  var cos_phi = Math.cos(lat);\n\n  if (!this.es) {\n    var b = cos_phi * Math.sin(delta_lon);\n\n    if (Math.abs(Math.abs(b) - 1) < EPSLN) {\n      return 93;\n    } else {\n      x = 0.5 * this.a * this.k0 * Math.log((1 + b) / (1 - b)) + this.x0;\n      y = cos_phi * Math.cos(delta_lon) / Math.sqrt(1 - Math.pow(b, 2));\n      b = Math.abs(y);\n\n      if (b >= 1) {\n        if (b - 1 > EPSLN) {\n          return 93;\n        } else {\n          y = 0;\n        }\n      } else {\n        y = Math.acos(y);\n      }\n\n      if (lat < 0) {\n        y = -y;\n      }\n\n      y = this.a * this.k0 * (y - this.lat0) + this.y0;\n    }\n  } else {\n    var al = cos_phi * delta_lon;\n    var als = Math.pow(al, 2);\n    var c = this.ep2 * Math.pow(cos_phi, 2);\n    var cs = Math.pow(c, 2);\n    var tq = Math.abs(cos_phi) > EPSLN ? Math.tan(lat) : 0;\n    var t = Math.pow(tq, 2);\n    var ts = Math.pow(t, 2);\n    con = 1 - this.es * Math.pow(sin_phi, 2);\n    al = al / Math.sqrt(con);\n    var ml = pj_mlfn(lat, sin_phi, cos_phi, this.en);\n    x = this.a * (this.k0 * al * (1 + als / 6 * (1 - t + c + als / 20 * (5 - 18 * t + ts + 14 * c - 58 * t * c + als / 42 * (61 + 179 * ts - ts * t - 479 * t))))) + this.x0;\n    y = this.a * (this.k0 * (ml - this.ml0 + sin_phi * delta_lon * al / 2 * (1 + als / 12 * (5 - t + 9 * c + 4 * cs + als / 30 * (61 + ts - 58 * t + 270 * c - 330 * t * c + als / 56 * (1385 + 543 * ts - ts * t - 3111 * t)))))) + this.y0;\n  }\n\n  p.x = x;\n  p.y = y;\n  return p;\n}\n/**\n    Transverse Mercator Inverse  -  x/y to long/lat\n  */\n\nexport function inverse(p) {\n  var con, phi;\n  var lat, lon;\n  var x = (p.x - this.x0) * (1 / this.a);\n  var y = (p.y - this.y0) * (1 / this.a);\n\n  if (!this.es) {\n    var f = Math.exp(x / this.k0);\n    var g = 0.5 * (f - 1 / f);\n    var temp = this.lat0 + y / this.k0;\n    var h = Math.cos(temp);\n    con = Math.sqrt((1 - Math.pow(h, 2)) / (1 + Math.pow(g, 2)));\n    lat = Math.asin(con);\n\n    if (y < 0) {\n      lat = -lat;\n    }\n\n    if (g === 0 && h === 0) {\n      lon = 0;\n    } else {\n      lon = adjust_lon(Math.atan2(g, h) + this.long0);\n    }\n  } else {\n    // ellipsoidal form\n    con = this.ml0 + y / this.k0;\n    phi = pj_inv_mlfn(con, this.es, this.en);\n\n    if (Math.abs(phi) < HALF_PI) {\n      var sin_phi = Math.sin(phi);\n      var cos_phi = Math.cos(phi);\n      var tan_phi = Math.abs(cos_phi) > EPSLN ? Math.tan(phi) : 0;\n      var c = this.ep2 * Math.pow(cos_phi, 2);\n      var cs = Math.pow(c, 2);\n      var t = Math.pow(tan_phi, 2);\n      var ts = Math.pow(t, 2);\n      con = 1 - this.es * Math.pow(sin_phi, 2);\n      var d = x * Math.sqrt(con) / this.k0;\n      var ds = Math.pow(d, 2);\n      con = con * tan_phi;\n      lat = phi - con * ds / (1 - this.es) * 0.5 * (1 - ds / 12 * (5 + 3 * t - 9 * c * t + c - 4 * cs - ds / 30 * (61 + 90 * t - 252 * c * t + 45 * ts + 46 * c - ds / 56 * (1385 + 3633 * t + 4095 * ts + 1574 * ts * t))));\n      lon = adjust_lon(this.long0 + d * (1 - ds / 6 * (1 + 2 * t + c - ds / 20 * (5 + 28 * t + 24 * ts + 8 * c * t + 6 * c - ds / 42 * (61 + 662 * t + 1320 * ts + 720 * ts * t)))) / cos_phi);\n    } else {\n      lat = HALF_PI * sign(y);\n      lon = 0;\n    }\n  }\n\n  p.x = lon;\n  p.y = lat;\n  return p;\n}\nexport var names = [\"Fast_Transverse_Mercator\", \"Fast Transverse Mercator\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names\n};","map":{"version":3,"sources":["C:/Users/brand/source/repos/das-server/client/node_modules/proj4/lib/projections/tmerc.js"],"names":["pj_enfn","pj_mlfn","pj_inv_mlfn","adjust_lon","EPSLN","HALF_PI","sign","init","x0","undefined","y0","long0","lat0","es","en","ml0","Math","sin","cos","forward","p","lon","x","lat","y","delta_lon","con","sin_phi","cos_phi","b","abs","a","k0","log","sqrt","pow","acos","al","als","c","ep2","cs","tq","tan","t","ts","ml","inverse","phi","f","exp","g","temp","h","asin","atan2","tan_phi","d","ds","names"],"mappings":"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","sourcesContent":["// Heavily based on this tmerc projection implementation\n// https://github.com/mbloch/mapshaper-proj/blob/master/src/projections/tmerc.js\n\nimport pj_enfn from '../common/pj_enfn';\nimport pj_mlfn from '../common/pj_mlfn';\nimport pj_inv_mlfn from '../common/pj_inv_mlfn';\nimport adjust_lon from '../common/adjust_lon';\n\nimport {EPSLN, HALF_PI} from '../constants/values';\nimport sign from '../common/sign';\n\nexport function init() {\n  this.x0 = this.x0 !== undefined ? this.x0 : 0;\n  this.y0 = this.y0 !== undefined ? this.y0 : 0;\n  this.long0 = this.long0 !== undefined ? this.long0 : 0;\n  this.lat0 = this.lat0 !== undefined ? this.lat0 : 0;\n\n  if (this.es) {\n    this.en = pj_enfn(this.es);\n    this.ml0 = pj_mlfn(this.lat0, Math.sin(this.lat0), Math.cos(this.lat0), this.en);\n  }\n}\n\n/**\n    Transverse Mercator Forward  - long/lat to x/y\n    long/lat in radians\n  */\nexport function forward(p) {\n  var lon = p.x;\n  var lat = p.y;\n\n  var delta_lon = adjust_lon(lon - this.long0);\n  var con;\n  var x, y;\n  var sin_phi = Math.sin(lat);\n  var cos_phi = Math.cos(lat);\n\n  if (!this.es) {\n    var b = cos_phi * Math.sin(delta_lon);\n\n    if ((Math.abs(Math.abs(b) - 1)) < EPSLN) {\n      return (93);\n    }\n    else {\n      x = 0.5 * this.a * this.k0 * Math.log((1 + b) / (1 - b)) + this.x0;\n      y = cos_phi * Math.cos(delta_lon) / Math.sqrt(1 - Math.pow(b, 2));\n      b = Math.abs(y);\n\n      if (b >= 1) {\n        if ((b - 1) > EPSLN) {\n          return (93);\n        }\n        else {\n          y = 0;\n        }\n      }\n      else {\n        y = Math.acos(y);\n      }\n\n      if (lat < 0) {\n        y = -y;\n      }\n\n      y = this.a * this.k0 * (y - this.lat0) + this.y0;\n    }\n  }\n  else {\n    var al = cos_phi * delta_lon;\n    var als = Math.pow(al, 2);\n    var c = this.ep2 * Math.pow(cos_phi, 2);\n    var cs = Math.pow(c, 2);\n    var tq = Math.abs(cos_phi) > EPSLN ? Math.tan(lat) : 0;\n    var t = Math.pow(tq, 2);\n    var ts = Math.pow(t, 2);\n    con = 1 - this.es * Math.pow(sin_phi, 2);\n    al = al / Math.sqrt(con);\n    var ml = pj_mlfn(lat, sin_phi, cos_phi, this.en);\n\n    x = this.a * (this.k0 * al * (1 +\n      als / 6 * (1 - t + c +\n      als / 20 * (5 - 18 * t + ts + 14 * c - 58 * t * c +\n      als / 42 * (61 + 179 * ts - ts * t - 479 * t))))) +\n      this.x0;\n\n    y = this.a * (this.k0 * (ml - this.ml0 +\n      sin_phi * delta_lon * al / 2 * (1 +\n      als / 12 * (5 - t + 9 * c + 4 * cs +\n      als / 30 * (61 + ts - 58 * t + 270 * c - 330 * t * c +\n      als / 56 * (1385 + 543 * ts - ts * t - 3111 * t)))))) +\n      this.y0;\n  }\n\n  p.x = x;\n  p.y = y;\n\n  return p;\n}\n\n/**\n    Transverse Mercator Inverse  -  x/y to long/lat\n  */\nexport function inverse(p) {\n  var con, phi;\n  var lat, lon;\n  var x = (p.x - this.x0) * (1 / this.a);\n  var y = (p.y - this.y0) * (1 / this.a);\n\n  if (!this.es) {\n    var f = Math.exp(x / this.k0);\n    var g = 0.5 * (f - 1 / f);\n    var temp = this.lat0 + y / this.k0;\n    var h = Math.cos(temp);\n    con = Math.sqrt((1 - Math.pow(h, 2)) / (1 + Math.pow(g, 2)));\n    lat = Math.asin(con);\n\n    if (y < 0) {\n      lat = -lat;\n    }\n\n    if ((g === 0) && (h === 0)) {\n      lon = 0;\n    }\n    else {\n      lon = adjust_lon(Math.atan2(g, h) + this.long0);\n    }\n  }\n  else { // ellipsoidal form\n    con = this.ml0 + y / this.k0;\n    phi = pj_inv_mlfn(con, this.es, this.en);\n\n    if (Math.abs(phi) < HALF_PI) {\n      var sin_phi = Math.sin(phi);\n      var cos_phi = Math.cos(phi);\n      var tan_phi = Math.abs(cos_phi) > EPSLN ? Math.tan(phi) : 0;\n      var c = this.ep2 * Math.pow(cos_phi, 2);\n      var cs = Math.pow(c, 2);\n      var t = Math.pow(tan_phi, 2);\n      var ts = Math.pow(t, 2);\n      con = 1 - this.es * Math.pow(sin_phi, 2);\n      var d = x * Math.sqrt(con) / this.k0;\n      var ds = Math.pow(d, 2);\n      con = con * tan_phi;\n\n      lat = phi - (con * ds / (1 - this.es)) * 0.5 * (1 -\n        ds / 12 * (5 + 3 * t - 9 * c * t + c - 4 * cs -\n        ds / 30 * (61 + 90 * t - 252 * c * t + 45 * ts + 46 * c -\n        ds / 56 * (1385 + 3633 * t + 4095 * ts + 1574 * ts * t))));\n\n      lon = adjust_lon(this.long0 + (d * (1 -\n        ds / 6 * (1 + 2 * t + c -\n        ds / 20 * (5 + 28 * t + 24 * ts + 8 * c * t + 6 * c -\n        ds / 42 * (61 + 662 * t + 1320 * ts + 720 * ts * t)))) / cos_phi));\n    }\n    else {\n      lat = HALF_PI * sign(y);\n      lon = 0;\n    }\n  }\n\n  p.x = lon;\n  p.y = lat;\n\n  return p;\n}\n\nexport var names = [\"Fast_Transverse_Mercator\", \"Fast Transverse Mercator\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names\n};\n"]},"metadata":{},"sourceType":"module"}